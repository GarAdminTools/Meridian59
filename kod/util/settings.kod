% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Settings is UtilityFunctions

% This class keeps global game settings.

constants:

   include blakston.khd

resources:

classvars:

properties:

   %
   % Economy controls
   %

   % piMoneyFactor: How much money should be given out?  Raise this number to
   %  increase the amount of money given out.
   piMoneyFactor = 100

   % Increase this to increase the number of items dropped from monster deaths.
   piItemFactor = 100

   % Modifier to the chance for items to be generated.
   piMagicItemModifier = 100

   % Changed the wait for monsters to spawn.  A decrease means things
   %  spawn faster (less time waiting between spawns).
   piSpawnRate = 100

   %
   % Player advancement
   %

   % If true, you can't take any objects out of the newbie area.
   pbCleanNewbieInventoryOnEnteringRealWorld = FALSE

   piKillKarmaSwingNeutral = 2
   piKillKarmaSwingMonster = 6
   piKillKarmaSwingPlayer = 10

   pbMonsterFactionEnabled = TRUE

   pbAtrophyOn = FALSE
   
   % Stat reset options
   pbStatsResetEnabled = TRUE
   piStatsResetPenalty = -2
   piFreeStatsResetCap = 19
   piStatResetTokenLife = 2

   % Stat reset token has a 1 in (piStatResetTokenDropFactor / monster_level)
   % chance to drop, with monster_level bound between 50 and 150.
   piStatResetTokenDropFactor = 250000

   % Lore book drop facter, 1 in piLoreBookDropFactor per loot roll
   piLoreBookDropFactor = 2000

   % DefaultDeathCost:  Should always be a value between 1 and 100.  Lowering
   %  this will lower the odds of a dead player losing health and skill/spell
   %  percents.
   piDefaultDeathCost = 100

   % piAdvancementRate: Determines how fast or slow advancement goes for all
   %  spells and skills.  This is a percent of normal, and only affects the
   %  secondary chance.
   piAdvancementRate = 100

   % The training points we grant players each day to reward them for logging on.
   piLogonBonus = 200

   % Multiplier for the amount of %s each mob you kill adds to your levelup chance.
   piHPGainMultiplier = 1
   
   % The maximum amount of unbound energy we can absorb
   piUnboundMax = 500

   % The maximum percentage of XP we can absorb as unbound energy.
   piUnboundAbsorption = 100

   % The permillage of unbound energy that is lost every second. 50 means 5 percent.
   piUnboundDecay = 50

   % Delay between receiving unbound energy and decay setting in in ms.
   piUnboundDelay = 30000

   % Players can't absorb unbound energy from monsters while engaged in PvP or
   % a short while thereafter. Default of 4 minutes.
   piUnboundEnergyAttackDelaySec = 240

   % How far up the food chain can basic players learn?  See player for more
   %  specific information on what this number means.
   piMaxLearnPoints = 16

   % Do building group member kills allow tougher rolls?
   pbGroupToughers = FALSE

   % The default time for building group membership.
   piDefaultGroupTime = 60000

   % The maximum HP a player can suicide their character at, without admin
   % help. Prevents people making mistakes in a fit of rage, or suiciding
   % hacked accounts.
   piMaxSuicideHP =  60

   %
   % Spell settings
   %

   % If true, you can recast a personal enchantment on yourself if you already have it.
   % This makes it easier to advance spells.
   pbCanRecastSelfEnchantment = TRUE

   % If true, while wearing a Jala necklace, you can cast spells even while
   % in a trance for a Jala song.
   pbCanRecastJalaWithNecklace = TRUE

   % Can't cast a teleport spell until this long after attacking someone.  Prevents
   % hit-and-run.  If 0, there's no restriction on when the spell can be cast.
   % Time in seconds.
   piTeleportAttackDelaySec = 240

   % Rescue always takes at least this long to cast
   piRescueBaseDelaySec = 7

   % Time in milliseconds that ghosts will last before taking a penalty
   piLogoffPenaltyGhostTime = 480 * 1000

   % Time in milliseconds that outlaw / murderer ghosts will last before taking a penalty
   piOutlawMurdererLogoffPenaltyGhostTime = 180 * 1000

   % If true, spellpower and duration are displayed for all spells cast.
   pbDisplaySpellData = FALSE
   
   %
   % Guild hall settings
   %

   % Are guild halls raidable?
   pbGuildHallRaids = TRUE

   % Wait one hour between raids by same guild.
   piGuildHallRaidDelay = 3600 

   % If true, "hot plate" objects (in guild halls) notify players when they're stepped on.
   % This is used for debugging room creation.  It should normally be off.
   pbShowHotPlates = FALSE

   % If true, tell DMs when a player crosses a "hot plate" object (in a guild hall).
   % Used for debugging the placement of hot plates.
   pbReportHotPlates = FALSE

   %
   % Speedhack & Teleport protection
   %
   
   % Maximum amount of tokens in the movement bucket
   piMovementBucketMax = 15000000
   
   %
   % Miscellaneous
   %

   % Set map where players start in.
   piInitialRoomID = RID_NEWB1

   % Enables or disables some safe-spots, see blakston.khd comments.
   piLOSSkip = LOS_SKIP_1

   % How many summoned objects can be in a room
   piPlayerSummonedObjectLimit = 18

   % Minimum number of HP you have to have to vote for or become
   % Justicar
   piMinHPForJusticar = 100

   % Cost for Caramo to change a player's name.
   piNameChangeCost = 3000000

   % If enabled, unsafe penalties send the player to their last safe place.
   % This is intended to prevent being players 'kept offline' by enemies.
   pbReturnToSafetyPenaltiesEnable = TRUE
   
   % If enabled, unsafe penalties send angeled players to their last safe place.
   % This is intended to prevent being players 'scouting' with mules.
   pbAngelReturnToSafetyPenaltiesEnable = TRUE
   
   % If this is enabled a player will lose half their mana and all buffs when they log off in a safe zone.
   % This is to prevent 'character trains' with pre-buffed characters
   pbLogSafePenaltyEnable = FALSE

   % If disabled, outlaws & murderers will not be afforded the 1/3-hp damage cap protection.
   pbDamageCapProtectionMurderersEnable = FALSE
   
   % Number of reflections allowed per caster.
   piPlayerReflectionLimit = 2

   % Number of minions allowed per caster.
   piPlayerMinionLimit = 4
   piMonsterMinionLimit = 4

   % Minimum swings needed for a chance to improve a weaponcraft skill.
   piWeaponcraftImprovementMinimumSwings = 50
   
   % Riija Sword drops on death? (Used to limit griefing)
   pbRiijaSwordDropOnDeath = FALSE

   % Replaces old constant
   piPKillEnableHP = 50
   
   % Replaces old constant
   piIntrigueEnableHP = 50
   
   % If set to true, Resist Rings will lose durability upon taking an appropriate elemental hit.
   piResistRingLoseDurability = FALSE

   % If enabled, logoff penalties do not rise exponentially, and instead remain flat
   pbFlatPenalties = TRUE

   % Length of hold effect players experience when logging or phasing in
   piLogonDelay = 2500
   
   % Length of time the temporary guardian angel lasts, in minutes
   piTempSafeMinutes = 180

   % Revenant speed setting
   piRevSpeed = 18

   % Alternate Justicar system - buying a pardon with an indulgence
   % is now possible for a flat fee (initially 1 million).
   piPardonIndulgenceCost = 1000000

   % The divisor for all skill post-softcap imp rates. Higher means harder. One means softcaps don't matter at all.
   piSkillSoftcapPenalty = 5

   % The divisor for all spell post-softcap imp rates.
   piSpellSoftcapPenalty = 4

   % Turns damage scaling for chance to hit greater than 100 percent on or off
   piDamageScaling = FALSE

   % A battler's chance to hit when offense equals defense in per MILLE
   piEqualChanceToHit = 500

   % This amount is added to a battler's offense and defense and
   % serves as a baseline for calculation.
   piBaseRating = 0

   % Do we do elemental status effects at all?
   piEnableElementalStatusEffects = TRUE

   % Status effect multiples
   % Shocked temporarily reduces defense by a multiple of damage taken (X*m defense)
   % Chilled temporarily slows attack and cast timers (X*m ms)
   % Burning temporarily deals burning damage over time by a divisor (X/m damage)
   % Corrode temporarily lowers armor (X/m armor) and weapon resists (X/m resist)
   % Humbled temporarily lowers resistances (X/m resist)
   % Mantled temporarily lowers the effect of healing on the victim (X/m healing)
   % Tricked heals the user when it wears off (illusionary damage)
   piShockedMultiple = 4
   piChilledMultiple = 4
   piBurningDivisor = 3
   piCorrodeDivisor = 3
   piHumbledDivisor = 1
   piMantledDivisor = 6
   piTrickedDivisor = 1
   
   piStatusEffectReductionTime = 3000
   
   % No longer used.
   piStatusEffectReductionAmount = 10
   
   % Use these instead.
   piChilledReductionAmount = 5
   piShockedReductionAmount = 5
   piCorrodeReductionAmount = 3
   piHumbledReductionAmount = 10
   piMantledReductionAmount = 1
   piTrickedReductionAmount = 7

   % Percent of mana required/used for broadcasting. Default 0 (no cost).
   piBroadcastManaPercent = 0

   % Jasper vault access
   pbJasperVault = FALSE

   % chance for stormy weather
   piStormChance = 25

   % If this is set to true, soldier shields will give their specialized
   % bonuses under all conditions. If it is false, they will only apply
   % when attacking or being attacked by another soldier to prevent
   % scenario overlap.
   pbAlwaysApplySoldierBonus = TRUE

   % Setting to allow users to remove their own posts.
   pbCanUserRemoveOwnPosts = TRUE

   % Magical modifications system
   pbShardsEnabled = FALSE
   % Probability for this shard is 1 out of X
   piMinorOutOf = 100
   piAugmeOutOf = 200
   piDisturbanceOutOf = 20
   piMajorOutOf = 1000
   piDisruptionOutOf = 50
   piDrainOutOf = 1000
   piEmpowOutOf = 10000
   piInstillingOutOf = 100
   piImprovementOutOf = 100

   % Can players Reincarnate at the Hall of Genealogy?   
   pbReincarnationEnabled = TRUE
   % How many more HP + Learn points*4 do we need per reincarnation?
   piReincarnationSumMultiple = 21
   piTPperReinc = 2000
   % Equation starts here
   piReincSumBase = 50

   % What type of experience system do we use?
   % WARNING: Classic experience system will require client modifications!
   piExperienceSystem = EXPERIENCE_SYSTEM_MODERN
   % Do we cap modern experience at player's own max health to tightly emulate old system?
   piCapModernExperience = TRUE

   % Champion Mob Spawns
   pbChampionSpawnsEnabled = TRUE

   % Expansion modules
   bSorcerySchoolExpansion = TRUE
   % Are Sorcery's reserved buffs purgeable?
   bReservedSpellsPurgeable = FALSE

   % Can people opt out of PvP?
   pbAllowOptOutPvP = FALSE

   % Turn this off if light effects are crashing people 
   pbLightEffectsEnabled = TRUE

   % Players do this percentage of damage to each other
   piPvPDamagePercentage = 100

   pbWitcherySchoolExpansion = TRUE
   % How many hexes can a player or mob have at most? General case.
   piMaxHexesOnVictim = 1

   % Do hexes replace each other when at the limit? Or just fail?
   pbHexesReplace = TRUE

   % Does gear with magic mods lose durability?
   pbLoseDurabilityMagicMods = FALSE

   % What is the general resistance cap?
   % Some races etc can modify this value.
   piGeneralMaxResistance = 75

   % If Direct Armor is true, old rules are used. Turn it off to switch to new system of resists only.
   pbDirectArmorEnabled = FALSE

   pbEmpowermentsEnabled = FALSE

   pbSpellItemManaCostsEnabled = FALSE

   piPrismMaxResistanceReward = 2
   piPrismResistanceReward = 5
   piPrismEmpowermentReward = 5

   % How many monsters can a single cleave hit?
   % Keep it higher than should normally be possible, but not so high that we risk crashes.
   piMaxCleaveAttacks = 20

   % Do amulet bearers and sword of the hunt wielders see each other as red halos?
   pbNecroAndHunterPvPOn = TRUE

   % Adjust Jala reservations
   piJalaReservationNumerator = 2
   piJalaReservationDenominator = 3
   
   piStandardKnockbackDistance = 320
   piStandardStunDuration = 5000
   piStandardBleedDuration = 60000

messages:

   Constructor()
   "Apply the appropriate settings for a given server number"
   {
      local server_num;

      server_num = Send(SYS,@GetServerNumber);

      % Apparently at some point someone decided this was a better value
      piKillKarmaSwingNeutral = 3;

      % Settings retrieved from running servers on 12/29/2010
      if server_num <> $
      {
         if server_num = 101
         {
            piDefaultDeathCost   = 90;
            piAdvancementRate    = 125;
            piMoneyFactor        = 120;
            piItemFactor         = 125;
            piMagicItemModifier  = 80;
            piSpawnRate          = 80;
         }

         if server_num = 102
         {
            piDefaultDeathCost   = 60;
            piAdvancementRate    = 190;
            piMoneyFactor        = 100;
            piItemFactor         = 175;
            piMagicItemModifier  = 100;
            piSpawnRate          = 85;
         }
      }
      return;
   }

   GetSettingsObject()
   "If we need to obtain the settings object, use this message."
   {
      return self;
   }

   Recreate()
   {
      return;
   }

   GetPKillEnableHP()
   {
      return piPKillEnableHP;
   }
   
   GetIntrigueEnableHP()
   {
      return piIntrigueEnableHP;
   }

   %
   % Economy controls
   %

   GetMoneyFactor()
   {
      return piMoneyFactor;
   }

   GetItemFactor()
   {
      return piItemFactor;
   }

   GetMagicItemModifier()
   {
      return piMagicItemModifier;
   }

   GetSpawnRate()
   {
      return piSpawnRate;
   }
   
   %
   % Player advancement
   %

   GetStatsResetEnabled()
   {
      return pbStatsResetEnabled;
   }
   
   GetStatsResetPenalty()
   {
      return piStatsResetPenalty;
   }
   
   GetFreeStatsResetCap()
   {
      return piFreeStatsResetCap;
   }
   
   GetStatResetTokenLife()
   {
      return piStatResetTokenLife;
   }
   
   GetStatResetTokenDropFactor()
   {
      return piStatResetTokenDropFactor;
   }

   GetLoreBookDropFactor()
   {
      return piLoreBookDropFactor;
   }

   CleanNewbieInventoryOnEnteringRealWorld()
   {
      return pbCleanNewbieInventoryOnEnteringRealWorld;
   }

   GetDefaultDeathCost()
   {
      return piDefaultDeathCost;
   }

   GetAdvancementRate()
   {
      return piAdvancementRate;
   }

   GetLogonBonus()
   {
      return piLogonBonus;
   }

   GetHPGainMultiplier()
   {
      return piHPGainMultiplier;
   }

   GetKillKarmaSwingNeutral()
   {
      return piKillKarmaSwingNeutral;
   }

   GetKillKarmaSwingMonster()
   {
      return piKillKarmaSwingMonster;
   }

   GetKillKarmaSwingPlayer()
   {
      return piKillKarmaSwingPlayer;
   }

   GetMonsterFactionEnabled()
   {
      return pbMonsterFactionEnabled;
   }

   IsAtrophyOn()
   {
      return pbAtrophyOn;
   }

   GetMaxLearnPoints()
   {
      return piMaxLearnPoints;
   }

   GetGroupTougherSetting()
   {
      return pbGroupToughers;
   }

   GetDefaultGroupTime()
   {
      return piDefaultGroupTime;
   }

   GetMaxSuicideHP()
   {
      return piMaxSuicideHP;
   }

   %
   % Spells
   %

   CanRecastSelfEnchantment() 
   {
      return pbCanRecastSelfEnchantment;
   }

   CanRecastJalaWithNecklace()
   {
      return pbCanRecastJalaWithNecklace;
   }

   UnboundEnergyAttackDelaySec()
   {
      return piUnboundEnergyAttackDelaySec;
   }

   TeleportAttackDelaySec()
   {
      return piTeleportAttackDelaySec;
   }

   RescueBaseDelaySec()
   {
      return piRescueBaseDelaySec;
   }

   DisplaySpellData()
   {
      return pbDisplaySpellData;
   }

   %
   % Guild hall settings
   %

   GuildHallRaidsEnabled()
   {
      return pbGuildHallRaids;
   }

   GetGuildhallRaidDelay()
   {
      return piGuildHallRaidDelay;
   }

   ShowHotPlates()
   {
      return pbShowHotPlates;
   }

   ReportHotPlates()
   {
      return pbReportHotPlates;
   }

   %
   % Speedhack & teleport protection
   %

   GetMovementBucketMax()
   {
      return piMovementBucketMax;
   }

   %
   % Miscellaneous
   %
   GetRiijaSwordDropOnDeath()
   {
      return pbRiijaSwordDropOnDeath;
   }

   GetInitialRoomID()
   {
      return piInitialRoomID;
   }

   GetLOSSkip()
   {
      return piLOSSkip;
   }

   GetPlayerSummonedObjectLimit()
   {
      return piPlayerSummonedObjectLimit;
   }

   GetMinHPForJusticar()
   {
      return piMinHPForJusticar;
   }

   GetNameChangeCost()
   {
      return piNameChangeCost;
   }

   % This returns whether players go to a room's blink spot or their last safe place when they pen
   ReturnToSafetyPenaltiesEnabled()
   {
      return pbReturnToSafetyPenaltiesEnable;
   }

   % This returns whether angeled players go to a room's blink spot or their last safe place when they pen
   AngelReturnToSafetyPenaltiesEnabled()
   {
      return pbAngelReturnToSafetyPenaltiesEnable;
   }
   
   % Returns if a player should recive a 'penalty' for logging of in a safe zone
   LogSafePenaltyEnable()
   {
      return pbLogSafePenaltyEnable;
   }

   DamageCapProtectionMurderersEnabled()
   {
      return pbDamageCapProtectionMurderersEnable;
   }

   GetLogoffPenaltyGhostTime()
   {
      return piLogoffPenaltyGhostTime;
   }
   
   GetPlayerReflectionLimit()
   {
      return piPlayerReflectionLimit;
   }

   GetPlayerMinionLimit()
   {
      return piPlayerMinionLimit;
   }

   GetMonsterMinionLimit()
   {
      return piMonsterMinionLimit;
   }

   GetSwingsPerImproveCheck()
   {
      return piWeaponcraftImprovementMinimumSwings;
   }

   GetFlatPenaltiesEnable()
   {
      return pbFlatPenalties;
   }

   GetLogonDelay()
   {
      return piLogonDelay;
   }

   GetTempSafeTime()
   {
      return piTempSafeMinutes;
   }

   GetOutlawMurdererLogoffPenaltyGhostTime()
   {
      return piOutlawMurdererLogoffPenaltyGhostTime;
   }

   GetResistRingLoseDurability()
   {
      return piResistRingLoseDurability;
   }

   GetRevenantSpeed()
   {
      return piRevSpeed;
   }

   GetPardonIndulgenceCost()
   {
      return piPardonIndulgenceCost;
   }

   GetSkillSoftcapPenalty()
   {
      return piSkillSoftcapPenalty;
   }

   GetSpellSoftcapPenalty()
   {
      return piSpellSoftcapPenalty;
   }

   GetDamageScaling()
   {
      return piDamageScaling;
   }

   GetEqualChanceToHit()
   {
      return piEqualChanceToHit;
   }

   GetBaseRating()
   {
      return piBaseRating;
   }

   GetElementalMultiple(type=STATUS_SHOCKED)
   {
      if type = STATUS_SHOCKED
      {
         return piShockedMultiple;
      }
      if type = STATUS_CHILLED
      {
         return piChilledMultiple;
      }
      if type = STATUS_BURNING
      {
         return bound(piBurningDivisor,2,100);
      }
      if type = STATUS_CORRODE
      {
         return bound(piCorrodeDivisor,1,100);
      }
      if type = STATUS_HUMBLED
      {
         return bound(piHumbledDivisor,1,100);
      }
      if type = STATUS_MANTLED
      {
         return bound(piMantledDivisor,1,100);
      }
      if type = STATUS_TRICKED
      {
         return bound(piTrickedDivisor,1,100);
      }
      return 0;
   }
   
   GetStatusEffectReductionTime()
   {
      return piStatusEffectReductionTime;
   }
   
   GetStatusEffectReductionAmount(type=STATUS_CHILLED)
   {
      switch(type)
      {
         case STATUS_CORRODE:
            return piCorrodeReductionAmount;
         case STATUS_HUMBLED:
            return piHumbledReductionAmount;
         case STATUS_MANTLED:
            return piMantledReductionAmount;
         case STATUS_SHOCKED:
            return piShockedReductionAmount;
         case STATUS_CHILLED:
            return piChilledReductionAmount;
         case STATUS_TRICKED:
            return piTrickedReductionAmount;
      }
      return piStatusEffectReductionAmount;
   }

   GetBroadcastManaCost()
   {
      return piBroadcastManaPercent;
   }

   GetExperienceSystem()
   {
      return piExperienceSystem;
   }
   
   GetCapModernExperience()
   {
      return piCapModernExperience;
   }

   JasperVaultOpen()
   {
      return pbJasperVault;
   }

   GetStormChance()
   {
      return piStormChance;
   }
   
   GetAlwaysApplySoldierBonus()
   {
      return pbAlwaysApplySoldierBonus;
   }

   CanUsersRemoveOwnPosts()
   {
      return pbCanUserRemoveOwnPosts;
   }

   GetShardsEnabled()
   {
      return pbShardsEnabled;
   }

   GetMinorShardProbability()
   {
      return piMinorOutOf;
   }

   GetAugmentShardProbability()
   {
      return piAugmeOutOf;
   }

   GetMajorShardProbability()
   {
      return piMajorOutOf;
   }

   GetDrainShardProbability()
   {
      return piDrainOutOf;
   }

   GetEmpowerShardProbability()
   {
      return piEmpowOutOf;
   }

   GetDisturbanceShardProbability()
   {
      return piDisturbanceOutOf;
   }

   GetDisruptionShardProbability()
   {
      return piDisruptionOutOf;
   }

   GetInstillingShardProbability()
   {
      return piInstillingOutOf;
   }

   GetImprovementShardProbability()
   {
      return piImprovementOutOf;
   }

   GetReincarnationEnabled()
   {
      return pbReincarnationEnabled;
   }

   GetUnboundMax()
   {
      return piUnboundMax;
   }

   GetUnboundAbsorption()
   {
      return piUnboundAbsorption;
   }

   GetUnboundDecay()
   {
      return piUnboundDecay;
   }

   GetUnboundDelay()
   {
      return piUnboundDelay;
   }

   GetEnableElementalStatusEffects()
   {
      return piEnableElementalStatusEffects;
   }
   
   GetChampionSpawnsEnabled()
   {
      return pbChampionSpawnsEnabled;
   }

   GetSorcerySchoolExpansion()
   {
      return bSorcerySchoolExpansion;
   }
   
   GetReservedSpellsPurgeable()
   {
      return bReservedSpellsPurgeable;
   }

   GetAllowOptOutPvP()
   {
      return pbAllowOptOutPvP;
   }

   GetLightEffectsEnabled()
   {
      return pbLightEffectsEnabled;
   }

   GetPvPDamagePercentage()
   {
      return piPvPDamagePercentage;
   }

   GetHexesMax()
   {
      return piMaxHexesOnVictim;
   }

   GetHexesReplace()
   {
      return pbHexesReplace;
   }

   GetLoseDurabilityMagicMods()
   {
      return pbLoseDurabilityMagicMods;
   }

   GetGeneralMaxResistance()
   {
      return piGeneralMaxResistance;
   }

   GetReincarnationSumMultiple()
   {
      return piReincarnationSumMultiple;
   }

   GetTPperReinc()
   {
      return piTPperReinc;
   }

   GetDirectArmorEnabled()
   {
      return pbDirectArmorEnabled;
   }

   GetEmpowermentsEnabled()
   {
      return pbEmpowermentsEnabled;
   }

   GetReincarnationSumBase()
   {
      return piReincSumBase;
   }

   GetSpellItemManaCostsEnabled()
   {
      return pbSpellItemManaCostsEnabled;
   }

   GetPrismMaxResistanceReward()
   {
      return piPrismMaxResistanceReward;
   }

   GetPrismResistanceReward()
   {
      return piPrismResistanceReward;
   }

   GetPrismEmpowermentReward()
   {
      return piPrismEmpowermentReward;
   }

   GetMaxCleaveAttacks()
   {
      return piMaxCleaveAttacks;
   }

   GetNecroAndHunterPvPOn()
   {
      return pbNecroAndHunterPvPOn;
   }

   GetJalaReservationNumerator()
   {
      return piJalaReservationNumerator;
   }

   GetJalaReservationDenominator()
   {
      return piJalaReservationDenominator;
   }

   GetStandardKnockbackDistance()
   {
      return piStandardKnockbackDistance;
   }
   
   GetStandardStunDuration()
   {
      return piStandardStunDuration;
   }
   
   GetStandardBleedDuration()
   {
      return piStandardBleedDuration;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
