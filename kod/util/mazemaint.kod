% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MazeRoomMaintenance is UtilityFunctions

constants:

   include blakston.khd

resources:

classvars:

properties:

   poFirstRoom = $
   plMazeRooms = $
   poTreasureRoom = $
   poShrineRoom = $
   poArmorRoom = $
   poBossRoom = $
   
   plMazeClasses = $

messages:

   Constructor()
   {
      Send(self,@Recreate);

      return;
   }

   Recreate()
   {
      local i;

      if poFirstRoom <> $
      {
         Send(poFirstRoom,@HustleUsersOutOfRoom);
         Send(poFirstRoom,@Delete);
         poFirstRoom = $;
      }
      if poBossRoom <> $
      {
         Send(poBossRoom,@HustleUsersOutOfRoom);
         Send(poBossRoom,@Delete);
         poBossRoom = $;
      }

      foreach i in plMazeRooms
      {
         Send(i,@Delete);
         plMazeRooms = DelListElem(plMazeRooms,i);
      }
      plMazeRooms = $;
      
      plMazeClasses = [&Maze5];
      %plMazeClasses = [&Maze4a, &Maze4b, &Maze4c];

      return;
   }

   GetFirstRoom()
   {
      if poFirstRoom = $
      {
         return Send(self,@CreateFirstRoom);
      }
      else
      {
         return poFirstRoom;
      }
      return $;
   }

   CreateFirstRoom()
   {
      if poFirstRoom = $
      {
         Send(SYS,@CreateOneRoomIfNew,#num=RID_MAZE_ENTRANCE,#class=&MinotaurMazeRoom);
         poFirstRoom = Send(SYS,@FindRoomByNum,#num=RID_MAZE_ENTRANCE);
         Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=RID_MAZE_ENTRANCE);
         return poFirstRoom;
      }

      return $;
   }

   GetBossRoom()
   {
      if poBossRoom = $
      {
         return Send(self,@CreateBossRoom);
      }
      else
      {
         return poBossRoom;
      }
      return $;
   }

   CreateBossRoom()
   {
      if poBossRoom = $
      {
         Send(SYS,@CreateOneRoomIfNew,#num=RID_MAZE_BOSS_ROOM,#class=&MazeBossRoom);
         poBossRoom = Send(SYS,@FindRoomByNum,#num=RID_MAZE_BOSS_ROOM);
         Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=RID_MAZE_BOSS_ROOM);
         return poBossRoom;
      }

      return $;
   }

   RoomDeleted(what=$)
   {
      if what <> $
      {
         if what = poFirstRoom
         {
            poFirstRoom = $;
         }
         if what = poBossRoom
         {
            poBossRoom = $;
         }
      }
      return;
   }
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   %%%%%%%%%%%%%%%%%%% Maze Room Handling 
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   NewDay()
   {
      local i;
      
      foreach i in plMazeRooms
      {
         Send(i,@NewDay);
      }

      return;
   }

   NewGameHour()
   {
      local i;
      
      foreach i in plMazeRooms
      {
         Send(i,@NewGameHour);
      }

      return;
   }

   GenerateNewRoom(from_room=$,from_direction=0)
   {
      local oRoom, iGeneratedNum, lMazeClasses, iTargetXCoord, iTargetYCoord;
      
      %
      %
      % CREATE EDGE ROOMS HERE
      %
      
      iTargetXCoord = Send(from_room,@GetXCoord);
      switch(from_direction)
      {
         case MAZE_DIRECTION_NORTH:
            break;
         case MAZE_DIRECTION_SOUTH:
            break;
         case MAZE_DIRECTION_WEST:
            iTargetXCoord--;
            break;
         case MAZE_DIRECTION_EAST:
            iTargetXCoord++;
            break;
      }
      
      iTargetYCoord = Send(from_room,@GetYCoord);
      switch(from_direction)
      {
         case MAZE_DIRECTION_NORTH:
            iTargetYCoord++;
            break;
         case MAZE_DIRECTION_SOUTH:
           iTargetYCoord--;
            break;
         case MAZE_DIRECTION_WEST:
            break;
         case MAZE_DIRECTION_EAST:
            break;
      }

      lMazeClasses = $;
      
      if iTargetYCoord = 1
      {
         lMazeClasses = [&MazeSouthBorder];
      }
      
      if Send(from_room,@GetXCoord) = -1
         AND Send(from_room,@GetYCoord) = -1
      {
         % We are entering the maze.
         lMazeClasses = [&Maze4a, &Maze4b, &Maze4c, &Maze5];
         iTargetXCoord = 4;
         iTargetYCoord = 1;
      }
      
      if iTargetXCoord = 1
         AND iTargetYCoord = 1
      {
         lMazeClasses = [&MazeSouthWestCorner];
      }
      
      if iTargetXCoord = 10
         AND iTargetYCoord = 1
      {
         lMazeClasses = [&MazeSouthEastCorner];
      }
      
      if iTargetXCoord = 1
         AND iTargetYCoord = 10
      {
         lMazeClasses = [&MazeNorthWestCorner];
      }
      
      if iTargetXCoord = 10
         AND iTargetYCoord = 10
      {
         lMazeClasses = [&MazeNorthEastCorner];
      }

      iGeneratedNum = Send(self,@GetNextAvailableRID);
      Send(SYS,@CreateOneRoomIfNew,#num=iGeneratedNum,
                                   #class=Nth(lMazeClasses,Random(1,Length(lMazeClasses))));
      Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iGeneratedNum);
      
      oRoom = Send(SYS,@FindRoomByNum,#num=iGeneratedNum);
      
      Send(oRoom,@SetConnectedRoom,#from_room=from_room,#from_direction=from_direction);
      Send(oRoom,@SetXCoord,#coord_value=iTargetXCoord);
      Send(oRoom,@SetYCoord,#coord_value=iTargetYCoord);
      
      plMazeRooms = Cons(oRoom,plMazeRooms);
      
      return oRoom;
   }

   GetNextAvailableRID()
   {
      local iRID, i, bExists;

      iRID = RID_MAZE_ROOM_START;

      if plMazeRooms = $
      {
         return iRID;
      }

      while iRID <= RID_MAZE_ROOM_END
      {
         bExists = FALSE;
         foreach i in plMazeRooms
         {
            if Send(i,@GetRoomNum) = iRID
            {
               bExists = TRUE;
            }
         }

         if NOT bExists
         {
            return iRID;
         }

         iRID = iRID + 1;
      }

      return 0;
   }

   GetExit()
   {
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
