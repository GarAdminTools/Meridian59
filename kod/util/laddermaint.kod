% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
LadderMaintenance is UtilityFunctions

% A challenge ladder is a separated pool of players, ranked by wisdom, that can only interact with each other.
% They have their own economy - out of ladder items can't be picked up by them and they can't give items to normal players.
% No spells, buffs, AEs, etc can cross over. Separate wall element limits in a room.
% Players in ladder / non-ladder can see each other, mainly for cool purposes like watching fights, but also because mules can be used for spotting anyway.
% Monster killing with ladder + non-ladder is possible, but only because monster XP is split based on damage dealt anyway.
%     You can't really gain an advantage by building with out of ladder players.
% Players in a ladder join building groups separate from non-ladder players.
%
%
% Ladders also have special events, rules, and rewards.
% The first challenge ladder will have specially crafted Marauders - aka PKs and hunters - active at unpredictable times.
%    Players may find themselves under attack by a variety of PKs while out in the world.
%    These PKs may also be pursued by a variety of hunters, who will appear shortly after to assist law-abiding citizens.
%    Be aware, players who are outlaws or murderers themselves will not be treated so kindly by these hunters!
%    Not all the PKs are red. Some have soldier shields, or ao3s/swords of the hunt, to challenge players participating in those systems.
%    Defeated Marauders generally drop the specialized gear they're using, plus something extra and unexpected...
%
% The challenge ladder also has special drops available in certain places.
% These unique items offer powerful school-based abilities.
% For example, the Shadowstep Tabi boots grant Qor 6 players a new level 6 Qor spell called Sanguine Fervor,
%    which makes all of your attacks cause bleed for 10 seconds, but can only be cast once per minute.
%    Shadowstep Tabi boots also grant the passive abilities 'You are hidden while not in combat.' and 'You are immune to poison.'
% These unique items are obviously only available to ladder players.
%
% The character with the highest wisdom at the end of the challenge ladder gets a title and a Magic Spirit Helm.
% The top ten characters get Magic Bows.
% The top one hundred characters receive either Boots or a Staff.
% 

constants:

   include blakston.khd

resources:

   no_ladder_players = \
      "There are no adventurers currently in the ladder competition."
   ranking_header = \
      "The top adventurers currently in the ladder competition are:\n"
   ranking_name_and_wisdom = \
      "%s, %i wisdom"
      
   your_ranking_ladder = \
      "You are rank %i in the ladder competition."

classvars:

properties:

   plLadderPlayers = $
   
   pbLadderEnabled = TRUE
   
   piLadderNum = 1
   
   plMarauderClasses = $
   plMarauderList = $

messages:

   Constructor()
   {
      Send(self,@Recreate);

      return;
   }

   Recreate()
   {
      Send(self,@BuildMarauderList);
      return;
   }

   NewDay()
   {
      return;
   }

   NewGameHour()
   {
      return;
   }

   GetLadderPlayers()
   {
      return plLadderPlayers;
   }
   
   AddLadderPlayer(oPlayer=$)
   {
      if plLadderPlayers = $
         OR NOT FindListElem(plLadderPlayers,oPlayer)
      {
         plLadderPlayers = Cons(oPlayer,plLadderPlayers);
         return TRUE;
      }
      return FALSE;
   }
   
   RemoveLadderPlayer(oPlayer=$)
   {
      if plLadderPlayers <> $
         AND FindListElem(plLadderPlayers,oPlayer)
      {
         plLadderPlayers = DelListElem(plLadderPlayers,oPlayer);
         return TRUE;
      }
      return FALSE;
   }
   
   IsOnLadder(oPlayer=$)
   {
      if plLadderPlayers <> $
         AND FindListElem(plLadderPlayers,oPlayer)
      {
         return TRUE;
      }
      return FALSE;
   }
   
   GetLadderEnabled()
   {
      return pbLadderEnabled;
   }

   GetLadderNum()
   {
      return piLadderNum;
   }
   
   DoLadderReport(who=$)
   {
      local iCount;

      if plLadderPlayers = $
      {
         Send(who,@MsgSendUser,#message_rsc=no_ladder_players);
         return;
      }
      
      Send(who,@MsgSendUser,#message_rsc=ranking_header);
      
      iCount = 1;
      while iCount <= 10
      {
         if iCount <= Length(plLadderPlayers)
         {
            Send(who,@MsgSendUser,#message_rsc=ranking_name_and_wisdom,#parm1=Send(Nth(plLadderPlayers,iCount),@GetTrueName),#parm2=Send(Nth(plLadderPlayers,iCount),@GetAccumulatedWisdom));
         }
      }
      
      if FindListElem(plLadderPlayers,who)
      {
         Send(who,@MsgSendUser,#message_rsc=your_ranking_ladder,#parm1=FindListElem(plLadderPlayers,who));
      }

      return;
   }
   
   BuildMarauderList()
   {
      plMarauderClasses = $;
      plMarauderClasses = Cons(&MarauderGeiLong, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderDavinus, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderAbu, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderZett, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderVallok, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderRonu, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderMoxie, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderMoosico, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderLuganeon, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderLacie, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderKal, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderShindra, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderJinora, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderToxus, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderSeaMan, plMarauderClasses);
      plMarauderClasses = Cons(&MarauderBobo, plMarauderClasses);
      return;
   }
   
   SpawnMarauders()
   {
      local iRID, oRoom, i, n, lNeighborRooms, lEntrances, bSpawned, lChosenEntrance, iMarauderCount;
      
      iRID = RID_TOS;
      oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
      
      lNeighborRooms = $;
      foreach i in Send(oRoom,@GetYellZone)
      {
         if i <> iRID
         {
            lNeighborRooms = Cons(Send(SYS,@FindRoomByNum,#num=i),lNeighborRooms);
         }
      }
      
      foreach i in lNeighborRooms
      {
         foreach n in Send(i,@GetStandardExits)
         {
            if Nth(n,3) = iRID
            {
               lEntrances = Cons([Nth(n,4),Nth(n,5)],lEntrances);
            }
         }
         foreach n in Send(i,@GetEdgeExits)
         {
            if Nth(n,2) = iRID
            {
               lEntrances = Cons([Nth(n,3),Nth(n,4)],lEntrances);
            }
         }
      }
      
      bSpawned = FALSE;
      iMarauderCount = 2;
      lChosenEntrance = Nth(lEntrances,Random(1,Length(lEntrances)));
      
      while iMarauderCount > 0
      {
         Send(oRoom,@NewHold,#what=Create(Nth(plMarauderClasses,Random(1,Length(plMarauderClasses)))),
                             #new_row=Nth(lChosenEntrance,1),
                             #new_col=Nth(lChosenEntrance,2));
         iMarauderCount--;                       
      }
       
%      foreach i in lEntrances
%      {
%         Send(oRoom,@NewHold,#what=Create(Nth(plMarauderClasses,Random(1,Length(plMarauderClasses)))),
%                             #new_row=Nth(i,1),
%                             #new_col=Nth(i,2));
%         bSpawned = TRUE;
%      }

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
