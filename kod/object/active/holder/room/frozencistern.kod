% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FrozenCistern is Room

constants:

   include blakston.khd
   
   MAIN_CEILING_SECTOR = 1
   
   DOOR_SECTOR = 2
   
   NORTH_BARRIER_BORDER = 100
   NORTH_BARRIER_SECTOR = 101
   DEFAULT_NORTH_BARRIER_HEIGHT = 100
   
   EAST_BARRIER_BORDER = 110
   EAST_BARRIER_SECTOR = 111
   DEFAULT_EAST_BARRIER_HEIGHT = 150
   
   SOUTH_BARRIER_BORDER = 120
   SOUTH_BARRIER_SECTOR = 121
   DEFAULT_SOUTH_BARRIER_HEIGHT = 70

resources:
  
   room_name_FrozenCistern = "Frozen Cistern"
   room_FrozenCistern = frozencistern.roo
   FrozenCistern_music = bossfight.wav

   fire_sound_FrozenCistern = wind-strong-01.wav

classvars:

   vrName = room_name_FrozenCistern

   viTeleport_row = 64
   viTeleport_col = 18

   viTerrain_Type = TERRAIN_CITY | TERRAIN_SHOP

properties:

   prRoom = room_FrozenCistern
   piRoom_num = RID_FROZEN_CISTERN

   piBaseLight = LIGHT_NICE
   piOutside_factor = 3

   prMusic = FrozenCistern_music
   
   piNorthBarrierHeight = 100
   piEastBarrierHeight = 150
   piSouthBarrierHeight = 70

messages:

   Constructed()
   {
      %  each sound is [wave_file, row, col, cutoff radius, maximum volume]
      plLooping_sounds = [[ fire_sound_FrozenCistern, 15, 15, 10, 100 ]];

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;
  
      propagate;
   }

   SomethingTryGo(what = $,row = $,col = $)
   {
      if what <> $
         AND IsClass(what,&Player)
      {
         Send(self,@AttemptExit,#who=what,#iSection=Send(self,@GetSection,#who=what));
      }

      propagate;
   }
   
   AttemptExit(who=$,iSection=0)
   {
      if who <> $
         AND IsClass(who,&Player)
      {         
         switch(iSection)
         {
            case DOOR_SECTOR:
               Send(self,@ExitCistern,#who=who);
               break;
         }
      }
   
      return;
   }
   
   ExitCistern(who=$)
   {
      local oRoom;
      
      oRoom = Send(SYS,@FindRoomByNum,#num=RID_MAZE_BOSS_ROOM);
      if oRoom <> $
      {
         Send(oRoom,@Teleport,#what=who);
      }
      return;
   }

   CreateStandardObjects()
   {
      propagate;
   }
   
   LastUserLeft()
   {
      Send(self,@ResetBarriers);
      propagate;
   }
   
   ResetBarriers()
   {
      Send(self,@SetSector,#sector=NORTH_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=DEFAULT_NORTH_BARRIER_HEIGHT,#speed=0);
      Send(self,@SetSector,#sector=EAST_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=DEFAULT_EAST_BARRIER_HEIGHT,#speed=0);
      Send(self,@SetSector,#sector=SOUTH_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=DEFAULT_SOUTH_BARRIER_HEIGHT,#speed=0);
      
      Send(self,@SetSector,#sector=NORTH_BARRIER_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=300,#speed=0);
      Send(self,@SetSector,#sector=EAST_BARRIER_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=300,#speed=0);
      Send(self,@SetSector,#sector=SOUTH_BARRIER_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=300,#speed=0);
      Send(self,@SetSector,#sector=MAIN_CEILING_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=300,#speed=0);
      Send(self,@SetSector,#sector=DOOR_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=300,#speed=0);
      return;
   }
   
   AdjustHeight(new_height=600)
   {
      Send(self,@SetSector,#sector=MAIN_CEILING_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      Send(self,@SetSector,#sector=DOOR_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      
      Send(self,@SetSector,#sector=NORTH_BARRIER_BORDER,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      Send(self,@SetSector,#sector=NORTH_BARRIER_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      
      Send(self,@SetSector,#sector=EAST_BARRIER_BORDER,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      Send(self,@SetSector,#sector=EAST_BARRIER_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      
      Send(self,@SetSector,#sector=SOUTH_BARRIER_BORDER,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      Send(self,@SetSector,#sector=SOUTH_BARRIER_SECTOR,#animation=ANIMATE_CEILING_LIFT,#height=new_height,#speed=100);
      return;
   }

   SomethingExploded(what=$)
   {
      local iSection;
      
      if what = $
         OR (piNorthBarrierHeight = 0
            AND piEastBarrierHeight = 0
            AND piSouthBarrierHeight = 0)
      {
         return;
      }

      iSection = Send(self,@GetSection,#who=what);
      
      Switch(iSection)
      {
         case NORTH_BARRIER_BORDER:
            if piNorthBarrierHeight > 0
            {
               piNorthBarrierHeight--;
               Send(self,@SetSector,#sector=NORTH_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=piNorthBarrierHeight,#speed=0);
            }
            break;
         case NORTH_BARRIER_SECTOR:
            if piNorthBarrierHeight > 0
            {
               piNorthBarrierHeight--;
               Send(self,@SetSector,#sector=NORTH_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=piNorthBarrierHeight,#speed=0);
            }
            break;
         case EAST_BARRIER_BORDER:
            if piEastBarrierHeight > 0
            {
               piEastBarrierHeight--;
               Send(self,@SetSector,#sector=EAST_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=piEastBarrierHeight,#speed=0);
            }
            break;
         case EAST_BARRIER_SECTOR:
            if piEastBarrierHeight > 0
            {
               piEastBarrierHeight--;
               Send(self,@SetSector,#sector=EAST_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=piEastBarrierHeight,#speed=0);
            }
         case SOUTH_BARRIER_BORDER:
            if piSouthBarrierHeight > 0
            {
               piSouthBarrierHeight--;
               Send(self,@SetSector,#sector=SOUTH_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=piSouthBarrierHeight,#speed=0);
            }
            break;
         case SOUTH_BARRIER_SECTOR:
            if piSouthBarrierHeight > 0
            {
               piSouthBarrierHeight--;
               Send(self,@SetSector,#sector=SOUTH_BARRIER_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=piSouthBarrierHeight,#speed=0);
            }
            break;
      }
      
      return;
   }

   GetSection(who=$,iRow=$,iCol=$,iFineRow=$,iFineCol=$,bCheckForPool=FALSE)
   {
      local iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID;
      
      if iRow = $
         OR iCol = $
         OR iFineRow = $
         OR iFineCol = $
      {
         if who <> $
         {
            iRow = Send(who,@GetRow);
            iCol = Send(who,@GetCol);
            iFineRow = Send(who,@GetFineRow);
            iFineCol = Send(who,@GetFineCol);
         }
         else
         {
            return 0;
         }
         if iRow = $
            OR iCol = $
            OR iFineRow = $
            OR iFineCol = $
         {
            % Who gave us some nil coords.
            return 0;
         }
      }

      iQflags = LIQ_GET_SECTORINFO;

      if GetLocationInfoBSP(
                      prmRoom, iQflags, iRow, iCol, iFineRow, iFineCol,
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
      {
         return iServerID;
      }

      return 0;
   }

   RecalcBackgroundSkyGraphic(iSkyBox=0)
   {
      prBackground = background_chaos_night;

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
