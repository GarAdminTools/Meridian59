% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
PrismOfDeath is Room

constants:

   include blakston.khd

   INITIAL_PLATFORM = 5000
   
   PILLARS_SECTOR = 5005

resources:

   room_prismofdeath = prismofdeath.roo
   room_name_prismofdeath = "Prism of Death"

   prismofdeath_music = desertafterlife.mp3

   unholy_quake_sound = earthquake03.wav
   
   unholy_players_gathering_msg = \
      "This place isn't filled with death. This place ~Iis~I death. "
      "Only a small bubble of neutrality protrudes into this plane; "
      "there is nothing between you and the primal force of unmaking but a thin membrane of wavering realness."
   
   unholy_players_have_gathered_msg = \
      "Your incursion of livable reality expands further into the elemental plane of negative energy."

   unholy_killed_first_boss_msg = \
      "~BAs %s lands a lethal blow on %s%s, the negative energies around you react violently! "
      "You delve slightly deeper into this exotic plane, and your pocket of "
      "livable reality expands. Your enemy reforms, stronger than before!"
   unholy_killed_second_boss_msg = \
      "~BAs %s deals a fatal blow, %s%s falls. The cold and shadows tremble "
      "around you. Your incursion grows deeper, and pillars of red anti-life rise. Your enemy reforms, "
      "now empowered by pure void!"
   unholy_killed_third_boss_msg = \
      "~B%s has slain %s%s! Negative energy spirals around "
      "you. The imbalance caused by the slaying of one of its incarnations has "
      "brought catastrophic damage, and the elemental essence of oblivion convulses and "
      "retracts. You concentrate your thoughts on returning to the Eternal Wastes before the Biskalani afterlife becomes "
      "unreachable..."

   prism_of_death_grasping_darkness = \
      "~BTendrils of pure negative energy jump out "
      "toward your light sources, annihilating them!"

classvars:

   vrName = room_name_prismofdeath

   viTeleport_row = 93
   viTeleport_col = 145

   viTerrain_type = TERRAIN_NECROPOLIS

   vbOverridePlayerLightLevel = TRUE
   viOverridePlayerLightLevel = 0

properties:

   prMusic = prismofdeath_music

   prRoom = room_prismofdeath
   piRoom_num = RID_PRISM_OF_DEATH

   piSpawnTime = 60000  % Shrinks by five seconds each iteration
   ptSpawnTimer = $
   
   ptPlayersGathering = $
   
   ptRaiseFirstAreaPlatforms = $
   ptSecondAreaScrollTimer = $
   ptThirdAreaScrollTimer = $
   
   ptVictoryTimer = $

   piOverridesDeathFunction = TRUE

   piBaseLight = LIGHT_MIN

messages:

   Constructed()
   {
     % plLooping_sounds = Cons([ room_lava_sound, 107, 151, 300, 100 ],
     %                            plLooping_sounds);
      propagate;
   }

   StartThreat(cClasses=$,report=TRUE)
   {
      local i;

      % Don't start same threat if one already exists.
      % Don't start threats with no players present.
      if pbUser_in_room
         AND cClasses <> $
      {
         foreach i in cClasses
         {
            if NOT Send(self,@HasObjectAttribute,#cClass=i)
            {
               Create(i,#host_object=self,#iDuration=$,#report=report);
            }
         }
      }

      return;
   }

   EndThreat(cClass=&ShockStorm)
   {
      if Send(self,@HasObjectAttribute,#cClass=cClass)
      {
         Send(Send(self,@GetObjectAttribute,#cClass=cClass),@Delete);
      }
      return;
   }
   
   EndAllThreats()
   {
      local i;
      
      foreach i in plObject_attributes
      {
         if IsClass(i,&RoomThreat)
            OR IsClass(i,&RoomStorm)
         {
            Send(i,@Delete);
         }
      }

      return;
   }

   FirstUserEntered()
   {
      local i;

      Post(self,@StartThreat,#cClasses=[&DeathPrismThreat,&PhaseThreat]);
      
      if ptPlayersGathering = $
      {
         ptPlayersGathering = CreateTimer(self,@PlayersHaveGathered,60000);
      }
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Post(First(i),@MsgSendUser,#message_rsc=unholy_players_gathering_msg);
         }
      }
      
      propagate;
   }

   PlayersHaveGathered()
   {
      local i;
      ptPlayersGathering = $;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Send(First(i),@MsgSendUser,#message_rsc=unholy_players_have_gathered_msg);
         }
      }

      Post(self,@LowerInitialPlatform);
      return;
   }

   LastUserLeft()
   {
      local i;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Monster)
         {
            Send(First(i),@Delete);
         }
      }
      
      foreach i in Send(self,@GetHolderPassive)
      {
         if IsClass(First(i),&DynamicLight)
         {
            Send(First(i),@Delete);
         }
      }

      Post(self,@EndAllThreats);
      Post(self,@ResetAll);
      propagate;
   }
   
   QuakeSoundToPlayers()
   {
      local i;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Send(First(i),@WaveSendUser,#wave_rsc=unholy_quake_sound);
         }
      }
      return;
   }

   LowerInitialPlatform()
   {
      Send(self,@QuakeSoundToPlayers);
      Send(self,@PlaceFirstLights);
      Post(self,@SetSector,#sector=INITIAL_PLATFORM,#animation=ANIMATE_FLOOR_LIFT,#height=1010,#speed=100);

      ptRaiseFirstAreaPlatforms = CreateTimer(self,@RaiseFirstAreaPlatforms,16000);
      return;
   }

   RaiseFirstAreaPlatforms()
   {
      ptRaiseFirstAreaPlatforms = $;

      Send(self,@QuakeSoundToPlayers);
      Send(self,@Rumble,#duration=4000);

      %Post(self,@SetSector,#sector=INITIAL_PLATFORM,#animation=ANIMATE_CEILING_LIFT,#height=1350,#speed=0);
   
      Send(self,@PlaceFirstBoss);

      return;
   }
   
   PlaceFirstBoss()
   {
      ptSpawnTimer = CreateTimer(self,@SpawnThreats,piSpawnTime);

      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=87,#new_col=139,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=99,#new_col=151,#fine_row=0,#fine_col=0);
      
      Send(self,@NewHold,#what=Create(&XeoBossUnholy),#new_row=103,#new_col=135,#fine_row=0,#fine_col=0);
      return;
   }
   
   PlaceSecondBoss()
   {
      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=87,#new_col=151,#fine_row=28,#fine_col=22);
      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=99,#new_col=139,#fine_row=56,#fine_col=44);
      
      Send(self,@NewHold,#what=Create(&XeoBossUnholy2),#new_row=93,#new_col=157,#fine_row=0,#fine_col=0);
      return;
   }
   
   PlaceThirdBoss()
   {
      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=87,#new_col=139,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=99,#new_col=151,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=87,#new_col=151,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DarkAngel,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost)),#new_row=99,#new_col=139,#fine_row=0,#fine_col=0);
      
      Send(self,@NewHold,#what=Create(&XeoBossUnholy3),#new_row=93,#new_col=145,#fine_row=0,#fine_col=0);
      return;
   }

   SpawnThreats()
   {
      local oXeo, i, n, lPlayers, iPlayerCount;

      ptSpawnTimer = $;
      
      
      lPlayers = $;
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            lPlayers = Cons(First(i),lPlayers);
         }
      }
      
      if lPlayers <> $
      {
         iPlayerCount = Length(lPlayers);
         
         while iPlayerCount > 0
         {
            oXeo = Create(&XeoUnholy,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetUnholyBoost));
            Send(self,@NewHold,#what=oXeo,#new_row=Random(1,Send(self,@GetRoomRows)-1),
                                          #new_col=Random(1,Send(self,@GetRoomCols)-1));
            Send(oXeo,@TargetSwitch,#what=Nth(lPlayers,iPlayerCount),#iHatred=100);
            Send(oXeo,@EnterStateChase,#target=Nth(lPlayers,iPlayerCount),#actnow=True);

            --iPlayerCount;
         }
      }
      lPlayers = $;

      piSpawnTime = bound(piSpawnTime - 5000,10000,$);
      ptSpawnTimer = CreateTimer(self,@SpawnThreats,piSpawnTime);
      return;
   }

   FirstBossKilled()
   {
      Send(self,@PlaceSecondLights);

      
      Send(self,@QuakeSoundToPlayers);
      Send(self,@Rumble,#duration=8000);
      ptSecondAreaScrollTimer = CreateTimer(self,@StartSecondAreaScroll,11000);
      
      % Refresh threat spawn.
      piSpawnTime = 60000;
      return;
   }

   RaiseSecondAreaPlatforms()
   {
      Send(self,@QuakeSoundToPlayers);
      Send(self,@Rumble,#duration=4000);

      Send(self,@PlaceSecondBoss);

      return;
   }

   StartSecondAreaScroll()
   {
      ptSecondAreaScrollTimer = $;
      Post(self,@RaiseSecondAreaPlatforms);
      return;
   }

   SecondBossKilled()
   {
      Send(self,@QuakeSoundToPlayers);
      Send(self,@Rumble,#duration=4000);

      Send(self,@PlaceThirdLights);
      
      ptThirdAreaScrollTimer = CreateTimer(self,@StartThirdAreaScroll,11000);
      
      % Refresh threat spawn.
      piSpawnTime = 60000;
      return;
   }

   StartThirdAreaScroll()
   {
      ptThirdAreaScrollTimer = $;
   
      Send(self,@RaiseThirdAreaPlatforms);

      return;
   }

   RaiseThirdAreaPlatforms()
   {
      Send(self,@QuakeSoundToPlayers);
      Send(self,@Rumble,#duration=4000);
   
      Send(self,@PlaceThirdBoss);

      return;
   }

   ThirdBossKilled()
   {
      local i;

      Send(self,@QuakeSoundToPlayers);
      Send(self,@Rumble,#duration=20000);
      Send(self,@PlaceFinalLights);
      
      ptVictoryTimer = CreateTimer(self,@ClosePrismOfDeath,20000);
      
      % Refresh threat spawn.
      piSpawnTime = 60000;
      if ptSpawnTimer <> $
      {
         DeleteTimer(ptSpawnTimer);
         ptSpawnTimer = $;
      }
      
      Send(Send(SYS,@FindRoomByNum,#num=RID_MAZE_EXIT_ROOM),@OpenUnholyWall);

      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Monster)
         {
            Send(First(i),@Killed);
         }
         
         if IsClass(First(i),&Player)
         {
            Send(First(i),@DefeatedPrismPassiveQuest,#iElement=ATCK_SPELL_UNHOLY);
         }
      }
      return;
   }

   Delete()
   {
      local i, oThing, oPlayer;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&LogoffGhost)
         {
            Send(Send(First(i),@GetGhostedPlayer),@AdminGoToDesertShore2WhileOffline);
            Send(Send(SYS,@FindRoomByNum,#num=RID_DESERTSHORE2),@Teleport,#what=First(i));
         }
      }

      foreach i in Send(self,@GetHolderPassive)
      {
         oThing = Send(self,@HolderExtractObject,#data=i);
         if IsClass(oThing,&DeadBody)
            AND NOT Send(oThing,@GetPbMob)
         {
            % is a player corpse! Let's move it.
            Send(Send(SYS,@FindRoomByNum,#num=RID_DESERTDUNES),@Teleport,#what=oThing);
         }
      }

      if ptPlayersGathering <> $
      {
         DeleteTimer(ptPlayersGathering);
         ptPlayersGathering = $;
      }

      if ptRaiseFirstAreaPlatforms <> $
      {
         DeleteTimer(ptRaiseFirstAreaPlatforms);
         ptRaiseFirstAreaPlatforms = $;
      }

      if ptSecondAreaScrollTimer <> $
      {
         DeleteTimer(ptSecondAreaScrollTimer);
         ptSecondAreaScrollTimer = $;
      }

      if ptThirdAreaScrollTimer <> $
      {
         DeleteTimer(ptThirdAreaScrollTimer);
         ptThirdAreaScrollTimer = $;
      }
      if ptSpawnTimer <> $
      {
         DeleteTimer(ptSpawnTimer);
         ptSpawnTimer = $;
      }
      if ptVictoryTimer <> $
      {
         DeleteTimer(ptVictoryTimer);
         ptVictoryTimer = $;
      }
      propagate;
   }

   PlaceFirstLights()
   {
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=93,#new_col=145,#fine_row=0,#fine_col=0);
           
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=87,#new_col=139,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=87,#new_col=151,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=99,#new_col=139,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=99,#new_col=151,#fine_row=0,#fine_col=0);
           
           
%      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
%           #iIntensity=255),#new_row=79,#new_col=269,#fine_row=0,#fine_col=0);
           
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=73,#new_col=263,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=73,#new_col=275,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=85,#new_col=263,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=85,#new_col=275,#fine_row=0,#fine_col=0);
           
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=155,#new_col=47,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=155,#new_col=59,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=167,#new_col=47,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=167,#new_col=59,#fine_row=0,#fine_col=0);
           
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=157,#new_col=207,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=157,#new_col=219,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=169,#new_col=207,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=169,#new_col=219,#fine_row=0,#fine_col=0);
           
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=23,#new_col=85,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=23,#new_col=97,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=35,#new_col=85,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=35,#new_col=97,#fine_row=0,#fine_col=0);
           
      return;
   }
   
   PlaceSecondLights()
   {
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=45,#new_col=189,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=41,#new_col=203,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=53,#new_col=201,#fine_row=0,#fine_col=0);

      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=163,#new_col=127,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=169,#new_col=137,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=159,#new_col=143,#fine_row=0,#fine_col=0);

      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=77,#new_col=61,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BGREEN,
           #iIntensity=255),#new_row=83,#new_col=51,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
           #iIntensity=255),#new_row=89,#new_col=63,#fine_row=0,#fine_col=0);
      return;
   }

   PlaceThirdLights()
   {
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=173,#new_col=83,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=131,#new_col=67,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=111,#new_col=81,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=69,#new_col=93,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=51,#new_col=121,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=51,#new_col=159,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=137,#new_col=161,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=85,#new_col=193,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=119,#new_col=217,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,
           #iIntensity=255),#new_row=61,#new_col=233,#fine_row=0,#fine_col=0);

      Post(self,@SetSector,#sector=PILLARS_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=1350,#speed=30);
      
      return;
   }

   PlaceFinalLights()
   {
      local iNumLights;
      
      iNumLights = 160;
      
      while iNumLights > 0
      {
         Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BPURPLE,
              #iIntensity=255),#new_row=Random(21,173),#new_col=Random(41,323),#fine_row=Random(0,63),#fine_col=Random(0,63));
         --iNumLights;
      }

      return;
   }

   SomethingKilled(what=$,victim=$)
   {
      local i;

      if victim <> $
         AND IsClass(victim,&Monster)
      {
         if IsClass(victim,&XeoBossUnholy)
         {
            foreach i in Send(self,@GetHolderActive)
            {
               if IsClass(First(i),&Player)
               {
                  Send(First(i),@MsgSendUser,#message_rsc=unholy_killed_first_boss_msg,
                     #parm1=Send(what,@GetName),#parm2=Send(victim,@GetDef),#parm3=Send(victim,@GetName));
               }
            }
            Send(self,@FirstBossKilled);
            propagate;
         }
         if IsClass(victim,&XeoBossUnholy2)
         {
            foreach i in Send(self,@GetHolderActive)
            {
               if IsClass(First(i),&Player)
               {
                  Send(First(i),@MsgSendUser,#message_rsc=unholy_killed_second_boss_msg,
                     #parm1=Send(what,@GetName),#parm2=Send(victim,@GetDef),#parm3=Send(victim,@GetName));
               }
            }
            Send(self,@SecondBossKilled);
            propagate;
         }
         if IsClass(victim,&XeoBossUnholy3)
         {
            foreach i in Send(self,@GetHolderActive)
            {
               if IsClass(First(i),&Player)
               {
                  Send(First(i),@MsgSendUser,#message_rsc=unholy_killed_third_boss_msg,
                     #parm1=Send(what,@GetName),#parm2=Send(victim,@GetDef),#parm3=Send(victim,@GetName));
               }
            }
            Send(self,@ThirdBossKilled);
            propagate;
         }
      }

      propagate;
   }

   ClosePrismOfDeath()
   {
      local i, oAfterlifeDunes4E;
      
      ptVictoryTimer = $;

      oAfterlifeDunes4E = Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES4E);
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Send(oAfterlifeDunes4E,@Teleport,#what=First(i));
         }
      }
      
      Post(oAfterlifeDunes4E,@PrismOfDeathDefeated);
      Post(self,@ResetAll);
      
      return;
   }

   SpecialPhaseConditionsSatisfied()
   {
      return TRUE;
   }
   
   ResetAll()
   {
      local iCount;
      
      piSpawnTime = 60000;

      Send(self,@SetSector,#sector=INITIAL_PLATFORM,#animation=ANIMATE_FLOOR_LIFT,#height=2200,#speed=0);
      Send(self,@SetSector,#sector=PILLARS_SECTOR,#animation=ANIMATE_FLOOR_LIFT,#height=1000,#speed=0);

      if ptPlayersGathering <> $
      {
         DeleteTimer(ptPlayersGathering);
         ptPlayersGathering = $;
      }

      if ptRaiseFirstAreaPlatforms <> $
      {
         DeleteTimer(ptRaiseFirstAreaPlatforms);
         ptRaiseFirstAreaPlatforms = $;
      }

      if ptSecondAreaScrollTimer <> $
      {
         DeleteTimer(ptSecondAreaScrollTimer);
         ptSecondAreaScrollTimer = $;
      }

      if ptThirdAreaScrollTimer <> $
      {
         DeleteTimer(ptThirdAreaScrollTimer);
         ptThirdAreaScrollTimer = $;
      }
      if ptSpawnTimer <> $
      {
         DeleteTimer(ptSpawnTimer);
         ptSpawnTimer = $;
      }
      if ptVictoryTimer <> $
      {
         DeleteTimer(ptVictoryTimer);
         ptVictoryTimer = $;
      }

      return;
   }

   NewHold(what = $,new_row=$,new_col=$)
   "Prevents anyone from logging on into a special zone"
   {
      % If players log on, send them elsewhere.
      if IsClass(what,&User)
      {
         if Send(what,@GetOwner) = $
         {
            Post(Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES),@Teleport,#what=what);
         }
         else
         {
            if ptPlayersGathering <> $
            {
               Post(what,@MsgSendUser,#message_rsc=unholy_players_gathering_msg);
            }
         }
      }

      propagate;
   }
   
   OverrideDeathFunction(who=$,what=$,stroke_obj=$)
   {
      local oAfterlife, bDrop, oRoom, iRow, iCol, iFine_Row, iFine_Col, iAngle, iRoom,
            oBody, lReagentBagContents, lInventoryContents, lItems, i, oSoldierShield;

      Send(who,@ClearStance);

      % Stop any rescue attempts that were going on.
      Send(who,@CancelRescue);
      Send(who,@RemoveAllEnchantments,#report=FALSE);
      
      Send(who,@SetDeathTime,#iTime=GetTime());

      % Grab the location of the deceased.
      % Might need to grab the old location if logged off.

      if Send(who,@IsLoggedOn)
      {
         oRoom = Send(who,@GetOwner);
         iRow = Send(who,@GetRow);
         iCol = Send(who,@GetCol);
         iFine_Row = Send(who,@GetFineRow);
         iFine_Col = Send(who,@GetFineCol);
         iAngle = Send(who,@GetAngle);
         iRoom = Send(Send(who,@GetOwner),@GetRoomNum);
      }
      else
      {
         iRoom = Send(who,@GetSaveRoom);
         oRoom = Send(SYS,@FindRoomByNum,#num=iRoom);
         iRow = Send(who,@GetSaveRow);
         iCol = Send(who,@GetSaveCol);
         iFine_Row = Send(who,@GetSaveFineRow);
         iFine_Col = Send(who,@GetSaveFineCol);
         iAngle = Send(who,@GetSaveAngle);
      }

      % Record-keeping. Keep this before the token check,
      % so we can give proper message.
      Send(SYS,@UserKilled,#what=who,#killer=what,#oRoom=oRoom,#stroke_obj=stroke_obj);
      Send(Send(SYS,@GetStatistics),@PlayerDiedCounter);

      % Create the corpse.
      if what <> $
         AND IsClass(what,&User)
      {
         oBody = Send(who,@CreateCorpse,#oPlayerKiller=what);
      }
      else
      {
         oBody = Send(who,@CreateCorpse);
      }
      Send(who,@SetCorpse,#corpse=oBody);

      Send(oRoom,@NewHold,#what=oBody,#new_row=iRow,#new_col=iCol,
            #fine_row=iFine_Row,#fine_col=iFine_Col,#new_angle=iAngle);

      bDrop = TRUE;
      % Start losing stuff if applicable.
      if bDrop
      {
         lReagentBagContents = Send(who,@GetReagentBagContents);
         if lReagentBagContents <> $
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive),lReagentBagContents];
         }
         else
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive)];
         }

         foreach lItems in lInventoryContents
         {
            foreach i in lItems
            {
               % Let the item know we died, in case it does something special.
               Send(i,@OwnerKilled);

               if Send(i,@DropOnDeath)
               {
                  if Send(oRoom,@ReqNewHold,#what=i,#new_row=iRow,#new_col=iCol)
                  {
                     Send(oBody,@NewHold,#what=i);
                  }
               }
            }
         }

         Post(who,@EvaluatePKStatus);

         % Let SoldierShields know we died. It handles itself as appropriate.
         oSoldierShield = Send(who,@FindUsing,#what=&SoldierShield);
         if oSoldierShield <> $
         {
            Send(oSoldierShield,@OwnerDied,#what=what);
         }
      }

      % Give out your dying scream.
      if Send(who,@GetGender) = GENDER_FEMALE
      {
         i = Send(who,@GetFemaleDeathWav);
      }
      else
      {
         i = Send(who,@GetMaleDeathWav);
      }

      Send(oRoom,@SomethingWaveRoom,#what=oBody,#wave_rsc=i);
      if Send(who,@IsLoggedOn)
      {
         Send(who,@WaveSendUser,#what=who,#wave_rsc=i);
      }

      Send(who,@SetHealth,#amount=1);

      Send(who,@NewHealth);
      Send(who,@NewMana);
      Send(who,@NewVigor);
      
      Send(who,@SetDeathCost,#DeathCost=Send(Send(SYS,@GetDesertRoomMaintenance),@GetDeathCost),#bOverride=TRUE);
      Send(who,@ApplyDeathPenalties);

      % Refresh the client with what's really going on.
      if Send(who,@IsLoggedOn)
      {
         Send(who,@ToCliStats,#group=1);
         Send(who,@ToCliStats,#group=2);
         Send(who,@ToCliStats,#group=3);
         Send(who,@ToCliStats,#group=4);

         % Wake up with red foggy hangover.
         Send(who,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=5000);
      }
      
      oAfterlife = Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES);
      Send(oAfterlife,@Teleport,#what=who);
      return;
   }

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      if IsClass(oSpell,&DeathRift)
         OR IsClass(oSpell,&PortalOfLife)
      {
         return FALSE;
      }

      propagate;
   }

   OverridesDeathAllowPhasing()
   {
      return TRUE;
   }

   GetRegion()
   {
      return RID_DESERT;
   }

   NewHoldObject(what = $,new_pos = $)
   {
      if IsClass(what,&Player)
      {
         Post(what,@RecalcLight);
      }
      propagate;
   }

   LeaveHold(what=$)
   {
      if IsClass(what,&Player)
      {
         Post(what,@RecalcLight);
      }
      propagate;
   }

   SomethingMoved(what=$)
   {
      local i;

      if IsClass(what,&User)
      {
         foreach i in plObject_attributes
         {
            if IsClass(i,&RoomThreat)
            {
               Send(i,@SomethingMoved,#what=what);
            }
         }
      }
      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

