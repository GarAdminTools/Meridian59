% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GuildHall1 is GuildHall

% Mercenary Alley is very basic in terms of upgrades.

constants:

   OUT1 = 1
   OUT2 = 2

   ENTRANCE = 3
   
   SUPER_SECRET_DOOR = 9

   LIFT_DELAY = 10000

   include blakston.khd

resources:

   include guildh1.lkod

   room_name_guildh1 = "Mercenary Alley"
   room_guildh1 = guildh1.roo
   
   ghall1_portal_desc = "You can vaguely see the goings on outside Mercenary Alley."

classvars:

   vrName = room_name_guildh1

   viTeleport_row = 18
   viTeleport_col = 14

   viInner_teleport_row = 6
   viInner_teleport_col = 14

   viNews_row = 13
   viNews_col = 3
   viNews_finerow = 32
   viNews_finecol = 0

   viFoyer_north = 16
   viFoyer_south = 21
   viFoyer_west = 11
   viFoyer_east = 19

   viLever_row = 7
   viLever_col = 9
   viLever_fine_row = 32
   viLever_fine_col = 32

   viQuality = 4

   viSeconds_til_close = 16
   
   viPortalOneRow = 1
   viPortalOneCol = 3
   viPortalOneFineRow = 52
   viPortalOneFineCol = 26
   viPortalOneDestRID = RID_CORNOTH
   viPortalOneDestRow = 38
   viPortalOneDestCol = 26
   viPortalOneDestFineRow = 52
   viPortalOneDestFineCol = 19
   viPortalOneDestAngle = ANGLE_EAST
   vsPortalOneDesc = ghall1_portal_desc
   
   viReliquaryRow = 5
   viReliquaryCol = 15
   viReliquaryFineRow = 48
   viReliquaryFineCol = 58
   
   viShardFusingDeviceRow = 17
   viShardFusingDeviceCol = 2
   viShardFusingDeviceFineRow = 48
   viShardFusingDeviceFineCol = 47
   viShardFusingDeviceRate = 8
   
   viShardShatteringDeviceRow = 16
   viShardShatteringDeviceCol = 2
   viShardShatteringDeviceFineRow = 31
   viShardShatteringDeviceFineCol = 47
   viShardShatteringDeviceRate = 2

properties:

   prRoom = room_guildh1
   piRoom_num = RID_GUILDH1

   piBaseLight = LIGHT_NICE

   ptSecret = $
   ptEntrance = $

messages:

   Constructor()
   {
      plGuild_doors = [ [18,11] ];

      % This is a box containing the guild door, used
      % for removing players from it when it closes.
      plEntrance = [ 1812, 1900, 1087, 1112 ];

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      % TO TOWN
      plExits = Cons([ 21, 13, RID_CORNOTH, 38, 31, ROTATE_90 ],plExits);

      propagate;
   }

   Delete()
   {
      if ptSecret <> $
      {
         DeleteTimer(ptSecret);
         ptSecret = $;
      }

      if ptEntrance <> $
      {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }

      propagate;
   }

   SomethingTryGo(what=$, row=$,  col = $)
   {
      if row = 18 AND col = 10
      {
         Send(self,@OpenEntrancedoor);

         return TRUE;
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=ENTRANCE,#animation=ANIMATE_FLOOR_LIFT,
              #height=128,#speed=50);
         ptEntrance = CreateTimer(self,@CloseEntranceDoor,LIFT_DELAY);
         Send(self,@OpenEntranceDoorSound);
      }

      return;
   }

   CloseEntranceDoor()
   {
      Send(self,@SetSector,#sector=ENTRANCE,#animation=ANIMATE_FLOOR_LIFT,
            #height=200,#speed=50);
      Send(self,@CloseEntranceDoorSound);

      % We now propagate this to handle removing players from the door,
      % and so the door can still be entered while it is closing.
      propagate;
   }

   OpenSecretDoor()
   {
      if ptSecret = $
      {
         Send(self,@SetSector,#sector=OUT1,#animation=ANIMATE_FLOOR_LIFT,
              #height=16,#speed=16);
         Send(self,@SetSector,#sector=OUT2,#animation=ANIMATE_FLOOR_LIFT,
              #height=16,#speed=16);
         ptSecret = CreateTimer(self,@CloseSecretDoor,LIFT_DELAY);
         Send(self,@OpenSecretDoorSound);
         
         Send(self,@SetSector,#sector=SUPER_SECRET_DOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=76,#speed=16);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptSecret = $;
      Send(self,@SetSector,#sector=OUT1,#animation=ANIMATE_FLOOR_LIFT,
           #height=80,#speed=16);
      Send(self,@SetSector,#sector=OUT2,#animation=ANIMATE_FLOOR_LIFT,
           #height=80,#speed=16);
      Send(self,@CloseSecretDoorSound);
         
      Send(self,@SetSector,#sector=SUPER_SECRET_DOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=0,#speed=16);

      return;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&Table),
           #new_row=17,#new_col=13);
      Send(self,@NewHold,#what=Create(&Table),
           #new_row=7,#new_col=12);

      Send(self,@NewHold,#what=Create(&Brazier),
           #new_row=11,#new_col=9,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),
           #new_row=11,#new_col=12,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),
           #new_row=12,#new_col=3,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),
           #new_row=15,#new_col=3,#fine_row=0,#fine_col=0);

      Send(self,@NewHold,#what=Create(&Chest),
           #new_row=2,#new_col=12,#fine_col=10,#new_angle=ANGLE_SOUTH);

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
