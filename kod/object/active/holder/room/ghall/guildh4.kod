% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GuildHall4 is GuildHall

% Wryn's Keep is the largest hall in the game. It has the highest number
%    maximum of all purchasable upgrades, including portals to:
%
%    * All major cities (6, including Ko'catan)
%    * Lupogg King lair (rebel lore)
%    * Thrashers
%    * Cess castle mocker's chamber (for desert access)
%

constants:

   DOOR1 = 1
   WESTDOOR = 4
   EASTDOOR = 5
   MASTERDOOR = 6
   ASSISTDOOR = 7
   STORAGEDOOR = 8

   RESET_TIME = 10000
   NEXT_TIME = 1000
   RESET_TIME_LONG = 20000

   % Values for light flickering
   FLICKER_LOW = 80
   FLICKER_HIGH = 220
   FLICKER_NONE = 124

   include blakston.khd

resources:

   include guildh4.lkod

   room_name_guildh4 = "The Wryn's Keep"
   room_guildh4 = guildh4.roo

   guildhall4_sound = down2.wav

   news_guild4_name = "news"
   news_guild4_desc = "This is the guild newsgroup."

classvars:

   vrName = room_name_guildh4

   viNews_row = 36
   viNews_col = 10
   viNews_finerow = 0
   viNews_finecol = 36

   viTeleport_row = 50
   viTeleport_col = 27

   viFoyer_north = 44
   viFoyer_south = 52
   viFoyer_east = 29
   viFoyer_west = 21

   viLever_row = 1
   viLever_col = 25
   viLever_fine_row = 32
   viLever_fine_col =  0

   viInner_teleport_row = 18
   viInner_teleport_col = 16

   viQuality = 10
   viTerrain_type = TERRAIN_CITY | TERRAIN_GUILDHALL | TERRAIN_CAVES
   viSeconds_til_close = 18
   
   viPortalOneRow = 38
   viPortalOneCol = 30
   viPortalOneFineRow = 42
   viPortalOneFineCol = 43
   viPortalOneAngle = ANGLE_SOUTH_EAST
   viPortalOneDestRID = 0
   viPortalOneDestRow = 0
   viPortalOneDestCol = 0
   viPortalOneDestFineRow = 0
   viPortalOneDestFineCol = 0
   viPortalOneDestAngle = 0
   vsPortalOneDesc = $
   
   viPortalTwoRow = 38
   viPortalTwoCol = 36
   viPortalTwoFineRow = 42
   viPortalTwoFineCol = 21
   viPortalTwoAngle = ANGLE_SOUTH_WEST
   viPortalTwoDestRID = 0
   viPortalTwoDestRow = 0
   viPortalTwoDestCol = 0
   viPortalTwoDestFineRow = 0
   viPortalTwoDestFineCol = 0
   viPortalTwoDestAngle = 0
   vsPortalTwoDesc = $
   
   viPortalThreeRow = 45
   viPortalThreeCol = 36
   viPortalThreeFineRow = 53
   viPortalThreeFineCol = 21
   viPortalThreeAngle = ANGLE_NORTH_WEST
   viPortalThreeDestRID = 0
   viPortalThreeDestRow = 0
   viPortalThreeDestCol = 0
   viPortalThreeDestFineRow = 0
   viPortalThreeDestFineCol = 0
   viPortalThreeDestAngle = 0
   vsPortalThreeDesc = $
   
   viPortalFourRow = 45
   viPortalFourCol = 30
   viPortalFourFineRow = 53
   viPortalFourFineCol = 43
   viPortalFourAngle = ANGLE_NORTH_EAST
   viPortalFourDestRID = 0
   viPortalFourDestRow = 0
   viPortalFourDestCol = 0
   viPortalFourDestFineRow = 0
   viPortalFourDestFineCol = 0
   viPortalFourDestAngle = 0
   vsPortalFourDesc = $
   
   viPortalFiveRow = 49
   viPortalFiveCol = 33
   viPortalFiveFineRow = 5
   viPortalFiveFineCol = 30
   viPortalFiveAngle = ANGLE_NORTH
   viPortalFiveDestRID = 0
   viPortalFiveDestRow = 0
   viPortalFiveDestCol = 0
   viPortalFiveDestFineRow = 0
   viPortalFiveDestFineCol = 0
   viPortalFiveDestAngle = 0
   vsPortalFiveDesc = $
   
   viPortalSixRow = 47
   viPortalSixCol = 35
   viPortalSixFineRow = 61
   viPortalSixFineCol = 15
   viPortalSixAngle = ANGLE_WEST
   viPortalSixDestRID = 0
   viPortalSixDestRow = 0
   viPortalSixDestCol = 0
   viPortalSixDestFineRow = 0
   viPortalSixDestFineCol = 0
   viPortalSixDestAngle = 0
   vsPortalSixDesc = $
   
   viReliquaryOneRow = 24
   viReliquaryOneCol = 34
   viReliquaryOneFineRow = 32
   viReliquaryOneFineCol = 0
   
   viReliquaryTwoRow = 24
   viReliquaryTwoCol = 36
   viReliquaryTwoFineRow = 32
   viReliquaryTwoFineCol = 62
   
   viReliquaryThreeRow = 17
   viReliquaryThreeCol = 38
   viReliquaryThreeFineRow = 63
   viReliquaryThreeFineCol = 40
   
   viReliquaryFourRow = 17
   viReliquaryFourCol = 11
   viReliquaryFourFineRow = 63
   viReliquaryFourFineCol = 17
   
   viReliquaryFiveRow = 21
   viReliquaryFiveCol = 11
   viReliquaryFiveFineRow = 1
   viReliquaryFiveFineCol = 47
   
   viReliquarySixRow = 22
   viReliquarySixCol = 11
   viReliquarySixFineRow = 31
   viReliquarySixFineCol = 46
   
   % Fusing device rates go from 8 (worst) to 4 (best) 
   viShardFusingDeviceRow = 32
   viShardFusingDeviceCol = 38
   viShardFusingDeviceFineRow = 40
   viShardFusingDeviceFineCol = 63
   viShardFusingDeviceRate = 4
   
   % Shattering device rates go from 2 (worst) to 4 (best) 
   viShardShatteringDeviceRow = 33
   viShardShatteringDeviceCol = 40
   viShardShatteringDeviceFineRow = 31
   viShardShatteringDeviceFineCol = 14
   viShardShatteringDeviceRate = 4
   
   viFociOneRow = 32
   viFociOneCol = 13
   viFociOneFineRow = 58
   viFociOneFineCol = 1
   viFociOnePower = 198
   viFociOneRange = 7
   viFociOneSpellNum = SID_INVIGORATE
   
   viFociTwoRow = 32
   viFociTwoCol = 13
   viFociTwoFineRow = 58
   viFociTwoFineCol = 1
   viFociTwoPower = 198
   viFociTwoRange = 7
   viFociTwoSpellNum = SID_RESTORATE
   
   viFociThreeRow = 32
   viFociThreeCol = 13
   viFociThreeFineRow = 58
   viFociThreeFineCol = 1
   viFociThreePower = 198
   viFociThreeRange = 7
   viFociThreeSpellNum = SID_REJUVENATE

   viBartenderRow = 26
   viBartenderCol = 12
   viBartenderFineRow = 16
   viBartenderFineCol = 45
   viBartenderRate = 100
   
   viMarketRow = 36
   viMarketCol = 38
   viMarketFineRow = 27
   viMarketFineCol = 26
   viMarketRate = 100

properties:

   prRoom = room_guildh4
   piRoom_num = RID_GUILDH4

   piBaseLight = LIGHT_DARK
   piOutside_Factor = OUTDOORS_NONE

   piPos1 = 0
   piPos2 = 0

   ptReset = $
   ptEntrance = $
   ptStorage = $

   plGuild_doors
   ptLighting = $

messages:

   Constructor()
   "These mark the exterior door of the guild, which is only openable by "
   "a guild member or an allied guild member."
   {
      plGuild_doors = [[44,23], [44,24], [44,25], [44,26]];

      % This is a box containing the guild door, used
      % for removing players from it when it closes.
      plEntrance = [ 4375, 4425, 2350, 2650 ];

      propagate;
   }

   OpenSecretDoor()
   {
      local iSectorID;

      if piPos1 > 6
      {
         return;
      }

      piPos1 = piPos1 + 1;
      iSectorID = piPos1 + 7;

      Send(self,@SetSector,#sector=iSectorID,#animation=ANIMATE_FLOOR_LIFT,
           #height=132,#speed=16);
      Send(self,@OpenSecretDoorSound);

      if piPos1 < 7
      {
         ptStorage = CreateTimer(self,@ResetStorageTimer,NEXT_TIME);
      }

      if piPos1 = 7
      {
         ptStorage = CreateTimer(self,@ResetStorageTimer,RESET_TIME);
      }

      return;
   }

   CloseStorageDoor()
   {
      if piPos1 < 7
      {
         return;
      }

      piPos1 = piPos1 + 1;
      
      Send(self,@SetSector,#sector=piPos1,#animation=ANIMATE_FLOOR_LIFT,
           #height=256,#speed=16);
      Send(self,@CloseSecretDoorSound);

      if piPos1 < 14
      {
         ptStorage = CreateTimer(self,@ResetStorageTimer,NEXT_TIME);
      }

      if piPos1 = 14
      {
         piPos1 = 0;
      }

      return;
   }

   ResetStorageTimer()
   {
      ptStorage = $;
      
      if (piPos1 > 6)
      {
         Send(self,@CloseStorageDoor);

         return;
      }

      Send(self,@OpenSecretDoor);

      return;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         if piPos2 > 2
         {
            return;
         }
      
         Send(self,@TimeStampDoor);
         piPos2 = piPos2 + 1;
      
         Send(self,@SomethingWaveRoom,#wave_rsc=guildhall4_sound);
         Send(self,@SetSector,#sector=piPos2,#animation=ANIMATE_CEILING_LIFT,
              #height=196,#speed=16);
         Send(self,@OpenEntranceDoorSound);

         if piPos2 < 3
         {
            ptEntrance = CreateTimer(self,@ResetEntranceTimer,NEXT_TIME);
         }

         if piPos2 = 3
         {
            ptEntrance = CreateTimer(self,@ResetEntranceTimer,RESET_TIME);
         }
      }

      return;
   }

   CloseEntranceDoor()
   {
      return;
   }

   CloseEntranceDoorTimer()
   {
      local iSectorID;

      if piPos2 < 2
      {
         return;
      }

      piPos2 = piPos2 + 1;
      iSectorID = piPos2 - 3;

      Send(self,@SomethingWaveRoom,#wave_rsc=guildhall4_sound);
      Send(self,@SetSector,#sector=iSectorID,#animation=ANIMATE_CEILING_LIFT,
            #height=128,#speed=50);
      Send(self,@CloseEntranceDoorSound);
      
      if piPos2 < 6
      {
         ptEntrance = CreateTimer(self,@ResetEntranceTimer,NEXT_TIME);
      }

      if piPos2 = 6
      {
         piPos2 = 0;
         % Use this to clear players from door.
         ptEntrance = CreateTimer(self,@ClearDoor,1500);
      }

      return;
   }

   ResetEntranceTimer()
   {
      ptEntrance = $;

      if (piPos2 > 2)
      {
         Send(self,@CloseEntranceDoorTimer);

         return;
      }

      Send(self,@OpenEntranceDoor);

      return;
   }

   ResetTimer()
   {
      ptReset = $;

      Send(self,@SetSector,#sector=WESTDOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=128,#speed=16);
      Send(self,@SetSector,#sector=EASTDOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=128,#speed=16);
      Send(self,@SetSector,#sector=MASTERDOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=128,#speed=16);
      Send(self,@SetSector,#sector=ASSISTDOOR,#animation=ANIMATE_CEILING_LIFT,
           #height=128,#speed=16);

      return;
   }

   Delete()
   {
      if ptReset <> $
      {
         DeleteTimer(ptReset);
         ptReset = $;
      }

      if ptEntrance <> $
      {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }

      if ptStorage <> $
      {
         DeleteTimer(ptStorage);
         ptStorage = $;
      }

      if ptLighting <> $
      {
         DeleteTimer(ptLighting);
         ptLighting = $;
      }

      propagate;
   }

   SomethingTryGo(what = $,row = $,col = $)
   {
      if (row = 29) AND (col < 24) AND (col > 17)
      {
         Send(self,@SetSector,#sector=WESTDOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=204,#speed=16);
         ptReset = CreateTimer(self,@ResetTimer,RESET_TIME_LONG);

         return TRUE;
      }

      if (row = 29) AND (col > 25) AND (col < 32)
      {
         Send(self,@SetSector,#sector=EASTDOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=204,#speed=16);
         ptReset = CreateTimer(self,@ResetTimer,RESET_TIME_LONG);

         return TRUE;
      }

      if ((row > 35) AND (row < 39)) AND (col = 33)
      {
         Send(self,@SetSector,#sector=MASTERDOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=204,#speed=16);
         ptReset = CreateTimer(self,@ResetTimer,RESET_TIME_LONG);

         return TRUE;
      }

      if (row = 33) AND ((col = 36) OR (col = 35))
      {
         Send(self,@SetSector,#sector=ASSISTDOOR,#animation=ANIMATE_CEILING_LIFT,
              #height=204,#speed=16);
         ptReset = CreateTimer(self,@ResetTimer,RESET_TIME_LONG);

         return TRUE;
      }

      if row = 43 AND (col < 26 AND col > 23)
      {
         Send(self,@OpenEntranceDoor);

         return TRUE;
      }

      propagate;
   }

   CreateStandardObjects()
   {
      local oNews;

      Send(self,@NewHold,#what=Create(&Table),#new_row=31,#new_col=10);
      Send(self,@NewHold,#what=Create(&Table),#new_row=31,#new_col=12);
      Send(self,@NewHold,#what=Create(&Table),#new_row=33,#new_col=18);
      Send(self,@NewHold,#what=Create(&Table),#new_row=36,#new_col=18);
      Send(self,@NewHold,#what=Create(&Table),#new_row=36,#new_col=14);
      Send(self,@NewHold,#what=Create(&Table),#new_row=34,#new_col=16);

      Send(self,@NewHold,#what=Create(&Firepit,#iLightIntensity=10),#new_row=40,#new_col=21,
           #fine_col=0,#fine_row=16);
      Send(self,@NewHold,#what=Create(&Firepit,#iLightIntensity=10),#new_row=40,#new_col=29,
           #fine_col=0,#fine_row=16);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=43,#new_col=23,
           #fine_row=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=43,#new_col=26,
           #fine_row=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=34,#new_col=21,
           #fine_row=16,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=34,#new_col=29,
           #fine_row=16,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=30,#new_col=21);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=30,#new_col=28);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=28,#new_col=21);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=28,#new_col=28);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=28,#new_col=19);
      Send(self,@NewHold,#what=Create(&Firepit,#iLightIntensity=10),#new_row=30,#new_col=19);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=10),#new_row=28,#new_col=30);
      Send(self,@NewHold,#what=Create(&Firepit,#iLightIntensity=10),#new_row=30,#new_col=30);
      Send(self,@NewHold,#what=Create(&Firepit,#iLightIntensity=10),#new_row=23,#new_col=21,
           #fine_row=48,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iLightIntensity=10),#new_row=23,#new_col=29,
           #fine_row=48,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=50),#new_row=6,#new_col=9,
           #fine_row=48,#fine_col=16);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=20,#iLightIntensity=50),#new_row=10,#new_col=5,
           #fine_row=32,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=50),#new_row=14,#new_col=9,
           #fine_col=16,#fine_row=16);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=50),#new_row=14,#new_col=40,
           #fine_row=16,#fine_col=48);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=20,#iLightIntensity=50),#new_row=10,#new_col=45,
           #fine_row=32,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Firepit,#iSoundRadius=0,#iLightIntensity=50),#new_row=6,#new_col=40,
           #fine_col=48,#fine_row=48);

      Send(self,@NewHold,#what=Create(&Brazier),#new_row=6,#new_col=24,
           #fine_row=56,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=6,#new_col=25,
           #fine_row=56,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=6,#new_col=23,
           #fine_row=56,#fine_col=16);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=6,#new_col=21,
           #fine_row=56,#fine_col=48);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=6,#new_col=26,
           #fine_row=56,#fine_col=48);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=6,#new_col=28,
           #fine_row=56,#fine_col=16);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=35,#new_col=36,
           #fine_col=48);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=35,#new_col=40);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=40,#new_col=30);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=40,#new_col=36);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=44,#new_col=36,
           #fine_row=0);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=44,#new_col=30,
           #fine_row=0);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=31,#new_col=8,
           #fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=25,#new_col=10,
           #fine_row=48,#fine_col=32);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=23,#new_col=12,
           #fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=24,#new_col=14);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=23,#new_col=38,
           #fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=23,#new_col=33,
           #fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=45,#new_col=27,
           #fine_row=24,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=35,#new_col=35,
           #fine_row=32,#fine_col=32);

      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=43,#new_col=15,#fine_row=32,#fine_col=40,
            #new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=43,#new_col=12,#fine_row=16,#fine_col=48,
            #new_angle=ANGLE_NORTH_EAST);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=43,#new_col=18,#fine_row=16,#fine_col=16,
            #new_angle=ANGLE_NORTH_WEST);

      propagate;
   }

   CreateStandardExits()
   {
      plEdge_Exits = $;

      plEdge_Exits = Cons([LEAVE_SOUTH, RID_JASPER, 73,36, ROTATE_180], plEdge_exits);

      return;
   }

   DefensesDown()
   {
      ptLighting = CreateTimer(self,@LightFlicker,1000);

      return;
   }

   LightFlicker()
   {
      % Is the hall being raided?
      if piStatus = 1
      {
         if piBaseLight = FLICKER_LOW
         {
            Send(self,@SetBaseLight,#amount=FLICKER_HIGH);
         }
         else
         {
            Send(self,@SetBaseLight,#amount=FLICKER_LOW);
         }

         ptLighting = CreateTimer(self,@LightFlicker,2000);
      }
      else
      {
         ptLighting = $;
         Send(self,@DefensesUp);
      }

      return;
   }

   DefensesUp()
   {
      if ptLighting <> $
      {
         deletetimer(ptLighting);
         ptLighting = $;
      }

      Send(self,@SetBaseLight,#amount=FLICKER_NONE);

      return;
   }

   ClaimGuildHall()
   {
      Send(self,@DefensesUp);

      propagate;
   }

   ResetGuildHall()
   {
      Send(self,@DefensesUp);

      propagate;
   }

   ConquerTimer()
   {
      Send(self,@DefensesUp);

      propagate;
   }

   GetTotemLightIntensity(what=$)
   {
      if poTotemOne <> $
         AND what = poTotemOne
      {
         return 5;
      }

      return 0;
   }

   GetTotemLightColor(what=$)
   {
      if poTotemOne <> $
         AND what = poTotemOne
      {
         return LIGHT_YELLOW;
      }
      return LIGHT_GREEN;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
