% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
KCForest is MonsterRoom

constants:

   include blakston.khd
   MIN_HOUR_COUNTER = 8
   MAX_HOUR_COUNTER = 24

classvars:

   viAvar_clan = AVARCLAN_PROMAGIC   %% which avar clan controls this part of the jungle.

properties:

   plItem_coords = $
   piItem_gen_counter = 0

messages:

   Constructor()
   {
      Send(self,@CreateJungleItemCoords);

      propagate;
   }
   
   GetPhaseThreats()
   {
      if Send(self,@CheckRoomFlag,#flag=ROOM_RAINING)
      {
         return [&RainThreat,&HumidityThreat];
      }
      if Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
      {
         return [&SnowThreat,&HumidityThreat];
      }
      return [&HumidityThreat];
   }

   StartThreat(cClasses=$,report=TRUE)
   {
      local i;

      % Don't start same threat if one already exists.
      % Don't start threats with no players present.
      if pbUser_in_room
         AND cClasses <> $
      {
         foreach i in cClasses
         {
            if NOT Send(self,@HasObjectAttribute,#cClass=i)
            {
               Create(i,#host_object=self,#iDuration=$,#report=report);
            }
         }
      }

      return;
   }

   EndThreat(cClass=&ShockStorm)
   {
      if Send(self,@HasObjectAttribute,#cClass=cClass)
      {
         Send(Send(self,@GetObjectAttribute,#cClass=cClass),@Delete);
      }
      return;
   }
   
   EndAllThreats()
   {
      local i;
      
      foreach i in plObject_attributes
      {
         if IsClass(i,&RoomThreat)
            OR IsClass(i,&RoomStorm)
         {
            Send(i,@Delete);
         }
      }

      return;
   }

   FirstUserEntered()
   {
      Post(self,@StartThreat,#cClasses=Send(self,@GetPhaseThreats),#report=FALSE);

      propagate;
   }
   
   LastUserLeft()
   {
      Post(self,@EndAllThreats);

      propagate;
   }

   CreateJungleItemCoords()
   {
      % Overwrite this.  Do not propagate.
      plItem_coords = $;

      return;
   }

   RecalcLightAndWeather()
   {
      local i, bFound, oItem, lChoose;

      if plItem_coords = $
      {
         propagate;
      }

      piItem_gen_counter = piItem_gen_counter - 1;
      if piItem_gen_counter <= 0
      {
         bFound = FALSE;
         % Create an item
         lChoose = Nth(plItem_coords,Random(1,Length(plItem_coords)));

         % Don't generate any of this item type if any exist already.
         foreach i in plPassive
         {
            if IsClass(first(i),(first(lChoose)))
            {
               bFound = TRUE;

               break;
            }
         }

         if NOT bFound
         {
            oItem = Create(first(lChoose));
            Send(self,@NewHold,#what=oItem,#new_row=Nth(lChoose,2),
                  #new_col=Nth(lChoose,3));
         }

         piItem_gen_counter = Random(MIN_HOUR_COUNTER,MAX_HOUR_COUNTER);
      }

      propagate;
   }

   GetClan()
   {
      return viAvar_clan;
   }

   GetRegion()
   {
      return RID_KOCATAN;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

