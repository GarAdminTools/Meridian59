% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ChaosStratumRoom is MonsterRoom

% Players enter a Chaos Stratum from the Undersea Palace.
%
% It is then also present in the 'real world', complete with entrances and exits.
%    Players 5 reincs and over will enter the Chaos Stratum
%    instead of the real world version.
%
% It functions as a normal monster room with elevated dangers
%    until a boss spawns.
%
%
% Drops:
%  Scrying crystals, roughly one per room
%  Very rarely dye bottles
%
% Todo: looping sounds from constructed
% spawn monsters

constants:

   include blakston.khd

resources:

   ChaosStratumRoom_name = "Chaos Stratum"
   chaos_stratum_welcome_message = \
      "With each step closer to evil, reality becomes less coherent, "
      "but the scrying crystal has brought you to an island of stability... "
      "be warned, for death is very real here."
   ChaosStratum_music = nec02.mp3
   
   the_chaos_stratum_ends = \
      "Reality ripples and returns to normal around you as the nightmare ends... for now."

classvars:

   vrName = ChaosStratumRoom_name
   viTeleport_row = 1
   viTeleport_col = 1
%   viPermanent_flags = ROOM_SAFELOGOFF

properties:

   poBaseRoom = $
   prRoom = $
   piRoom_num = RID_CHAOS_STRATA_START
   piOverridesDeathFunction = FALSE
   pbNoReagents = FALSE

   piGen_time = 5000
   piGen_percent = 100

   piInit_count_min = 15
   piInit_count_max = 40
   piMonster_count_max = 100

   piChaosZone = TRUE

   plBosses = $
   plFixedRewards = $
   
   pbActive = TRUE

   piBaseLight = LIGHT_MIN
   piOutside_Factor = OUTDOORS_NONE

   prMusic = ChaosStratum_music
   
   piMonstersSpawned = 0
   piStratumMaxMonstersSpawn = 50
   pbBossSpawned = FALSE
   piBoostChaosLevel = 0
   
   poScryingDevice = $
   
   piKillsRemaining = 150

messages:

   Constructor(iRID=RID_CHAOS_STRATA_START,base_room=$,iPvP=TRUE)
   {
      poBaseRoom = Send(SYS,@FindRoomByNum,#num=RID_TOS_CRYPT);
      prRoom = Send(poBaseRoom,@GetRoomResource);
      %piRoom_num = iRID;

      if iPvP
      {
         piChaosZone = TRUE;
      }
      else
      {
         Post(self,@SetRoomFlag,#flag=ROOM_NO_PK,#value=TRUE);
      }

%      piBaseLight = Send(poBaseRoom,@GetBaseLight);
%      piOutside_factor = Send(poBaseRoom,@GetOutsideFactor);
%      piDirectional_percent = Send(poBaseRoom,@GetDirectionalPercent);

      plGenerators = Send(poBaseRoom,@GetGenerators);

      plBosses = [&EarthElementalChampion,
                  &FireElementalChampion,
                  &IceElementalChampion,
                  &NeruElementalChampion,
                  &Yeti,
                  &DarkAngel,
                 %&Thrasher,
                  &Ghost,
                 %&GroundWormQueen,
                 %&OrcPitBoss,
                 %&DragonFlyQueen,
                 %&Shadowbeast,
                 %&SpiderQueen,
                  &GiantRatKing];

      plFixedRewards = [[&AntMask,50],
                        [&RatMask,55],
                        [&MummyMask,60],
                        [&SkullMask,65],
                        [&TrollMask,70],
                        [&ShrunkenHeadMask,75],
                        [&DaemonMask,80],
                        [&FeyMask,85],
                        [&XeoMask,90],
                        [&KriipaMask,95],
                        [&CowMask,125],
                        [&KraananCharm,140]];

      Send(self,@SetExits);

      Send(self,@RecalcLightAndWeather);

      propagate;
   }

   ChaosShift(iRID=0, boost_chaos_level=0)
   {
      local i, oTempHolder;

      Send(self,@RemoveMonsters);
      Send(self,@RemoveLights);
%      Send(self,@EndChaosRealm);
      poBaseRoom = Send(SYS,@FindRoomByNum,#num=iRID);
      prRoom = Send(poBaseRoom,@GetRoomResource);
      Send(self,@LoadRoomData);

      plGenerators = Send(poBaseRoom,@GetGenerators);
      Send(self,@PlaceLights);

      Send(self,@SetExits);
      
%      Send(self,@StartChaosRealm);
      
      oTempHolder = Send(SYS,@FindRoomByNum,#num=RID_HERMIT_HUT);
      
      plMonsters = Send(poBaseRoom,@GetMonsterList);
      
      piBoostChaosLevel = boost_chaos_level;
      
      piKillsRemaining = 60 + piBoostChaosLevel;
      pbBossSpawned = FALSE;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&User)
         {
            Send(oTempHolder,@Teleport,#what=First(i));
            Post(self,@Teleport,#what=First(i));
         }
      }
      return;
   }
   
   RemoveMonsters()
   {
      local i;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Monster)
            AND Send(First(i),@GetMaster) = $
         {
            Send(First(i),@Delete);
         }
      }
      return;
   }
   
   RemoveLights()
   {
      local i;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&DynamicLight)
         {
            Send(First(i),@Delete);
         }
      }
      return;
   }
   
   PlaceLights()
   {
      local i;
      
      foreach i in plGenerators
      {
         Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BRED,#iIntensity=255),#new_row=Nth(i,1),#new_col=Nth(i,2));
      }
      return;
   }
   
   LightingColorOverride()
   {
      % No colors if we can help it.
      return TRUE;
   }
   
   BossKilled(who=$)
   {
      local i;
      
      foreach i in Send(self,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Send(poBaseRoom,@NewHold,#what=First(i),#new_row=Send(First(i),@GetRow),
                                                    #new_col=Send(First(i),@GetCol),
                                                    #fine_row=Send(First(i),@GetFineRow),
                                                    #fine_col=Send(First(i),@GetFineCol),
                                                    #new_angle=Send(First(i),@GetAngle));
            Send(First(i),@MsgSendUser,#message_rsc=the_chaos_stratum_ends);
         }
      }
      
      foreach i in Send(self,@GetHolderPassive)
      {
         if IsClass(First(i),&Item)
            OR IsClass(First(i),&DeadBody)
         {
            Send(poBaseRoom,@NewHold,#what=First(i),#new_row=Send(First(i),@GetRow),
                                                    #new_col=Send(First(i),@GetCol),
                                                    #fine_row=Send(First(i),@GetFineRow),
                                                    #fine_col=Send(First(i),@GetFineCol),
                                                    #merge=FALSE);
         }
      }
      
      pbActive = FALSE;
      if poScryingDevice <> $
      {
         Send(poScryingDevice,@ChaosStratumRoomEnded);
      }

      return;
   }
   
   GetLightingColorOverride(what=$)
   {
      return LIGHT_DRED;
   }

   RecalcBackgroundSkyGraphic(iSkyBox=0)
   {
      prBackground = background_chaos_night;
      return;
   }

   SetExits()
   {
      if poBaseRoom <> $
      {
         plExits = Send(poBaseRoom,@GetStandardExits);
         plEdge_Exits = Send(poBaseRoom,@GetEdgeExits);
      }
      return;
   }

   Delete()
   {
    %  Send(self,@BootAllUsers);

     % Send(Send(SYS,@GetChaosStrataMaintenance),@RoomDeleted,#what=self);
     
      if poScryingDevice <> $
      {
         Send(poScryingDevice,@ChaosStratumRoomEnded);
      }
      poScryingDevice = $;
      propagate;
   }
   

   GetTeleportRow()
   {
      if IsClass(poBaseRoom,&SurvivalRoom)
      {
         return viTeleport_row;
      }

      return Send(poBaseRoom,@GetTeleportRow);
   }

   GetTeleportCol()
   {
      if IsClass(poBaseRoom,&SurvivalRoom)
      {
         return viTeleport_col;
      }

      return Send(poBaseRoom,@GetTeleportCol);
   }

   GetTeleportAngle()
   {
      if IsClass(poBaseRoom,&SurvivalRoom)
      {
         return 0;
      }

      return Send(poBaseRoom,@GetTeleportAngle);
   }

   GetTerrainType()
   {
      if IsClass(poBaseRoom,&SurvivalRoom)
      {
         return 0;
      }

      return Send(poBaseRoom,@GetTerrainType);
   }

   GetBaseRoom()
   {
      return poBaseRoom;
   }

   GetLevel()
   {
      return piLevel;
   }

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      propagate;
   }

   CanHavePlayerPortal(who = $)
   {
      return FALSE;
   }
   
   IsActive()
   {
      return pbActive;
   }
   
   SetScryingDevice(oScryingDevice=$)
   {
      poScryingDevice = oScryingDevice;
      return;
   }

   SomethingKilled(what=$,victim=$)
   {
      local i, cDeadClass, oTarget, mob, oMonster, iGoal, iKills, iRandomGen;

      if IsClass(victim,&User)
      {
         propagate;
      }

      if IsClass(victim,&Monster)
      {
         % These kills don't count towards the room goals.
         if Send(victim,@IsMinion)
            OR IsClass(victim,&Brambles)
         {
            propagate;
         }

         cDeadClass = GetClass(victim);

         foreach i in plBosses
         {
            if i = cDeadClass
            {
               Post(self,@BossKilled,#who=what,#what=victim);
               propagate;
            }
         }
         
         if piKillsRemaining > 0
         {
            piKillsRemaining--;
         }
         else if NOT pbBossSpawned
         {
            pbBossSpawned = TRUE;
            iRandomGen = Random(1,Length(plGenerators));
            Send(self,@NewHold,#what=Create(Nth(plBosses,Random(1,Length(plBosses))),
                                            #iChaosLevel=piBoostChaosLevel),
                               #new_row=Nth(Nth(plGenerators,iRandomGen),1),
                               #new_col=Nth(Nth(plGenerators,iRandomGen),2));
         }
      }

      propagate;
   }

   IsBoss(what=$)
   {
      local i, cMob;

      if what <> $
      {
         cMob = GetClass(what);
         foreach i in plBosses
         {
            if cMob = i
            {
               return TRUE;
            }
         }
      }

      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
