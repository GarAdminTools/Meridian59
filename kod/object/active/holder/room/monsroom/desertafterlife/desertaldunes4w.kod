% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DesertAfterlifeDunes4West is DesertAfterlife

constants:

   include blakston.khd

resources:

   room_desertALdunes4w = desertaldunes2.roo
   room_name_desertALdunes4w = "Eternal Wastes"

   prism_of_life_defeated = \
      "~BThe Prism of Life in the Eternal Wastes has been defeated by a band of brave spirits. "
      "For a time, it will be possible to escape the Eternal Wastes by ascending the Prism of Life."

classvars:

   vrName = room_name_desertALdunes4w

   viTeleport_row = 37
   viTeleport_col = 140

properties:

   piBaseLight = LIGHT_MAX
   piOutside_factor = OUTDOORS_5 

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

   prRoom = room_desertALdunes4w
   piRoom_num = RID_DESERTALDUNES4W

   piGen_time = 30000
   piGen_percent = 100

   piInit_count_min = 25
   piInit_count_max = 25

   piMonster_count_max = 25
   
   pbPrismOpen = TRUE
   pbPrismOfLifeDefeated = FALSE

   ptPrismOfLifeReset = $
   piHoursLeftReset = 71

messages:

   Constructed()
   {
      plMonsters = [ [&LostSoul, 100] ];
      % 120 by 204
      plGenerators = [ [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)],
                       [ Random(3,117), Random(3,201)]
                     ];

      propagate;
   }

   SomethingMoved(what = $,new_row = $, new_col = $)
   {
      if new_col > (Send(self,@GetRoomCols)-2)
      {
         if IsClass(what,&User)
         {
            Send(what,@MsgSendUser,#message_rsc=darker_going_east_msg);
         }
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES3W),
              #new_row=Send(what,@GetRow),
              #new_col=Send(self,@GetRoomCols)-3,
              #fine_row=0,
              #fine_col=Send(what,@GetFineCol),
              #new_angle=Send(what,@GetAngle));
         return;
      }

      if new_col < 2
      {
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_PRISM_OF_LIFE),
              #new_row=89,
              #new_col=210,
              #fine_row=0,
              #fine_col=0,
              #new_angle=Send(what,@GetAngle));
         return;
      }

      if new_row < 2
      {
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES4W),
              #new_row=Send(self,@GetRoomRows)-3,
              #new_col=Send(what,@GetCol),
              #fine_row=0,
              #fine_col=Send(what,@GetFineCol),
              #new_angle=Send(what,@GetAngle));
         return;
      }

      if new_row > (Send(self,@GetRoomRows)-2)
      {
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES4W),
              #new_row=3,
              #new_col=Send(what,@GetCol),
              #fine_row=0,
              #fine_col=Send(what,@GetFineCol),
              #new_angle=Send(what,@GetAngle));
         return;
      }

      propagate;
   }

   Delete()
   {
      if ptPrismOfLifeReset <> $
      {
         DeleteTimer(ptPrismOfLifeReset);
         ptPrismOfLifeReset = $;
      }
      propagate;
   }

   PrismOfLifeDefeated()
   {
      local i;

      pbPrismOfLifeDefeated = TRUE;
      pbPrismOpen = FALSE;
      
      piHoursLeftReset = 71;
      ptPrismOfLifeReset = CreateTimer(self,@PrismOfLifeReset,60000 * 60);
      
      foreach i in Send(SYS,@GetUsersLoggedOn)
      {
         Send(i,@MsgSendUser,#message_rsc=prism_of_life_defeated);
      }
      return;
   }

   PrismOfLifeReset()
   {
      local i;

      ptPrismOfLifeReset = $;
      
      if piHoursLeftReset > 0
      {
         --piHoursLeftReset;
         ptPrismOfLifeReset = CreateTimer(self,@PrismOfLifeReset,60000 * 60); % 1 hour, counts down 72 times
         return;
      }

      pbPrismOpen = TRUE;
      pbPrismOfLifeDefeated = FALSE;
      Send(Send(SYS,@FindRoomByNum,#num=RID_MAZE_EXIT_ROOM),@CloseHolyWall);
      
      return;
   }

   GetPrismOfLifeDefeated()
   {
      return pbPrismOfLifeDefeated;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
