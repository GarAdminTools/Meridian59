% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DesertAfterlife is MonsterRoom

% The desert is extremely far away from Meridian.
% So far, in fact, that they do not have the same afterlife.
%
% This afterlife contains some interesting things:
% - The demon Xaerdun, who will recover your items and send you back for a fee.
%    Being the demon of Greed, he charges exorbitant prices, but he's also
%    addicted to making a sale. The longer a player waits, the less he'll
%    charge. (His corpse recovery also is the only way to get your items out
%    of certain deathtraps like the Abyssal Bore.)
%    Subtly, Xaerdun's item recovery brings those items to you while you
%    are still in the afterlife, enabling you to adventure therein.
%    Xaerdun takes from your bank account(s). If a player has absolutely 
%    no money, he/she is trapped in the afterlife until someone defeats
%    a certain dungeon (or if the dungeon is already defeated, resurrection
%    is free).
%
% - The wastes contain strange undying monsters.
%
% - The Prism of Life (holy) to the east (sunrise). Defeating the Prism of 
%    Life frees all trapped souls, players and NPCs alike.
%
% - The Prism of Death (unholy) to the west (sunset). Plays an important
%    role in restoring balance (in this case, the Arbiter of the Prism of
%    Life seeks to give all living beings immortality, which would be a
%    disaster. They are not immune to wounds, they just can't die). The
%    Prism of Death and its Arbiter are not enemies; very helpful to players
%    and they explain the situation at large and why the Prism of Life
%    must be defeated.
%
% - The lost heroine who defeated the Lightning Prism wanders here,
%   unable to rest or escape. Defeating the Prism of Life allows her to
%   resurrect.

constants:

   include blakston.khd

resources:

   desert_afterlife_music = desertafterlife.mp3

   cannot_teleport_in_afterlife = \
      "Lacking the proper physical and vital bonds, your "
      "teleportation spell falters."
   cannot_alter_death_in_afterlife = \
      "This type of death is beyond your ability to master."
   cannot_eye_buff_in_afterlife = \
      "This place has neither Sun nor light. The manner in which you "
      "are currently perceiving your surroundings is beyond the scope "
      "of any vision spell."
   cannot_blind_dazzle_in_afterlife = \
      "The manner in which your enemy is currently perceiving existence "
      "is beyond the scope of any vision spell."
   cannot_conveyance_in_afterlife = \
      "If you knew how to send items to your vault from this place, you would "
      "be truly wise indeed."
   cannot_fireball_here = \
      "The afterlife's chill douses your fireball."

classvars:

   viTerrain_type = TERRAIN_BADLANDS

   % No pens or PKing in afterlife. Everyone's already dead!
   viPermanent_flags = ROOM_SAFELOGOFF | ROOM_NO_PK

   viCanSpawnChampions = FALSE

properties:

   pbSnowGroundTexture = FALSE
   prMusic = desert_afterlife_music

messages:

   CheckNewHoldObjectFullyEntered()
   {
      return TRUE;
   }

   NewHoldObjectFullyEntered(what = $)
   {
      local oGreyGhost;

      if IsClass(what,&User)
      {
         oGreyGhost = Send(SYS,@FindSpellByNum,#num=SID_GREY_GHOST);
         
         Send(what,@ReserveSpell,#oSpell=oGreyGhost,#iPercentManaReserved=0,#iSpellPower=99);
         %Post(what,@SendEnchantmentIcons);
      }
      else
      {
         Send(what,@AddDrawingEffects,#value=DRAWFX_SECONDTRANS);
         Send(self,@SomethingChanged,#what=what);
      }

      propagate;
   }
   
   LeaveHold(what = $)
   {
      Post(self,@CheckToRemoveGreyGhost,#what=what);

      propagate;
   }

   CheckToRemoveGreyGhost(what=$)
   {
      local oGreyGhost;

      if Send(what,@GetOwner) = $
         OR (NOT IsClass(Send(what,@GetOwner),&DesertAfterlife)
            AND NOT IsClass(Send(what,@GetOwner),&PrismOfLife)
            AND NOT IsClass(Send(what,@GetOwner),&PrismOfDeath))
      {
         if IsClass(what,&User)
         {
            oGreyGhost = Send(SYS,@FindSpellByNum,#num=SID_GREY_GHOST);
         
            Send(what,@UnReserveSpell,#oSpell=oGreyGhost);
            %Post(what,@SendEnchantmentIcons);
         }
         else
         {
            Post(what,@RemoveDrawingEffects,#value=DRAWFX_SECONDTRANS);
            if Send(what,@GetOwner) <> $
            {
               Post(Send(what,@GetOwner),@SomethingChanged,#what=what);
            }
         }
      }
      
      return;
   }

   StartRain()
   {
      return;
   }
   
   StartSnow()
   {
      return;
   }

   GetRegion()
   {
      return RID_DESERTALDUNES;
   }
   
   OverridesDeathFunction()
   {
      return TRUE;
   }
   
   OverrideDeathFunction(who=$,what=$,stroke_obj=$)
   {
      local oAfterlife, bDrop, oRoom, iRow, iCol, iFine_Row, iFine_Col, iAngle, iRoom,
            oBody, lReagentBagContents, lInventoryContents, lItems, i, oSoldierShield;

      Send(who,@ClearStance);

      % Stop any rescue attempts that were going on.
      Send(who,@CancelRescue);
      Send(who,@RemoveAllEnchantments,#report=FALSE);
      
      Send(who,@SetDeathTime,#iTime=GetTime());

      % Grab the location of the deceased.
      % Might need to grab the old location if logged off.

      if Send(who,@IsLoggedOn)
      {
         oRoom = Send(who,@GetOwner);
         iRow = Send(who,@GetRow);
         iCol = Send(who,@GetCol);
         iFine_Row = Send(who,@GetFineRow);
         iFine_Col = Send(who,@GetFineCol);
         iAngle = Send(who,@GetAngle);
         iRoom = Send(Send(who,@GetOwner),@GetRoomNum);
      }
      else
      {
         iRoom = Send(who,@GetSaveRoom);
         oRoom = Send(SYS,@FindRoomByNum,#num=iRoom);
         iRow = Send(who,@GetSaveRow);
         iCol = Send(who,@GetSaveCol);
         iFine_Row = Send(who,@GetSaveFineRow);
         iFine_Col = Send(who,@GetSaveFineCol);
         iAngle = Send(who,@GetSaveAngle);
      }

      % Record-keeping. Keep this before the token check,
      % so we can give proper message.
      Send(SYS,@UserKilled,#what=who,#killer=what,#oRoom=oRoom,#stroke_obj=stroke_obj);
      Send(Send(SYS,@GetStatistics),@PlayerDiedCounter);

      % Create the corpse.
      if what <> $
         AND IsClass(what,&User)
      {
         oBody = Send(who,@CreateCorpse,#oPlayerKiller=what);
      }
      else
      {
         oBody = Send(who,@CreateCorpse);
      }
      Send(who,@SetCorpse,#corpse=oBody);

      Send(oRoom,@NewHold,#what=oBody,#new_row=iRow,#new_col=iCol,
            #fine_row=iFine_Row,#fine_col=iFine_Col,#new_angle=iAngle);

      bDrop = TRUE;
      % Start losing stuff if applicable.
      if bDrop
      {
         lReagentBagContents = Send(who,@GetReagentBagContents);
         if lReagentBagContents <> $
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive),lReagentBagContents];
         }
         else
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive)];
         }

         foreach lItems in lInventoryContents
         {
            foreach i in lItems
            {
               % Let the item know we died, in case it does something special.
               Send(i,@OwnerKilled);

               if Send(i,@DropOnDeath)
               {
                  if Send(oRoom,@ReqNewHold,#what=i,#new_row=iRow,#new_col=iCol)
                  {
                     Send(oBody,@NewHold,#what=i);
                  }
               }
            }
         }

         Post(who,@EvaluatePKStatus);

         % Let SoldierShields know we died. It handles itself as appropriate.
         oSoldierShield = Send(who,@FindUsing,#what=&SoldierShield);
         if oSoldierShield <> $
         {
            Send(oSoldierShield,@OwnerDied,#what=what);
         }
      }

      % Give out your dying scream.
      if Send(who,@GetGender) = GENDER_FEMALE
      {
         i = Send(who,@GetFemaleDeathWav);
      }
      else
      {
         i = Send(who,@GetMaleDeathWav);
      }

      Send(oRoom,@SomethingWaveRoom,#what=oBody,#wave_rsc=i);
      if Send(who,@IsLoggedOn)
      {
         Send(who,@WaveSendUser,#what=who,#wave_rsc=i);
      }

      Send(who,@SetHealth,#amount=1);

      Send(who,@NewHealth);
      Send(who,@NewMana);
      Send(who,@NewVigor);
      
      Send(who,@SetDeathCost,#DeathCost=Send(Send(SYS,@GetDesertRoomMaintenance),@GetDeathCost),#bOverride=TRUE);
      Send(who,@ApplyDeathPenalties);

      % Refresh the client with what's really going on.
      if Send(who,@IsLoggedOn)
      {
         Send(who,@ToCliStats,#group=1);
         Send(who,@ToCliStats,#group=2);
         Send(who,@ToCliStats,#group=3);
         Send(who,@ToCliStats,#group=4);

         % Wake up with red foggy hangover.
         Send(who,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=5000);
      }
      
      oAfterlife = Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES);
      Send(oAfterlife,@Teleport,#what=who);
      return;
   }

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      if IsClass(oSpell,&Rescue)
         OR IsClass(oSpell,&Elusion)
         OR IsClass(oSpell,&GuildHallRecall)
      {
         Send(who,@MsgSendUser,#message_rsc=cannot_teleport_in_afterlife);
         return FALSE;
      }

      if IsClass(oSpell,&DeathRift)
         OR IsClass(oSpell,&PortalOfLife)
         OR IsClass(oSpell,&Animate)
         OR IsClass(oSpell,&Defile)
         OR IsClass(oSpell,&Phase)
      {
         Send(who,@MsgSendUser,#message_rsc=cannot_alter_death_in_afterlife);
         return FALSE;
      }
      
      if IsClass(oSpell,&NightVision)
         OR IsClass(oSpell,&EagleEyes)
      {
         Send(who,@MsgSendUser,#message_rsc=cannot_eye_buff_in_afterlife);
         return FALSE;
      }
      
      if IsClass(oSpell,&Blind)
         OR IsClass(oSpell,&Dazzle)
      {
         Send(who,@MsgSendUser,#message_rsc=cannot_blind_dazzle_in_afterlife);
         return FALSE;
      }
      
      if IsClass(oSpell,&Fireball)
      {
         Send(who,@MsgSendUser,#message_rsc=cannot_fireball_here);
         return FALSE;
      }
      
      if IsClass(oSpell,&Conveyance)
      {
         Send(who,@MsgSendUser,#message_rsc=cannot_conveyance_in_afterlife);
         return FALSE;
      }

      propagate;
   }
   
   CanHavePlayerPortal()
   {
      return FALSE;
   }
   
   LightingColorOverride()
   {
      % No colors if we can help it.
      return TRUE;
   }
   
   GetLightingColorOverride(what=$)
   {
      return LIGHT_WHITE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
