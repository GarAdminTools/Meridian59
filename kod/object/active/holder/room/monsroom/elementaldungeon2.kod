% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ElementalDungeon2 is MonsterRoom

% Platforms appear as players approach, disappear as they move.
% Falling boots you (the essence of lightning catches you).
% Air xeo'chicatls do spawn and attack, but the boss is dead.
% Items that drop fall and are gone forever.

constants:

   include blakston.khd
   
   START_SECTOR = 1
   ESCAPE_SECTOR = 36

resources:

   room_name_elementaldungeon2 = "Prism of Lightning"
   room_elementaldungeon2 = elementaldungeon2.roo
   elementaldungeon2_music = cave.mp3
   
   item_dropped_msg = \
      "The %s falls into endless eternities of air!"
   
   lightning_prism_phase_out = \
      "You phase out of the elemental plane of lightning, and are drawn along "
      "the natural curvature of the region's mana flows. Tingling, but alive, "
      "you find yourself at a familiar oasis."

   reached_end_lightning_prism =\
      "A surge of energy carries you to the other side of the Prism of Lightning!"

classvars:

   vrName = room_name_elementaldungeon2

   viTeleport_row = 5
   viTeleport_col = 5


properties:

   prRoom = room_elementaldungeon2
   piRoom_num = RID_ELEMENTAL_DUNGEON2

   piBaseLight = LIGHT_MIN
   piOutside_factor = 0

   prMusic = elementaldungeon2_music

   piGen_time = 30000
   piGen_percent = 80

   piInit_count_min = 4
   piInit_count_max = 6

   piMonster_count_max = 25
   
   piDropPlatformTime = 4000
   plDropPlatforms = $
   
   piCheckForFallsTime = 250
   ptCheckForFallsTimer = $

   piOverridesDeathFunction = TRUE

messages:

   Constructed()
   {
      local iPlatformNum;

      plMonsters = [ [&XeoAir, 100] ];

      plGenerators = [ [22, 24], [61, 20], [47, 68], [15, 37], [12,61],
                       [31, 52], [64, 46], [33, 34], [35, 18] ];
                       
      iPlatformNum = 2;
      while iPlatformNum <= 35
      {
         Send(self,@SetSector,#sector=iPlatformNum,
               #animation=ANIMATE_FLOOR_LIFT,#height=0,#speed=0);
         iPlatformNum++;
      }
      
      propagate;
   }
 
   DropPlatform(timer=$)
   {
      local i;
      
      foreach i in plDropPlatforms
      {
         if Nth(i,2) = timer
         {
            SetNth(i,2,$);
            Send(self,@SetSector,#sector=First(i),
                  #animation=ANIMATE_FLOOR_LIFT,#height=0,#speed=0);
            plDropPlatforms = DelListElem(plDropPlatforms,i);
         }
      }
      return;
   }

   FirstUserEntered()
   {
      ptCheckForFallsTimer = CreateTimer(self,@CheckForFalls,
                                   piCheckForFallsTime);
      propagate;
   }
   
   LastUserLeft()
   {
      if ptCheckForFallsTimer <> $
      {
         DeleteTimer(ptCheckForFallsTimer);
         ptCheckForFallsTimer = $;
      }
      propagate;
   }

   CheckForFalls()
   {
      local i, iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID,
            cur_row, cur_col, fine_row, fine_col;

      ptCheckForFallsTimer = $;
      ptCheckForFallsTimer = CreateTimer(self,@CheckForFalls,
                                   piCheckForFallsTime);

      foreach i in plActive
      {
         if IsClass(First(i),&User)
         {
            iQflags = LIQ_GET_SECTORINFO;

            cur_row = Send(First(i),@GetRow);
            cur_col = Send(First(i),@GetCol);
            fine_row = Send(First(i),@GetFineRow);
            fine_col = Send(First(i),@GetFineCol);
            if GetLocationInfoBSP(
                      prmRoom, iQflags, cur_row, cur_col, fine_row, fine_col,
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
            {
               if iServerID = 80
                  OR Send(First(i),@GetHeightAtObject) = 0
               {
                  Send(self,@BootPlayer,#who=First(i));
               }
            }
         }
      }
      return;
   }

   BootPlayer(who=$)
   {
      Send(who,@MsgSendUser,#message_rsc=lightning_prism_phase_out);
      Post(Send(SYS,@FindRoomByNum,#num=RID_WAYLAYOASIS),
            @Teleport,#what=who);
      return;
   }

   Delete()
   {
      local i, oThing;

      foreach i in Send(self,@GetHolderPassive)
      {
         oThing = Send(self,@HolderExtractObject,#data=i);
         if IsClass(oThing,&DeadBody)
            AND NOT Send(oThing,@GetPbMob)
         {
            % is a player corpse! Let's move it.
            Send(Send(SYS,@FindRoomByNum,#num=RID_DESERTDUNES),@Teleport,#what=oThing);
         }
      }
      
      foreach i in plDropPlatforms
      {
         DeleteTimer(Nth(i,2));
         SetNth(i,2,$);
         plDropPlatforms = DelListElem(plDropPlatforms,i);
      }
      if ptCheckForFallsTimer <> $
      {
         DeleteTimer(ptCheckForFallsTimer);
         ptCheckForFallsTimer = $;
      }
      propagate;
   }

   NewHold(what = $)
   {
      local i, each_obj;

      % Anything you drop is lost forever!
      if IsClass(what,&Item)
      {
         foreach i in plActive
         {
            each_obj = Send(self,@HolderExtractObject,#data=i);
            if IsClass(each_obj,&Player)
            {
               Send(each_obj,@MsgSendUser,#message_rsc=item_dropped_msg,
                     #parm1=Send(what,@GetName));
            }
         }
         Post(what,@Delete);
      }
      propagate;
   }

   SomethingMoved(what=$,new_row=0,new_col=0,fine_row=0,fine_col=0)
   {
      local iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID, i,
            bFound;

      if NOT IsClass(what,&Player)
      {
         propagate;
      }

      iQflags = LIQ_GET_SECTORINFO;

      if GetLocationInfoBSP(
                      prmRoom, iQflags, new_row, new_col, fine_row, fine_col,
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
      {
         if iServerID > 2
         {
            Send(self,@SetSector,#sector=iServerID-1,
                  #animation=ANIMATE_FLOOR_LIFT,#height=5500,#speed=0);
            bFound = FALSE;
            foreach i in plDropPlatforms
            {
               if First(i) = iServerID-1
               {
                  bFound = TRUE;
               }
            }
            
            if NOT bFound
            {
               plDropPlatforms = Cons([iServerID-1,
                     CreateTimer(self,@DropPlatform,piDropPlatformTime)],
                     plDropPlatforms);
            }
         }

         if iServerID < 35
         {
            Send(self,@SetSector,#sector=iServerID+1,
                  #animation=ANIMATE_FLOOR_LIFT,#height=5500,#speed=0);
            bFound = FALSE;
            foreach i in plDropPlatforms
            {
               if First(i) = iServerID+1
               {
                  bFound = TRUE;
               }
            }
            
            if NOT bFound
            {
               plDropPlatforms = Cons([iServerID+1,
                     CreateTimer(self,@DropPlatform,piDropPlatformTime)],
                     plDropPlatforms);
            }
         }
         
         if iServerID = 36
         {
            Send(self,@ReachedExit,#who=what);
         }
      }

      propagate;
   }

   ReachedExit(who=$)
   {
      Send(who,@MsgSendUser,#message_rsc=reached_end_lightning_prism);
      Post(Send(SYS,@FindRoomByNum,#num=RID_DESERTBRIDGE2),@Teleport,#what=who);
      return;
   }

   ReqSpellCast(who = $, oSpell = $)
   {
      local iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID;

      if IsClass(oSpell,&DeathRift)
         OR IsClass(oSpell,&PortalOfLife)
      {
         return FALSE;
      }

      if IsClass(oSpell,&Phase)
      {
         if NOT IsClass(who,&Player)
         {
            propagate;
         }

         Post(who,@MsgSendUser,#message_rsc=lightning_prism_phase_out);
         Post(Send(SYS,@FindRoomByNum,#num=RID_WAYLAYOASIS),
               @Teleport,#what=who);
         return FALSE;
      }

      propagate;
   }
   
   OverrideDeathFunction(who=$,what=$,stroke_obj=$)
   {
      local oAfterlife, bDrop, oRoom, iRow, iCol, iFine_Row, iFine_Col, iAngle, iRoom,
            oBody, lReagentBagContents, lInventoryContents, lItems, i, oSoldierShield;

      Send(who,@ClearStance);

      % Stop any rescue attempts that were going on.
      Send(who,@CancelRescue);
      Send(who,@RemoveAllEnchantments,#report=FALSE);
      
      Send(who,@SetDeathTime,#iTime=GetTime());

      % Grab the location of the deceased.
      % Might need to grab the old location if logged off.

      if Send(who,@IsLoggedOn)
      {
         oRoom = Send(who,@GetOwner);
         iRow = Send(who,@GetRow);
         iCol = Send(who,@GetCol);
         iFine_Row = Send(who,@GetFineRow);
         iFine_Col = Send(who,@GetFineCol);
         iAngle = Send(who,@GetAngle);
         iRoom = Send(Send(who,@GetOwner),@GetRoomNum);
      }
      else
      {
         iRoom = Send(who,@GetSaveRoom);
         oRoom = Send(SYS,@FindRoomByNum,#num=iRoom);
         iRow = Send(who,@GetSaveRow);
         iCol = Send(who,@GetSaveCol);
         iFine_Row = Send(who,@GetSaveFineRow);
         iFine_Col = Send(who,@GetSaveFineCol);
         iAngle = Send(who,@GetSaveAngle);
      }

      % Record-keeping. Keep this before the token check,
      % so we can give proper message.
      Send(SYS,@UserKilled,#what=who,#killer=what,#oRoom=oRoom,#stroke_obj=stroke_obj);
      Send(Send(SYS,@GetStatistics),@PlayerDiedCounter);

      % Create the corpse.
      if what <> $
         AND IsClass(what,&User)
      {
         oBody = Send(who,@CreateCorpse,#oPlayerKiller=what);
      }
      else
      {
         oBody = Send(who,@CreateCorpse);
      }
      Send(who,@AddCorpse,#corpse=oBody);

      Send(oRoom,@NewHold,#what=oBody,#new_row=iRow,#new_col=iCol,
            #fine_row=iFine_Row,#fine_col=iFine_Col,#new_angle=iAngle);

      bDrop = TRUE;
      % Start losing stuff if applicable.
      if bDrop
      {
         lReagentBagContents = Send(who,@GetReagentBagContents);
         if lReagentBagContents <> $
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive),lReagentBagContents];
         }
         else
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive)];
         }

         foreach lItems in lInventoryContents
         {
            foreach i in lItems
            {
               % Let the item know we died, in case it does something special.
               Send(i,@OwnerKilled);

               if Send(i,@DropOnDeath)
               {
                  if Send(oRoom,@ReqNewHold,#what=i,#new_row=iRow,#new_col=iCol)
                  {
                     Send(oBody,@NewHold,#what=i);
                  }
               }
            }
         }

         Post(who,@EvaluatePKStatus);

         % Let SoldierShields know we died. It handles itself as appropriate.
         oSoldierShield = Send(who,@FindUsing,#what=&SoldierShield);
         if oSoldierShield <> $
         {
            Send(oSoldierShield,@OwnerDied,#what=what);
         }
      }

      % Give out your dying scream.
      if Send(who,@GetGender) = GENDER_FEMALE
      {
         i = Send(who,@GetFemaleDeathWav);
      }
      else
      {
         i = Send(who,@GetMaleDeathWav);
      }

      Send(oRoom,@SomethingWaveRoom,#what=oBody,#wave_rsc=i);
      if Send(who,@IsLoggedOn)
      {
         Send(who,@WaveSendUser,#what=who,#wave_rsc=i);
      }

      Send(who,@SetHealth,#amount=1);

      Send(who,@NewHealth);
      Send(who,@NewMana);
      Send(who,@NewVigor);
      
      Send(who,@SetDeathCost,#DeathCost=Send(Send(SYS,@GetDesertRoomMaintenance),@GetDeathCost),#bOverride=TRUE);
      Send(who,@ApplyDeathPenalties);

      % Refresh the client with what's really going on.
      if Send(who,@IsLoggedOn)
      {
         Send(who,@ToCliStats,#group=1);
         Send(who,@ToCliStats,#group=2);
         Send(who,@ToCliStats,#group=3);
         Send(who,@ToCliStats,#group=4);

         % Wake up with red foggy hangover.
         Send(who,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=5000);
      }
      
      oAfterlife = Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES);
      Send(oAfterlife,@Teleport,#what=who);
      return;
   }

   OverridesDeathAllowPhasing()
   {
      return TRUE;
   }

   GetRegion()
   {
      return RID_DESERT;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
