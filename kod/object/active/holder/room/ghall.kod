% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GuildHall is Room

constants:

   include blakston.khd

   STATUS_UNOWNED = 0
   STATUS_OKAY = 3
   STATUS_RAIDED = 1
   STATUS_CONQUERED = 2

   SHIELD_OFF = 1
   SHIELD_ON = 2

   % real value, 10 minutes
   CONQUER_DELAY = 600000
   % one hour
   CONQUER_RENT_DELAY = 3600000

   PURCHASE_MODIFIER = 5000
   RENT_MODIFIER = 50

resources:

   include ghall.lkod

   guildhall_hotplate_firstpass = "Player passed first check."
   guildhall_hotplate = "Player just hit hotplate #%i."
   guildhall_entered_legally = "Guild hall just entered legally."
   guildhall_muffled = "You hear muffled conversation."
   guildhall_cant_flip = \
      "Nothing you do seems to make this device do anything."

   guildhall_being_raided = "~B%s, home of %s%q, is being raided by %s%q!"
   guildhall_player_raided = "~B%s, home of %s%q, is being raided by %s%s!"
   guildhall_raided = \
      "~BAs you enter the guild hall, you notice that its magical defenses "
      "are down!"
   guildhall_being_raided_ally = "~B%s, home of %s%q, is being raided by %s%q!"
   guildhall_shield_lower = \
      "~BThe mana field around you fluctuates as %s%s lowers the guild "
      "hall's magical defenses!"
   guildhall_shield_raise = \
      "~B%s%s reactivates the guild hall's magical defenses."
   guildhall_shield_lower_raider = \
      "~BYou have lowered the guild hall's defenses, meaning that anyone can "
      "enter the guild hall.  If you do not reactivate the shield, the guild "
      "hall may be declared conquered!"

   guildhall_uneasiness = \
      "~BYou experience a vague feeling of uneasiness, as if your hall may "
      "not be safe."

   guildhall_default_password = "aardvark"

   guildhall_no_guild = \
      "You may not rent a guild hall unless you belong to a guild!"
   guildhall_not_mature = \
      "Your guild is not yet mature, and may not yet rent a guild hall."
   guildhall_already_has = \
      "You may not rent a new guild hall until you abandon your current guild "
      "hall!"
   guildhall_already_rented = "Your guild is already renting this guild hall!"

   guildhall_conquered = "~B%s, home of %s%q, has been conquered!"
   guildhall_conquerer = \
      "~B%s, home of %s%q, has been conquered by %s%q!\nFor a short time, "
      "Frular will rent it to you and only you."
   guildhall_conquerer_unguilded = \
      "~B%s, home of %s%q, has been conquered by %s%s!"

   guildhall_new_password = "~B%s's password has been changed."

   guildhall_cant_open = \
      "%s's magic defenses prevent you from opening the outer door."
   guildhall_new_occupants = "~B%s has been rented to new owners."
   guildhall_someone_rented = "Someone has already rented this guild hall."

   guildhall_newsball = "news"
   guildhall_newsdesc = "This is the latest guild news."
   
   cannot_conveyance_msg = \
      "The guild hall's innate defenses prevent you from casting conveyance!"

   cannot_movement_spell_msg = \
      "The guild hall's innate defenses keep you too grounded to cast a movement spell!"

   guildhall_sound_down = shielddn.wav
   guildhall_sound_up = shieldup.wav

   guildhall_music = ltlgirl.mp3

   guildhall_entrancedoor_open_sound = doorrsup.wav
   guildhall_entrancedoor_close_sound = doordown.wav
   
classvars:

   viNews_row
   viNews_col
   viNews_finerow
   viNews_finecol

   viFoyer_north
   viFoyer_south
   viFoyer_east
   viFoyer_west

   viLever_row
   viLever_col
   viLever_fine_row = 32
   viLever_fine_col = 32

   % Quality is the overall guildhall quality, ranges from 1 to 10
   viQuality = 6

   viPermanent_flags = ROOM_SANCTUARY % | ROOM_SAFELOGOFF
   viTerrain_type = TERRAIN_GUILDHALL

   vrNewsdesc = guildhall_newsdesc

   viInner_teleport_row = $
   viInner_teleport_col = $

   % Player can only enter the guild hall if he enters in this amount of time.
   viSeconds_til_close = 20

   vrEntrancedoor_open_sound = guildhall_entrancedoor_open_sound
   vrEntrancedoor_close_sound = guildhall_entrancedoor_close_sound
   vrSecretdoor_open_sound = guildhall_entrancedoor_open_sound
   vrSecretdoor_close_sound = guildhall_entrancedoor_close_sound

   % For guildhalls with the chest in the foyer, this will be TRUE.
   % Default FALSE.
   vbChestInFoyer = FALSE
   
   viPortalOneRow = 0
   viPortalOneCol = 0
   viPortalOneFineRow = 0
   viPortalOneFineCol = 0
   viPortalOneAngle = 0
   viPortalOneDestRID = 0
   viPortalOneDestRow = 0
   viPortalOneDestCol = 0
   viPortalOneDestFineRow = 0
   viPortalOneDestFineCol = 0
   viPortalOneDestAngle = 0
   vsPortalOneDesc = $
   viPortalOneGlowColor = LIGHT_PURPLE
   
   viPortalTwoRow = 0
   viPortalTwoCol = 0
   viPortalTwoFineRow = 0
   viPortalTwoFineCol = 0
   viPortalTwoAngle = 0
   viPortalTwoDestRID = 0
   viPortalTwoDestRow = 0
   viPortalTwoDestCol = 0
   viPortalTwoDestFineRow = 0
   viPortalTwoDestFineCol = 0
   viPortalTwoDestAngle = 0
   vsPortalTwoDesc = $
   viPortalTwoGlowColor = LIGHT_PURPLE
   
   viPortalThreeRow = 0
   viPortalThreeCol = 0
   viPortalThreeFineRow = 0
   viPortalThreeFineCol = 0
   viPortalThreeAngle = 0
   viPortalThreeDestRID = 0
   viPortalThreeDestRow = 0
   viPortalThreeDestCol = 0
   viPortalThreeDestFineRow = 0
   viPortalThreeDestFineCol = 0
   viPortalThreeDestAngle = 0
   vsPortalThreeDesc = $
   viPortalThreeGlowColor = LIGHT_PURPLE
   
   viPortalFourRow = 0
   viPortalFourCol = 0
   viPortalFourFineRow = 0
   viPortalFourFineCol = 0
   viPortalFourAngle = 0
   viPortalFourDestRID = 0
   viPortalFourDestRow = 0
   viPortalFourDestCol = 0
   viPortalFourDestFineRow = 0
   viPortalFourDestFineCol = 0
   viPortalFourDestAngle = 0
   vsPortalFourDesc = $
   viPortalFourGlowColor = LIGHT_PURPLE
   
   viPortalFiveRow = 0
   viPortalFiveCol = 0
   viPortalFiveFineRow = 0
   viPortalFiveFineCol = 0
   viPortalFiveAngle = 0
   viPortalFiveDestRID = 0
   viPortalFiveDestRow = 0
   viPortalFiveDestCol = 0
   viPortalFiveDestFineRow = 0
   viPortalFiveDestFineCol = 0
   viPortalFiveDestAngle = 0
   vsPortalFiveDesc = $
   viPortalFiveGlowColor = LIGHT_PURPLE
   
   viPortalSixRow = 0
   viPortalSixCol = 0
   viPortalSixFineRow = 0
   viPortalSixFineCol = 0
   viPortalSixAngle = 0
   viPortalSixDestRID = 0
   viPortalSixDestRow = 0
   viPortalSixDestCol = 0
   viPortalSixDestFineRow = 0
   viPortalSixDestFineCol = 0
   viPortalSixDestAngle = 0
   vsPortalSixDesc = $
   viPortalSixGlowColor = LIGHT_PURPLE
   
   viReliquaryOneRow = 0
   viReliquaryOneCol = 0
   viReliquaryOneFineRow = 0
   viReliquaryOneFineCol = 0
   
   viReliquaryTwoRow = 0
   viReliquaryTwoCol = 0
   viReliquaryTwoFineRow = 0
   viReliquaryTwoFineCol = 0
   
   viReliquaryThreeRow = 0
   viReliquaryThreeCol = 0
   viReliquaryThreeFineRow = 0
   viReliquaryThreeFineCol = 0
   
   viReliquaryFourRow = 0
   viReliquaryFourCol = 0
   viReliquaryFourFineRow = 0
   viReliquaryFourFineCol = 0
   
   viReliquaryFiveRow = 0
   viReliquaryFiveCol = 0
   viReliquaryFiveFineRow = 0
   viReliquaryFiveFineCol = 0
   
   viReliquarySixRow = 0
   viReliquarySixCol = 0
   viReliquarySixFineRow = 0
   viReliquarySixFineCol = 0
   
   % Fusing device rates go from 8 (worst) to 4 (best) 
   viShardFusingDeviceRow = 0
   viShardFusingDeviceCol = 0
   viShardFusingDeviceFineRow = 0
   viShardFusingDeviceFineCol = 0
   viShardFusingDeviceRate = 8
   
   % Shattering device rates go from 2 (worst) to 4 (best) 
   viShardShatteringDeviceRow = 0
   viShardShatteringDeviceCol = 0
   viShardShatteringDeviceFineRow = 0
   viShardShatteringDeviceFineCol = 0
   viShardShatteringDeviceRate = 2
   
   viFociOneRow = 0
   viFociOneCol = 0
   viFociOneFineRow = 0
   viFociOneFineCol = 0
   viFociOnePower = 0
   viFociOneRange = 2
   viFociOneSpellNum = SID_REJUVENATE
   
   viFociTwoRow = 0
   viFociTwoCol = 0
   viFociTwoFineRow = 0
   viFociTwoFineCol = 0
   viFociTwoPower = 0
   viFociTwoRange = 2
   viFociTwoSpellNum = SID_REJUVENATE
   
   viFociThreeRow = 0
   viFociThreeCol = 0
   viFociThreeFineRow = 0
   viFociThreeFineCol = 0
   viFociThreePower = 0
   viFociThreeRange = 2
   viFociThreeSpellNum = SID_REJUVENATE

   viBartenderRow = 0
   viBartenderCol = 0
   viBartenderFineRow = 0
   viBartenderFineCol = 0
   viBartenderRate = 100
   
   viMarketRow = 0
   viMarketCol = 0
   viMarketFineRow = 0
   viMarketFineCol = 0
   viMarketRate = 100

properties:

   ptEntrance = $

   % This is a list of the coordinates for the area containing
   % the guild hall entrance door. Used for removing players
   % from it when it closes.
   plEntrance = $

   prMusic = guildhall_music

   piConquer_delay = CONQUER_DELAY
   piConquer_rent_delay = CONQUER_RENT_DELAY

   piOutside_factor = OUTDOORS_NONE
   piBaselight = LIGHT_NICE

   poGuild_owner = $
   poConquerer = $
   poOld_guild = $

   piStatus = STATUS_UNOWNED
   poShield_lever = $

   pbSecretDoorOpen = FALSE

   % pbBetrayed = TRUE anytime a guild member is the conquerer.
   pbBetrayed = FALSE

   % If this is true, a single player took over the guild hall (he probably
   % had help)
   pbMercenary_Conquered = FALSE

   ptWarning = $
   ptConquer = $

   plGuild_doors = $
   prNewsball = $

   piLastDoorOpen = 0

   pbRentable = TRUE
   
   poTotemOne = $
   poTotemTwo = $
   poTotemThree = $
   
   piGuildHallMeditateEffiency = 100
   % Some halls only help certain skills, spells, or schools
   piSpecialGuildHallMeditateEfficiency = 100

messages:

   Constructor()
   {
      local lGuilds, i;

      prNewsBall = vrName;

      % Hall adds itself to a list in system for the UI to use.
      Send(SYS,@NewGuildHallToList,#hall=self);

      % Must prevent a recreated guild hall from forgetting it's guild owner.
      lGuilds = Send(SYS,@GetGuilds);
      foreach i in lGuilds
      {
         if Send(i,@GetGuildhallNum) = piRoom_num
         {
            poGuild_owner = i;
            piStatus = STATUS_OKAY;
         }
      }

      propagate;
   }

   % This works for standard rectangle guildhall foyers. Other configurations
   % need to override this.
   IsMoveOK(old_row = 1, old_col = 1, old_fine_row = 1, old_fine_col = 1,
            new_row = 1, new_col = 1, new_fine_row = 1, new_fine_col = 1,
            who=$)
   {
      % Hardcoded movement check, prevent hacking into hall.
      % Basic requirement door must not be open
      if ptEntrance = $
      {
         if Send(self,@InFoyer,#iRow=old_row,#iCol=old_col,
                  #iFineRow=old_fine_row,#iFineCol=old_fine_col)
         {
            % We're in the foyer. Check if we're trying to move into the hall.
            if NOT Send(self,@InFoyer,#iRow=new_row,#iCol=new_col,
                        #iFineRow=new_fine_Row,#iFineCol=new_fine_col)
            {
               % Bad player! Fail the attempt.
               Debug("ALERT!",Send(who,@GetTrueName),who,
                     "tried to move through closed Guild Hall door ",
                     Send(self,@GetName)," from ",old_row,old_col,old_fine_row,
                     old_fine_col," to ",new_row,new_col,new_fine_row,
                     new_fine_col,". Last door opening was ",
                     GetTime() - Send(self,@GetDoorTimeStamp),
                     " seconds ago.");

               return FALSE;
            }
         }
      }

      return TRUE;
   }

   CreateStandardObjects()
   "Two objects that all guild halls have:  newsball and lever."
   {
      local oNews;

      Send(self,@CreateShieldLever);

      oNews = Send(SYS,@FindNewsByNum,#num=piRoom_num);

      if oNews = $
      {
         oNews = Create(&News,#nid=piRoom_num,#name=prNewsball,
                        #desc=vrNewsdesc);
      }

      Send(self,@NewHold,#what=oNews,#new_row=viNews_row,#new_col=viNews_col,
            #fine_row=viNews_finerow,#fine_col=viNews_finecol);
      
      Send(self,@PlaceUpgradeObjects);

      propagate;
   }
   
   PlaceUpgradeObjects()
   {
      if viBartenderRow > 0
      {
         Send(self,@NewHold,#what=Create(&GuildHallBartender),#new_row=viBartenderRow,
                                                     #new_col=viBartenderCol,
                                                     #fine_row=viBartenderFineRow,
                                                     #fine_col=viBartenderFineCol);
      }
      %if viMarketRow > 0
      %{
      %   Send(self,@NewHold,#what=Create(&GuildHallMarket),#new_row=viMarketRow,
      %                                               #new_col=viMarketCol,
      %                                               #fine_row=viMarketFineRow,
      %                                               #fine_col=viMarketFineCol);
      %}

      if viReliquaryOneRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryOneRow,
                                                     #new_col=viReliquaryOneCol,
                                                     #fine_row=viReliquaryOneFineRow,
                                                     #fine_col=viReliquaryOneFineCol);
      }
      if viReliquaryTwoRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryTwoRow,
                                                    #new_col=viReliquaryTwoCol,
                                                    #fine_row=viReliquaryTwoFineRow,
                                                    #fine_col=viReliquaryTwoFineCol);
      }
      if viReliquaryThreeRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryThreeRow,
                                                    #new_col=viReliquaryThreeCol,
                                                    #fine_row=viReliquaryThreeFineRow,
                                                    #fine_col=viReliquaryThreeFineCol);
      }
      if viReliquaryFourRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryFourRow,
                                                    #new_col=viReliquaryFourCol,
                                                    #fine_row=viReliquaryFourFineRow,
                                                    #fine_col=viReliquaryFourFineCol);
      }
      if viReliquaryFiveRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryFiveRow,
                                                    #new_col=viReliquaryFiveCol,
                                                    #fine_row=viReliquaryFiveFineRow,
                                                    #fine_col=viReliquaryFiveFineCol);
      }
      if viReliquarySixRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquarySixRow,
                                                    #new_col=viReliquarySixCol,
                                                    #fine_row=viReliquarySixFineRow,
                                                    #fine_col=viReliquarySixFineCol);
      }
      if viShardFusingDeviceRow > 0
      {
         Send(self,@NewHold,#what=Create(&ShardFusingDevice,#iInputRequired=viShardFusingDeviceRate),
                                                            #new_row=viShardFusingDeviceRow,
                                                            #new_col=viShardFusingDeviceCol,
                                                            #fine_row=viShardFusingDeviceFineRow,
                                                            #fine_col=viShardFusingDeviceFineCol);
      }
      if viShardShatteringDeviceRow > 0
      {
         Send(self,@NewHold,#what=Create(&ShardShatteringDevice,#iOutputCreated=viShardShatteringDeviceRate),
                                                            #new_row=viShardShatteringDeviceRow,
                                                            #new_col=viShardShatteringDeviceCol,
                                                            #fine_row=viShardShatteringDeviceFineRow,
                                                            #fine_col=viShardShatteringDeviceFineCol);
      }

      if viPortalOneRow > 0
      {
         Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalOneDestRID,
                                                 #dest_row=viPortalOneDestRow,
                                                 #dest_col=viPortalOneDestCol,
                                                 #dest_angle=viPortalOneDestAngle,
                                                 #dest_fine_row=viPortalOneDestFineRow,
                                                 #dest_fine_col=viPortalOneDestFineCol,
                                                 #desc=vsPortalOneDesc,
                                                 #glow_color=viPortalOneGlowColor),
                                                 #new_row=viPortalOneRow,
                                                 #new_col=viPortalOneCol,
                                                 #fine_row=viPortalOneFineRow,
                                                 #fine_col=viPortalOneFineCol,
                                                 #new_angle=viPortalOneAngle);
      }
      if viPortalTwoRow > 0
      {
         Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalTwoDestRID,
                                                 #dest_row=viPortalTwoDestRow,
                                                 #dest_col=viPortalTwoDestCol,
                                                 #dest_angle=viPortalTwoDestAngle,
                                                 #dest_fine_row=viPortalTwoDestFineRow,
                                                 #dest_fine_col=viPortalTwoDestFineCol,
                                                 #desc=vsPortalTwoDesc,
                                                 #glow_color=viPortalTwoGlowColor),
                                                 #new_row=viPortalTwoRow,
                                                 #new_col=viPortalTwoCol,
                                                 #fine_row=viPortalTwoFineRow,
                                                 #fine_col=viPortalTwoFineCol,
                                                 #new_angle=viPortalTwoAngle);
      }
      if viPortalThreeRow > 0
      {
         Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalThreeDestRID,
                                                 #dest_row=viPortalThreeDestRow,
                                                 #dest_col=viPortalThreeDestCol,
                                                 #dest_angle=viPortalThreeDestAngle,
                                                 #dest_fine_row=viPortalThreeDestFineRow,
                                                 #dest_fine_col=viPortalThreeDestFineCol,
                                                 #desc=vsPortalThreeDesc,
                                                 #glow_color=viPortalThreeGlowColor),
                                                 #new_row=viPortalThreeRow,
                                                 #new_col=viPortalThreeCol,
                                                 #fine_row=viPortalThreeFineRow,
                                                 #fine_col=viPortalThreeFineCol,
                                                 #new_angle=viPortalThreeAngle);
      }
      if viPortalFourRow > 0
      {
         Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalFourDestRID,
                                                 #dest_row=viPortalFourDestRow,
                                                 #dest_col=viPortalFourDestCol,
                                                 #dest_angle=viPortalFourDestAngle,
                                                 #dest_fine_row=viPortalFourDestFineRow,
                                                 #dest_fine_col=viPortalFourDestFineCol,
                                                 #desc=vsPortalFourDesc,
                                                 #glow_color=viPortalFourGlowColor),
                                                 #new_row=viPortalFourRow,
                                                 #new_col=viPortalFourCol,
                                                 #fine_row=viPortalFourFineRow,
                                                 #fine_col=viPortalFourFineCol,
                                                 #new_angle=viPortalFourAngle);
      }
      if viPortalFiveRow > 0
      {
         Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalFiveDestRID,
                                                 #dest_row=viPortalFiveDestRow,
                                                 #dest_col=viPortalFiveDestCol,
                                                 #dest_angle=viPortalFiveDestAngle,
                                                 #dest_fine_row=viPortalFiveDestFineRow,
                                                 #dest_fine_col=viPortalFiveDestFineCol,
                                                 #desc=vsPortalFiveDesc,
                                                 #glow_color=viPortalFiveGlowColor),
                                                 #new_row=viPortalFiveRow,
                                                 #new_col=viPortalFiveCol,
                                                 #fine_row=viPortalFiveFineRow,
                                                 #fine_col=viPortalFiveFineCol,
                                                 #new_angle=viPortalFiveAngle);
      }
      if viPortalSixRow > 0
      {
         Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalSixDestRID,
                                                 #dest_row=viPortalSixDestRow,
                                                 #dest_col=viPortalSixDestCol,
                                                 #dest_angle=viPortalSixDestAngle,
                                                 #dest_fine_row=viPortalSixDestFineRow,
                                                 #dest_fine_col=viPortalSixDestFineCol,
                                                 #desc=vsPortalSixDesc,
                                                 #glow_color=viPortalSixGlowColor),
                                                 #new_row=viPortalSixRow,
                                                 #new_col=viPortalSixCol,
                                                 #fine_row=viPortalSixFineRow,
                                                 #fine_col=viPortalSixFineCol,
                                                 #new_angle=viPortalSixAngle);
      }

      return;
   }

   CreateShieldLever()
   {
      if piStatus = STATUS_OKAY
      {
         poShield_lever = Create(&GuildLever,#status=2);
      }
      else
      {
         poShield_lever = Create(&guildLever);
      }

      Send(self,@NewHold,#what=poShield_lever,
            #new_row=viLever_row,#new_col=viLever_col,
            #fine_row=viLever_fine_row,#fine_col=viLever_fine_col);

      return;
   }

   NewHold(what=$)
   "Don't let anyone log in anyplace but the foyer!"
   {
      If IsClass(what,&Player)
      {
         % Post a message to be sure that it does this after
         % the guy's stats are correctly set.
         Post(self,@ValidEntry,#what=what);

         if piStatus = STATUS_RAIDED
         {
            Send(what,@MsgSendUser,#message_rsc=guildhall_raided);
         }
      }

      propagate;
   }

   ValidEntry(what=$)
   {
      % If they can't open the door, make sure they're outside the foyer
      if NOT Send(self,@CanEnter,#who=what)
      {
         Send(self,@Teleport,#what=what,#foyer=TRUE);
      }

      return;
   }

   TimeStampDoor()
   {
      piLastDoorOpen = GetTime();

      return;
   }

   GetDoorTimeStamp()
   {
      return piLastDoorOpen;
   }

   EnteredInTimeWindow()
   {
      if (GetTime() - piLastDoorOpen) > viSeconds_til_close
      {
         return FALSE;
      }

      return TRUE;
   }

   ClaimGuildHall(oGuild = $, rep = $,password = $)
   {
      local i, thisGuild;

      if rep = $
      {
         Debug("Getting to ClaimGuildHall with no rep declared!");

         return FALSE;
      }

      if poGuild_Owner <> $
      {
         return FALSE;
      }

      if oGuild = $
      {
         Send(rep,@MsgSendUser,#message_rsc=guildhall_no_guild);

         return FALSE;
      }

      if NOT Send(oGuild,@IsMature)
      {
         Send(rep,@MsgSendUser,#message_rsc=guildhall_not_mature);

         return FALSE;
      }

      if Send(oGuild,@GetGuildHall) = self
      {
         Send(rep,@MsgSendUser,#message_rsc=guildhall_already_rented);

         return FALSE;
      }

      if Send(oGuild,@GetGuildHall) <> $
      {
         Send(rep,@MsgSendUser,#message_rsc=guildhall_already_has);

         return FALSE;
      }

      piStatus = STATUS_OKAY;

      if ptConquer <> $
      {
         DeleteTimer(ptConquer);
         ptConquer = $;
      }

      Send(self,@DefensesUp);

      poGuild_Owner = oGuild;

      pbBetrayed = FALSE;
      pbMercenary_Conquered = FALSE;
      poOld_guild = poGuild_owner;

      Send(oGuild,@SetGuildHall,#RID=piRoom_num,#name=vrName,
           #password=password);

      foreach i in plPassive
      {
         if IsClass(First(i),&News)
         {
            Send(First(i),@DeleteAllMessages);
         }
      }

      foreach i in plActive
      {
         if IsClass(First(i),&Player)
         {
            if Send(First(i),@GetGuild) = $
               OR Send(First(i),@GetGuild) <> oGuild
            {
               Send(First(i),@MsgSendUser,#message_rsc=guildhall_new_occupants,
                     #parm1=vrName);
               Post(self,@Teleport,#what=First(i),#foyer=TRUE);
            }
         }
      }

      return TRUE;
   }

   ResetGuildHall()
   "Checks are all done in gcid_abandon."
   {
      local i;

      pbMercenary_conquered = FALSE;
      pbBetrayed = FALSE;
      poGuild_owner = $;
      poOld_guild = $;
      piStatus = STATUS_UNOWNED;
      poConquerer = $;

      Send(self,@DefensesDown);

      foreach i in plPassive
      {
         if IsClass(First(i),&News)
         {
            Send(First(i),@DeleteAllMessages);
         }
      }

      if ptConquer <> $
      {
         DeleteTimer(ptConquer);
         ptConquer = $;
      }

      if ptWarning <> $
      {
         DeleteTimer(ptWarning);
         ptWarning = $;
      }

      return;
   }

   GetQuality()
   "This number is used to determine initial 'down payment' and spread"
   "out rent cost."
   {
      return viQuality;
   }

   GetPurchaseValue(who=$)
   "This returns the value that the GuildCreator will sell the guild to."
   "When the guild has been conquered, he will only sell the guild hall to "
   "someone in the Conquering guild."
   {
      if NOT pbRentable
      {
         return -1;
      }

      if piStatus = STATUS_UNOWNED
      {
         return viQuality * PURCHASE_MODIFIER;
      }

      if (piStatus = STATUS_CONQUERED AND Send(who,@GetGuild) = poConquerer)
         AND NOT pbBetrayed
      {
         return (viQuality * PURCHASE_MODIFIER)/2;
      }

      if piStatus <> STATUS_RAIDED AND piStatus <> STATUS_OKAY
      {
         if (pbBetrayed AND Send(who,@GetGuild) <> poConquerer)
         {
            return viQuality * PURCHASE_MODIFIER;
         }

         if (pbMercenary_conquered AND Send(who,@GetGuild) <> poOld_Guild)
         {
            return viQuality * PURCHASE_MODIFIER;
         }
      }

      % return -1 if this player cannot rent this guild hall.
      return -1;
   }

   GetRentValue()
   "This is an HOURLY rate."
   {
      local iValue;

      iValue = viQuality * RENT_MODIFIER;

      % Twice the cost on Sacred Haven.
      if NOT Send(SYS,@isPKAllowed)
      {
         iValue = iValue * 2;
      }

      return iValue;
   }

   OpenSecretDoor()
   "Every guild hall must have this defined!  Or it's password will be "
   "useless!"
   {
      Debug("Guild hall does not have individual secret door code written!!");

      return;
   }

   AreDefensesDown()
   % Return whether the guild defenses are down, i.e. someone is trying to conquer
   % the hall.
   {
      return piStatus = STATUS_RAIDED;
   }

   GuildLeverFlipped(who=$)
   {
      local i, j, allies, members, bFound, conq_rsc, oldstatus;

      oldstatus = piStatus;

      if piStatus = STATUS_CONQUERED OR piStatus = STATUS_UNOWNED
      {
         % This guild hall can't be raided right now.
         Send(who,@MsgSendUser,#message_rsc=guildhall_cant_flip);

         return;
      }

      if NOT Send(self,@CanRaidGuildhall,#who=who)
      {
         % The person isn't worthy, or this server doesn't allow it at all,
         %  or it happened too recently for the server to allow it yet.
         Send(who,@MsgSendUser,#message_rsc=guildhall_cant_flip);

         return;
      }

      % Report the attempt.
      ClearTempString();
      AppendTempString("~B~g[~n");
      AppendTempString("Guild switch in ");
      AppendTempString(Send(self,@GetName));
      AppendTempString(" flipped by ");
      AppendTempString(Send(who,@GetTrueName));

      if piStatus = STATUS_OKAY
      {
         AppendTempString(" to lower defenses");
         Debug("Guild defenses in",Send(self,@GetName),"lowered by",
               Send(who,@GetTrueName),who);
      }

      if piStatus = STATUS_CONQUERED
      {
         AppendTempString(" to raise defenses");
      }

      AppendTempString("~B~g]");

      Send(SYS,@MailSrGuardian,#from=self,#subject=Send(who,@GetTrueName),
            #body=getTempString());
      ClearTempString();

      % Raiding or saving the guildhall.
      % REVIEW: break this up into separate handlers.

      if piStatus = STATUS_OKAY
      {
         % Someone is raiding the guildhall!

         poConquerer = Send(who,@GetGuild);

         if poConquerer = $
         {
            poConquerer = who;
            pbMercenary_conquered = TRUE;
         }
         else
         {
            if poConquerer = poGuild_owner
            {
               pbBetrayed = TRUE;
            }
         }

         piStatus = STATUS_RAIDED;

         if ptConquer <> $
         {
            DeleteTimer(ptConquer);
            ptConquer = $;
         }

         ptConquer = CreateTimer(self,@ConquerTimer,piConquer_delay);

         Send(self,@DefensesDown);

         foreach i in plActive
         {
            if IsClass(First(i),&Player)
            {
               if First(i) = who
               {
                  Send(First(i),@MsgSendUser,
                        #message_rsc=guildhall_shield_lower_raider);
               }
               else
               {
                  Send(First(i),@MsgSendUser,
                        #message_rsc=guildhall_shield_lower,
                        #parm1=Send(who,@GetIndef),#parm2=Send(who,@GetName));
               }
            }
         }

         if IsClass(poConquerer,&Player)
            OR Send(poGuild_owner,@IsEnemy,#otherguild=poConquerer)
         {
            if IsClass(poConquerer,&Player)
            {
               conq_rsc = guildhall_player_raided;
            }
            else
            {
               conq_rsc = guildHall_being_raided;
            }

            members = Send(poGuild_owner,@GetMemberList);
            foreach i in members
            {
               Send(First(i),@MsgSendUser,#message_rsc=conq_rsc,
                     #parm1=vrName,
                     #parm2=Send(poGuild_owner,@GetDef),
                     #parm3=Send(poGuild_owner,@GetName),
                     #parm4=Send(poConquerer,@GetDef),
                     #parm5=Send(poConquerer,@GetName));
            }

            allies = Send(poGuild_owner,@GetAllyList);
            foreach j in allies
            {
               members = Send(j,@GetMemberList);
               foreach i in members
               {
                  Send(First(i),@MsgSendUser,#message_rsc=conq_rsc,
                        #parm1=vrName,
                        #parm2=Send(poGuild_owner,@GetDef),
                        #parm3=Send(poGuild_owner,@GetName),
                        #parm4=Send(poConquerer,@GetDef),
                        #parm5=Send(poConquerer,@GetName));
               }
            }
         }
         else
         {
            % Delay the warning for non-enemy conquering guilds.
            ptWarning = CreateTimer(self,@WarnGuildMembers,
                                    Random(60000,180000));
         }

         return;
      }
    
      if piStatus = STATUS_RAIDED
      {
         % Someone is rescuing the guild hall!

         foreach i in plActive
         {
            if IsClass(First(i),&Player)
            {
               Send(First(i),@MsgSendUser,#message_rsc=guildhall_shield_raise,
                     #parm1=Send(who,@GetIndef),#parm2=Send(who,@GetName));
            }
         }

         piStatus = STATUS_OKAY;
         pbBetrayed = FALSE;

         if ptWarning <> $
         {
            DeleteTimer(ptWarning);
            ptWarning = $;
         }

         if ptConquer <> $
         {
            DeleteTimer(ptConquer);
            ptConquer = $;
         }

         Send(self,@DefensesUp);

         poConquerer = $;
         pbMercenary_Conquered = FALSE;
         pbBetrayed = FALSE;

         return;
      }

      return;
   }

   CanRaidGuildhall(who=$)
   "Returns TRUE if who can raid the guild hall, FALSE otherwise."
   {
      local oRaidingGuild;

      if (NOT Send(SETTINGS_OBJECT, @GuildHallRaidsEnabled))
         OR NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         return FALSE;
      }

      return TRUE;
   }

   ConquerTimer()
   "If this is hit, then check to see if the guild hall is conquered."
   {
      local members, i, oGuild;

      ptConquer = $;

      if piStatus = STATUS_RAIDED and poConquerer <> $
      {
         piStatus = STATUS_CONQUERED;

         if IsClass(poConquerer,&Guild)
         {
            if poConquerer = poGuild_owner
            {
               pbBetrayed = TRUE;
            }
            else
            {
               Send(poConquerer,@SetLastGuildhallRaid);
               members = Send(poConquerer,@GetMemberList);
               foreach i in members
               {
                  Send(First(i),@MsgSendUser,#message_rsc=guildhall_conquerer,
                        #parm1=vrName,
                        #parm2=Send(poGuild_owner,@GetDef),
                        #parm3=Send(poGuild_owner,@GetName),
                        #parm4=Send(poConquerer,@GetDef),
                        #parm5=Send(poConquerer,@GetName));
               }
            }
         }
         else
         {
            Send(poConquerer,@MsgSendUser,#message_rsc=guildhall_conquerer,
                  #parm1=vrName,
                  #parm2=Send(poGuild_owner,@GetDef),
                  #parm3=Send(poGuild_owner,@GetName),
                  #parm4=Send(poConquerer,@GetDef),
                  #parm5=Send(poConquerer,@GetName));
         }
         foreach i in plActive
         {
            if IsClass(First(i),&Player)
            {
               oGuild = Send(First(i),@GetGuild);
               if (oGuild = $ AND First(i) <> poCOnquerer)
                  OR (oGuild <> poConquerer AND oGuild <> poGuild_Owner
                     AND NOT Send(poGuild_owner,@IsAlly,#otherguild=oGuild))
               {
                  Send(First(i),@MsgSendUser,#message_rsc=guildhall_conquered,
                        #parm1=vrName,#parm2=Send(poGuild_owner,@GetDef),
                        #parm3=Send(poGuild_owner,@GetName));
                  Send(self,@OpenSecretDoor);
               }
            }
         }
         foreach i in plPassive
         {
            if IsClass(First(i),&News)
            {
               Send(First(i),@DeleteAllMessages);
            }
         }

         Send(poGuild_owner,@GuildHallConquered,#name=vrName,
               #betrayed=pbBetrayed);
         poGuild_owner = $;
         ptConquer = CreateTimer(self,@ConquerTimer,piConquer_rent_delay);
      }
      else
      {
         % The guild hall was conquered, but was unclaimed by the conquerors.
         % The guild hall is now available for anyone to rent again.

         if piStatus = STATUS_CONQUERED
         {
            poGuild_owner = $;
            poOld_guild = $;
            ptConquer = $;
            pbMercenary_conquered = FALSE;
            pbBetrayed = FALSE;
            piStatus = STATUS_UNOWNED;
         }
         else
         {
            Debug("ConquerTimer called when status is neither raided nor "
                  "conquered!");
         }
      }

      return;
   }

   DefensesUp()
   "This is used by individual guild halls to perform special actions, such "
   "as guild hall 6's lowering maze."
   {
      if poShield_lever<> $
      {
         Send(poShield_lever,@ChangeGraphic,#new_state=SHIELD_ON);
      }

      Send(self,@SomethingWaveRoom,#wave_rsc=guildhall_sound_up);

      return;
   }

   DefensesDown()
   "In general, this is used only to undo DefensesUp."
   {
      if poShield_lever <> $
      {
         Send(poShield_lever,@ChangeGraphic,#new_state=SHIELD_OFF);
      }

      Send(self,@SomethingWaveRoom,#wave_rsc=guildhall_sound_down);

      return;
   }

   WarnGuildMembers()
   {
      local i, members;

      ptWarning = $;

      members = Send(poGuild_owner,@GetMemberList);
      foreach i in members
      {
         if Send(First(i),@GetOwner) <> self
         {
            Send(First(i),@MsgSendUser,#message_rsc=guildhall_uneasiness);
         }
      }

      return;
   }

   InFoyer(who=$,iRow=$,iCol=$,iFineRow=$,iFineCol=$)
   {
      if who <> $
      {
         if Send(who,@GetOwner) <> self
         {
            return FALSE;
         }

         iRow = Send(who,@GetRow);
         iCol = Send(who,@GetCol);
         iFineCol = Send(who,@GetFineCol);
         iFineRow = Send(who,@GetFineRow);
      }

      if iRow >= viFoyer_north AND iRow <= viFoyer_South
         AND iCol <= viFoyer_east AND iCol >= viFoyer_west
      {
         return TRUE;
      }

      return FALSE;
   }

   ReqSomethingAttack(what = $,victim = $,use_weapon = $,stroke_obj = $)
   "No one may attack through the door if it's closed."
   {
      if (what = $) or (victim = $)
      {
         propagate;
      }

      if Send(self,@InFoyer,#who=what) <> Send(self,@InFoyer,#who=victim)
      {
         if ptEntrance = $
         % If the door was closed recently - note that this treats the door
         % as closed the instant it starts closing - oh well.
         {
            if IsClass(what,&Player)
            {
               Send(what,@SendAttackOutOfRangeMessage,#what=victim,
                     #use_weapon=use_weapon,#stroke_obj=stroke_obj);
            }

            return FALSE;
         }
      }

      propagate;
   }

   ReqUseGuildChest(who=$)
   {
      if Send(self,@InFoyer,#who=who)
      {
         Debug("ALERT!  ",Send(who,@GetTrueName),who,
               "tried to use Guild Hall chest in GH ",
               Send(self,@GetName)," player coordinates ",
               Send(who,@GetRow),Send(who,@GetCol),
               Send(who,@GetFineRow),Send(who,@GetFineCol));

         return FALSE;
      }

      return TRUE;
   }

   SomeoneSaid(what = $,type = $,string = $,parm1 = $,parm2 = $,parm3 = $,
               parm4 = $, parm5 = $,parm6 = $,parm7 = $,parm8 = $)
   "If someone is in the foyer while you are in the guild hall proper, do "
   "not send them any conversation."
   {
      local i, each_obj;

      if what = $
      {
         propagate;
      }

      if IsClass(what,&Admin) AND stringEqual(string,"shatterlock")
      {
         Send(self,@OpenEntranceDoor);

         propagate;
      }

      if type = SAY_YELL OR NOT IsClass(what,&Player)
      {
         propagate;
      }

      foreach i in plActive
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);

         if Send(self,@SayRangeCheck,#talker=what,#hearer=each_obj)
         {
            if Send(self,@InFoyer,#who=what)
               = Send(self,@InFoyer,#who=each_obj)
            {
               Send(each_obj,@SomeoneSaid,#what=what,#type=type,#string=string,
                     #parm1=parm1,#parm2=parm2,#parm3=parm3,#parm4=parm4,
                     #parm5=parm5,#parm6=parm6,#parm7=parm7,#parm8=parm8);
            }
            else
            {
               Send(each_obj,@MsgSendUser,#message_rsc=guildhall_muffled);
            }
         }
      }

      if poGuild_owner <> $
         AND StringEqual(string,Send(poGuild_owner,@GetPassword))
         AND (Send(self,@InFoyer,#who=what) = vbChestInFoyer)
         AND NOT pbSecretDoorOpen
         AND type <> SAY_EMOTE
      {
         Send(self,@OpenSecretDoor);
      }

      return;
   }

   GetPassword()
   {
      return Send(poGuild_owner,@GetPassword);
   }

   SomethingTryGo(what=$, row=$, col=$)
   "Opens the guild outer doors, but only if you're a guildmember!"
   {
      local i;

      foreach i in plGuild_doors
      {
         if row = First(i) AND col = Nth(i,2)
         {
            % Check to see if the doors should open
            if piStatus = STATUS_OKAY
               AND NOT Send(self,@CanEnter,#who=what)
            {
               Send(what,@MsgSendUser,#message_rsc=guildhall_cant_open,
                    #parm1=vrName);

               return TRUE;
            }
            else
            {
               Send(self,@OpenEntranceDoor);

               return TRUE;
            }
         }
      }

      propagate;
   }

   CloseEntranceDoor()
   {
      % Players get 2 seconds of time while the door is
      % closing to move through it.
      ptEntrance = CreateTimer(self,@ClearDoor,2000);

      return;
   }

   ClearDoor(lDoor=$)
   "This is a function to make the necessary calls to clear players "
   "from the entrance door when it closes."
   {
      local i, lFound;

      if lDoor <> $
      {
         lFound = Send(self,@FindUsersInArea,#lArea=lDoor);
      }
      else
      {
         lFound = Send(self,@FindUsersInArea,#lArea=plEntrance);
      }

      if lFound <> $
      {
         foreach i in lFound
         {
            Send(self,@Teleport,#what=i,#foyer=TRUE);
         }
      }
      ptEntrance = $;

      return;
   }

   OpenEntranceDoorSound()
   {
      Send(self,@SomethingWaveRoom,#wave_rsc=vrEntrancedoor_open_sound);

      return;
   }

   CloseEntranceDoorSound()
   {
      Send(self,@SomethingWaveRoom,#wave_rsc=vrEntrancedoor_close_sound);

      return;
   }

   OpenSecretDoorSound()
   {
      Send(self,@SomethingWaveRoom,#wave_rsc=vrSecretdoor_open_sound); 

      return;
   }

   CloseSecretDoorSound()
   {
      Send(self,@SomethingWaveRoom,#wave_rsc=vrSecretdoor_close_sound); 

      return;
   }

   CanEnter(who=$)
   "Only guild members and their allies can enter the guild, but not their "
   "apprentices.  Also determines who can log off safely and remain inside "
   "the guild hall."
   {
      local oGuild;

      if poGuild_owner = $
      {
         return TRUE;
      }

      oGuild = Send(who,@GetGuild);

      if oGuild = poGuild_owner
         AND Send(oGuild,@GetRank,#who=who) >= RANK_SIR
      {
         return TRUE;
      }

      return FALSE;
   }

   Delete()
   {
      Send(SYS,@RemoveGuildHallFromList,#hall=self);

      poGuild_owner = $;
      poConquerer = $;
      poOld_guild = $;
      poShield_lever = $;
      plGuild_doors = $;

      if ptWarning <> $
      {
         DeleteTimer(ptWarning);
         ptWarning = $;
      }

      if ptConquer <> $
      {
         DeleteTimer(ptConquer);
         ptConquer = $;
      }

      propagate;
   }

   DefunctGuild(what=$)
   "Must delete all properties associated with a guild, if it should be "
   "deleted!"
   {
      if what = $
      {
         Debug(self,"got to defunct guild with no argument!");

         return;
      }

      if piStatus = STATUS_UNOWNED
      {
         Send(self,@ResetGuildHall);

         return;
      }

      if piStatus = STATUS_OKAY
      {
         if what = poGuild_owner
         {
            Send(self,@ResetGuildHall);

            return;
         }

         if what = poConquerer
         {
            poConquerer = $;
         }

         if what = poOld_guild
         {
            % This should never happen
            poOld_Guild = poGuild_owner;
         }

         return;
      }

      if piStatus = STATUS_CONQUERED
      {
         if what = poConquerer
         {
            Send(self,@ResetGuildHall);

            return;
         }

         if what = poGuild_owner
         {
            Debug("DefunctGuild: poGuild_owner points to defuncted guild, but "
                  "hall is conquered!");
            poGuild_owner = $;
         }

         if what = poOld_Guild
         {
            poOld_guild = $;
         }

         return;
      }

      if piStatus = STATUS_RAIDED
      {
         if what = poConquerer AND what = poGuild_owner
         {
            Send(self,@ResetGuildHall);

            return;
         }

         if what = poConquerer
         {
            piStatus = STATUS_OKAY;

            if ptWarning <> $
            {
              DeleteTimer(ptWarning);
              ptWarning = $;
            }

            if ptConquer <> $
            {
              DeleteTimer(ptConquer);
              ptConquer = $;
            }

            Send(self,@DefensesUp);

            poConquerer = $;
            pbMercenary_Conquered = FALSE;
            pbBetrayed = FALSE;
         }

         if what = poGuild_Owner
         {
            if ptConquer <> $
            {
              DeleteTimer(ptConquer);
              ptConquer = $;
            }

            % Conquer it prematurely.
            Send(self,@ConquerTimer);
         }

         if what = poOld_guild
         {
            poOld_guild = poGuild_owner;
         }
      }

      return;
    }

   Teleport(what=$,foyer=FALSE)
   "Admin supported.\n"
   "For guild halls - if you're in the guild hall, use secondary blink "
   "coordinates."
   {
      if foyer
      {
         propagate;
      }

      if Send(what,@GetOwner) <> self
         OR Send(self,@InFoyer,#who=what)
      {
         propagate;
      }

      if viInner_teleport_row <> $ AND viInner_Teleport_col <> $
      {
         Send(SYS,@UtilGoNearSquare,#what=what,#where=self,
               #new_row=viInner_teleport_row,#new_col=viInner_teleport_col);

         return TRUE;
      }

      propagate;
   }

   GetStatus()
   {
      return piStatus;
   }

   GetGuildOwner()
   {
      return poGuild_owner;
   }

   CreateYellZoneList()
   {
      plYell_zone = $;

      return;
   }

   CanHavePlayerPortal()
   {
      % Don't allow portals into guild halls
      return FALSE;
   }

   CanTokenEnterRoom()
   {
      return FALSE;
   }
   
   ReqSpellCast(oSpell=$,who=$)
   {
      % Cannot conveyance inside a hall.
      if IsClass(oSpell,&Conveyance)
      {
         if who <> $
            AND IsClass(who,&Player)
         {
            Send(who,@MsgSendUser,#message_rsc=cannot_conveyance_msg);
         }
         return FALSE;
      }

      if IsClass(oSpell,&MovementSpell)
      {
         if who <> $
            AND IsClass(who,&Player)
         {
            Send(who,@MsgSendUser,#message_rsc=cannot_movement_spell_msg);
         }
         return FALSE;
      }

      propagate;
   }

   FoyerDissipatesWallElements()
   {
      return TRUE;
   }
   
   FirstUserEntered()
   {
      if poGuild_owner <> $
      {
         % Turn on portals
         SendListByClass(plActive,1,&Portal,@SetAnimation,#what=TRUE);

         % Songs only work in owned halls
         if viFociOneRow > 0
         {
            poTotemOne = Create(&RadiusEnchantmentTotemGuildHall);
            Send(self,@NewHold,#what=poTotemOne,
                               #new_row=viFociOneRow,
                               #new_col=viFociOneCol,
                               #fine_row=viFociOneFineRow,
                               #fine_col=viFociOneFineCol);
            Send(Send(SYS,@FindSpellByNum,#num=viFociOneSpellNum),@InitiateNewRadiusEnchantment,
                               #source=poTotemOne,
                               #iSpellPower=viFociOnePower,
                               #iRange=viFociOneRange);
         }
         if viFociTwoRow > 0
         {
            poTotemTwo = Create(&RadiusEnchantmentTotemGuildHall);
            Send(self,@NewHold,#what=poTotemTwo,
                               #new_row=viFociTwoRow,
                               #new_col=viFociTwoCol,
                               #fine_row=viFociTwoFineRow,
                               #fine_col=viFociTwoFineCol);
            Send(Send(SYS,@FindSpellByNum,#num=viFociTwoSpellNum),@InitiateNewRadiusEnchantment,
                               #source=poTotemTwo,
                               #iSpellPower=viFociTwoPower,
                               #iRange=viFociTwoRange);
         }
         if viFociThreeRow > 0
         {
            poTotemThree = Create(&RadiusEnchantmentTotemGuildHall);
            Send(self,@NewHold,#what=poTotemThree,
                               #new_row=viFociThreeRow,
                               #new_col=viFociThreeCol,
                               #fine_row=viFociThreeFineRow,
                               #fine_col=viFociThreeFineCol);
            Send(Send(SYS,@FindSpellByNum,#num=viFociThreeSpellNum),@InitiateNewRadiusEnchantment,
                               #source=poTotemThree,
                               #iSpellPower=viFociThreePower,
                               #iRange=viFociThreeRange);
         }
      }
      else
      {
         % Portals don't work in inactive guild halls.
         SendListByClass(plActive,1,&Portal,@SetAnimation,#what=FALSE);
      }

      propagate;
   }

   LastUserLeft()
   {
      if poTotemOne <> $
      {
         Post(Send(SYS,@FindSpellByNum,#num=viFociOneSpellNum),@CancelRadiusEnchantment,#source=poTotemOne);
         Post(poTotemOne,@Delete);
         poTotemOne = $;
      }
      if poTotemTwo <> $
      {
         Post(Send(SYS,@FindSpellByNum,#num=viFociTwoSpellNum),@CancelRadiusEnchantment,#source=poTotemTwo);
         Post(poTotemTwo,@Delete);
         poTotemTwo = $;
      }
      if poTotemThree <> $
      {
         Post(Send(SYS,@FindSpellByNum,#num=viFociThreeSpellNum),@CancelRadiusEnchantment,#source=poTotemThree);
         Post(poTotemThree,@Delete);
         poTotemThree = $;
      }

      propagate;
   }

   GetTotemLightIntensity(what=$)
   {
      return 0;
   }

   GetTotemLightColor(what=$)
   {
      return LIGHT_GREEN;
   }

   TestUpgradeObjects()
   "Called only by admins directly testing positions of objects"
   {
      if viBartenderRow > 0
      {
         Send(self,@NewHold,#what=Create(&GuildHallBartender),#new_row=viBartenderRow,
                                                     #new_col=viBartenderCol,
                                                     #fine_row=viBartenderFineRow,
                                                     #fine_col=viBartenderFineCol);
      }
      if viMarketRow > 0
      {
         Send(self,@NewHold,#what=Create(&GuildHallMarket),#new_row=viMarketRow,
                                                     #new_col=viMarketCol,
                                                     #fine_row=viMarketFineRow,
                                                     #fine_col=viMarketFineCol);
      }

      if viReliquaryOneRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryOneRow,
                                                     #new_col=viReliquaryOneCol,
                                                     #fine_row=viReliquaryOneFineRow,
                                                     #fine_col=viReliquaryOneFineCol);
      }
      if viReliquaryTwoRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryTwoRow,
                                                    #new_col=viReliquaryTwoCol,
                                                    #fine_row=viReliquaryTwoFineRow,
                                                    #fine_col=viReliquaryTwoFineCol);
      }
      if viReliquaryThreeRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryThreeRow,
                                                    #new_col=viReliquaryThreeCol,
                                                    #fine_row=viReliquaryThreeFineRow,
                                                    #fine_col=viReliquaryThreeFineCol);
      }
      if viReliquaryFourRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryFourRow,
                                                    #new_col=viReliquaryFourCol,
                                                    #fine_row=viReliquaryFourFineRow,
                                                    #fine_col=viReliquaryFourFineCol);
      }
      if viReliquaryFiveRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquaryFiveRow,
                                                    #new_col=viReliquaryFiveCol,
                                                    #fine_row=viReliquaryFiveFineRow,
                                                    #fine_col=viReliquaryFiveFineCol);
      }
      if viReliquarySixRow > 0
      {
         Send(self,@NewHold,#what=Create(&Reliquary),#new_row=viReliquarySixRow,
                                                    #new_col=viReliquarySixCol,
                                                    #fine_row=viReliquarySixFineRow,
                                                    #fine_col=viReliquarySixFineCol);
      }
      if viShardFusingDeviceRow > 0
      {
         Send(self,@NewHold,#what=Create(&ShardFusingDevice,#iInputRequired=viShardFusingDeviceRate),
                                                            #new_row=viShardFusingDeviceRow,
                                                            #new_col=viShardFusingDeviceCol,
                                                            #fine_row=viShardFusingDeviceFineRow,
                                                            #fine_col=viShardFusingDeviceFineCol);
      }
      if viShardShatteringDeviceRow > 0
      {
         Send(self,@NewHold,#what=Create(&ShardShatteringDevice,#iOutputCreated=viShardShatteringDeviceRate),
                                                            #new_row=viShardShatteringDeviceRow,
                                                            #new_col=viShardShatteringDeviceCol,
                                                            #fine_row=viShardShatteringDeviceFineRow,
                                                            #fine_col=viShardShatteringDeviceFineCol);
      }
   
   
   
         if viPortalOneRow > 0
         {
            Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalOneDestRID,
                                                    #dest_row=viPortalOneDestRow,
                                                    #dest_col=viPortalOneDestCol,
                                                    #dest_angle=viPortalOneDestAngle,
                                                    #dest_fine_row=viPortalOneDestFineRow,
                                                    #dest_fine_col=viPortalOneDestFineCol,
                                                    #desc=vsPortalOneDesc,
                                                    #glow_color=viPortalOneGlowColor),
                              #new_row=viPortalOneRow,
                              #new_col=viPortalOneCol,
                              #fine_row=viPortalOneFineRow,
                              #fine_col=viPortalOneFineCol,
                              #new_angle=viPortalOneAngle);
         }
         if viPortalTwoRow > 0
         {
            Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalTwoDestRID,
                                                    #dest_row=viPortalTwoDestRow,
                                                    #dest_col=viPortalTwoDestCol,
                                                    #dest_angle=viPortalTwoDestAngle,
                                                    #dest_fine_row=viPortalTwoDestFineRow,
                                                    #dest_fine_col=viPortalTwoDestFineCol,
                                                    #desc=vsPortalTwoDesc,
                                                    #glow_color=viPortalTwoGlowColor),
                              #new_row=viPortalTwoRow,
                              #new_col=viPortalTwoCol,
                              #fine_row=viPortalTwoFineRow,
                              #fine_col=viPortalTwoFineCol,
                              #new_angle=viPortalTwoAngle);
         }
         if viPortalThreeRow > 0
         {
            Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalThreeDestRID,
                                                    #dest_row=viPortalThreeDestRow,
                                                    #dest_col=viPortalThreeDestCol,
                                                    #dest_angle=viPortalThreeDestAngle,
                                                    #dest_fine_row=viPortalThreeDestFineRow,
                                                    #dest_fine_col=viPortalThreeDestFineCol,
                                                    #desc=vsPortalThreeDesc,
                                                    #glow_color=viPortalThreeGlowColor),
                              #new_row=viPortalThreeRow,
                              #new_col=viPortalThreeCol,
                              #fine_row=viPortalThreeFineRow,
                              #fine_col=viPortalThreeFineCol,
                              #new_angle=viPortalThreeAngle);
         }
         if viPortalFourRow > 0
         {
            Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalFourDestRID,
                                                    #dest_row=viPortalFourDestRow,
                                                    #dest_col=viPortalFourDestCol,
                                                    #dest_angle=viPortalFourDestAngle,
                                                    #dest_fine_row=viPortalFourDestFineRow,
                                                    #dest_fine_col=viPortalFourDestFineCol,
                                                    #desc=vsPortalFourDesc,
                                                    #glow_color=viPortalFourGlowColor),
                              #new_row=viPortalFourRow,
                              #new_col=viPortalFourCol,
                              #fine_row=viPortalFourFineRow,
                              #fine_col=viPortalFourFineCol,
                              #new_angle=viPortalFourAngle);
         }
         if viPortalFiveRow > 0
         {
            Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalFiveDestRID,
                                                    #dest_row=viPortalFiveDestRow,
                                                    #dest_col=viPortalFiveDestCol,
                                                    #dest_angle=viPortalFiveDestAngle,
                                                    #dest_fine_row=viPortalFiveDestFineRow,
                                                    #dest_fine_col=viPortalFiveDestFineCol,
                                                    #desc=vsPortalFiveDesc,
                                                    #glow_color=viPortalFiveGlowColor),
                              #new_row=viPortalFiveRow,
                              #new_col=viPortalFiveCol,
                              #fine_row=viPortalFiveFineRow,
                              #fine_col=viPortalFiveFineCol,
                              #new_angle=viPortalFiveAngle);
         }
         if viPortalSixRow > 0
         {
            Send(self,@NewHold,#what=Create(&Portal,#dest_room_num=viPortalSixDestRID,
                                                    #dest_row=viPortalSixDestRow,
                                                    #dest_col=viPortalSixDestCol,
                                                    #dest_angle=viPortalSixDestAngle,
                                                    #dest_fine_row=viPortalSixDestFineRow,
                                                    #dest_fine_col=viPortalSixDestFineCol,
                                                    #desc=vsPortalSixDesc,
                                                    #glow_color=viPortalSixGlowColor),
                              #new_row=viPortalSixRow,
                              #new_col=viPortalSixCol,
                              #fine_row=viPortalSixFineRow,
                              #fine_col=viPortalSixFineCol,
                              #new_angle=viPortalSixAngle);
         }

         if viFociOneRow > 0
         {
            poTotemOne = Create(&RadiusEnchantmentTotemGuildHall);
            Send(self,@NewHold,#what=poTotemOne,
                               #new_row=viFociOneRow,
                               #new_col=viFociOneCol,
                               #fine_row=viFociOneFineRow,
                               #fine_col=viFociOneFineCol);
            Send(Send(SYS,@FindSpellByNum,#num=viFociOneSpellNum),@InitiateNewRadiusEnchantment,
                               #source=poTotemOne,
                               #iSpellPower=viFociOnePower,
                               #iRange=viFociOneRange);
         }
         if viFociTwoRow > 0
         {
            poTotemTwo = Create(&RadiusEnchantmentTotemGuildHall);
            Send(self,@NewHold,#what=poTotemTwo,
                               #new_row=viFociTwoRow,
                               #new_col=viFociTwoCol,
                               #fine_row=viFociTwoFineRow,
                               #fine_col=viFociTwoFineCol);
            Send(Send(SYS,@FindSpellByNum,#num=viFociTwoSpellNum),@InitiateNewRadiusEnchantment,
                               #source=poTotemTwo,
                               #iSpellPower=viFociTwoPower,
                               #iRange=viFociTwoRange);
         }
         if viFociThreeRow > 0
         {
            poTotemThree = Create(&RadiusEnchantmentTotemGuildHall);
            Send(self,@NewHold,#what=poTotemThree,
                               #new_row=viFociThreeRow,
                               #new_col=viFociThreeCol,
                               #fine_row=viFociThreeFineRow,
                               #fine_col=viFociThreeFineCol);
            Send(Send(SYS,@FindSpellByNum,#num=viFociThreeSpellNum),@InitiateNewRadiusEnchantment,
                               #source=poTotemThree,
                               #iSpellPower=viFociThreePower,
                               #iRange=viFociThreeRange);
         }
   
      return;
   }

   GetRelicList()
   {
      local i, n, each_obj, lReliquaryList;
      
      % Modified to return reliquaries themselves instead

      lReliquaryList = $;
      foreach i in Send(self,@GetHolderActive)
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&Reliquary)
         {
            lReliquaryList = Cons(each_obj,lReliquaryList);
         }
      }
      return lReliquaryList;
   }
   
   GetRoomMeditateEfficiency(who=$,oSpell=$,oSkill=$)
   {
      % If the player is inside the foyer and a member of the owning guild,
      % they get the improved Meditate efficiency.
      if who <> $
         AND poGuild_owner <> $
         AND NOT Send(self,@InFoyer,#who=who)
         AND Send(who,@GetGuild) = poGuild_owner
      {
         if Send(self,@DoesPlayerQualifyForSpecialMeditateRatio,#who=who,#oSpell=oSpell,#oSkill=oSkill)
         {
            return piSpecialGuildHallMeditateEfficiency;
         }
         return piGuildHallMeditateEffiency;
      }
      return piRoomMeditateEfficiency;
   }
   
   DoesPlayerQualifyForSpecialMeditateRatio(who=$,oSpell=$,oSkill=$)
   {
      return FALSE;
   }

   SomethingMoved(what = $, new_row = $, new_col = $, fine_row = FINENESS/2,
                  fine_col = FINENESS/2, cause = CAUSE_UNKNOWN, speed = 0,
                  non_monsters_only = FALSE)
   {
      if IsClass(what,&Player)
         AND NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         Debug("Booting ", Send(what,@GetName), " from ", Send(self,@GetName), " for being angeled");
         Post(what,@AdminGoToSafety);
      }

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
