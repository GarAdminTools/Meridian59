% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
PalaceDungeon2 is PalaceOfTheHighSorcerersRoom

constants:

   include blakston.khd

resources:

   room_palace_dungeon2 = palacedungeon2.roo
   name_palace_dungeon2 = "Southwest Corner of the Ziggurat"

   palace_dungeon2_music = loboloco06lonersinthenightid793.mp3

classvars:

   vrName = name_palace_dungeon2

   viTeleport_row = 18
   viTeleport_col = 15

   vbSpawnMonsters = TRUE
   viMinSpawnRow = 5
   viMaxSpawnRow = 53
   viMinSpawnCol = 14
   viMaxSpawnCol = 45

properties:

   piBaseLight = LIGHT_DARK
   piOutside_factor = OUTDOORS_5 

   prRoom = room_palace_dungeon2
   piRoom_num = RID_PALACE_DUNGEON2
   
   prMusic = palace_dungeon2_music

messages:

   SomethingMoved(what = $,new_row = $, new_col = $)
   {
      if new_row > Send(self,@GetRoomRows)-1
      {
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_PALACE_DUNGEON1),
              #new_row=3,#new_col=34,#fine_row=15,#fine_col=62,#new_angle=Send(what,@GetAngle));
              
         return;
      }
      if new_row < 2
      {
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_PALACE_DUNGEON1),
              #new_row=40,#new_col=28,#fine_row=48,#fine_col=8,#new_angle=Send(what,@GetAngle));
              
         return;
      }
      if new_col > Send(self,@GetRoomCols)-1
      {
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_PALACE_DUNGEON1),
              #new_row=40,#new_col=28,#fine_row=48,#fine_col=8,#new_angle=Send(what,@GetAngle));
              
         return;
      }

      propagate;
   }

   CreateStandardObjects()
   {

      propagate;
   }

   SomethingChanged(what=$)
   {
      propagate;
   }

   SomethingTryGo(what = $,row = $,col = $)
   {
      propagate;
   }

   GetPhaseMusic()
   {
      return palace_dungeon2_music;
   }
   
   GetPhaseThreats()
   {
      return [&ChaosThreat];
   }

   StartThreat(cClasses=$,report=TRUE)
   {
      local i;

      % Don't start same threat if one already exists.
      % Don't start threats with no players present.
      if pbUser_in_room
         AND cClasses <> $
      {
         foreach i in cClasses
         {
            if NOT Send(self,@HasObjectAttribute,#cClass=i)
            {
               Create(i,#host_object=self,#iDuration=$,#report=report);
            }
         }
      }

      return;
   }

   EndThreat(cClass=&ShockStorm)
   {
      if Send(self,@HasObjectAttribute,#cClass=cClass)
      {
         Send(Send(self,@GetObjectAttribute,#cClass=cClass),@Delete);
      }
      return;
   }
   
   EndAllThreats()
   {
      local i;
      
      foreach i in plObject_attributes
      {
         if IsClass(i,&RoomThreat)
            OR IsClass(i,&RoomStorm)
         {
            Send(i,@Delete);
         }
      }

      return;
   }

   FirstUserEntered()
   {
      if vbSpawnMonsters
      {
         Post(self,@PopulateArea);
      }

      propagate;
   }
   
   LastUserLeft()
   {
      if vbSpawnMonsters
      {
         Post(self,@DepopulateArea);
      }

      propagate;
   }

   PopulateArea()
   {
      local i, iNumMonsters, oMonster, lMonsters, lClasses, iMinRow, iMinCol, iMaxRow, iMaxCol, iChosenAngle;

      lClasses = [&XeoIll];

      iNumMonsters = Random(5,15);
      lMonsters = $;

      while iNumMonsters > 0
      {
         lMonsters = Cons(Nth(lClasses,Random(1,Length(lClasses))),lMonsters);
         --iNumMonsters;
      }

      if viMaxSpawnRow = 0
      {
         iMaxRow = Send(self,@GetRoomRows)-1;
      }
      else
      {
         iMaxRow = viMaxSpawnRow;
      }

      if viMaxSpawnCol = 0
      {
         iMaxCol = Send(self,@GetRoomCols)-1;
      }
      else
      {
         iMaxCol = viMaxSpawnCol;
      }

      iChosenAngle = ANGLE_EAST;
      switch(Random(1,4))
      {
         case 1:
            iChosenAngle = ANGLE_WEST;
            break;
         case 2:
            iChosenAngle = ANGLE_NORTH;
            break;
         case 3:
            iChosenAngle = ANGLE_SOUTH;
            break;
         case 4:
            iChosenAngle = ANGLE_EAST;
            break;
      }

      foreach i in lMonsters
      {
         Send(self,@NewHold,#what=Create(i,#piSurvivalLevel=Send(Send(SYS,@GetDesertRoomMaintenance),@GetBoostDesertLevel)),
               #new_row=Random(viMinSpawnRow,iMaxRow),
               #new_col=Random(viMinSpawnCol,iMaxCol),
               #new_angle=iChosenAngle);
      }

      return;
   }
   
   DepopulateArea()
   {
      local i, each_obj;
      
      foreach i in Send(self,@GetHolderActive)
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&Monster)
            AND NOT IsClass(each_obj,&Towns) % don't delete NPCs
         {
            Send(each_obj,@Delete);
         }
      }
      
      return;
   }

   Delete()
   {
      local i, oThing;

      foreach i in Send(self,@GetHolderPassive)
      {
         oThing = Send(self,@HolderExtractObject,#data=i);
         if IsClass(oThing,&DeadBody)
            AND NOT Send(oThing,@GetPbMob)
         {
            % is a player corpse! Let's move it.
            Send(Send(SYS,@FindRoomByNum,#num=RID_DESERTDUNES),@Teleport,#what=oThing);
         }
      }

      Send(self,@EndAllThreats);
      propagate;
   }

   ReqSomethingUse(what = $, use_item = $)
   {
      local i;
      
      foreach i in plObject_attributes
      {
         % This area gives special messages to inform players
         % of threat avoidance. Can also be used to prevent some item use
         % by threats.
         if IsClass(i,&RoomThreat)
         {
            if NOT Send(i,@ReqSomethingUse,#what=what,#use_item=use_item)
            {
               return FALSE;
            }
         }
      }

      propagate;
   }

   SpellCast(who = $,oSpell = $)
   {
      local i;
      
      foreach i in plObject_attributes
      {
         % This area gives special messages to inform players
         % of threat avoidance.
         if IsClass(i,&RoomThreat)
         {
            Send(i,@SpellCast,#who=who,#oSpell=oSpell);
         }
      }

      propagate;
   }

   GetRegion()
   {
      return RID_DESERT;
   }
   
   OverrideDeathFunction(who=$,what=$,stroke_obj=$)
   {
      local oAfterlife, bDrop, oRoom, iRow, iCol, iFine_Row, iFine_Col, iAngle, iRoom,
            oBody, lReagentBagContents, lInventoryContents, lItems, i, oSoldierShield;

      Send(who,@ClearStance);
      % Stop any rescue attempts that were going on.
      Send(who,@CancelRescue);
      Send(who,@RemoveAllEnchantments,#report=FALSE);
      
      Send(who,@SetDeathTime,#iTime=GetTime());

      % Grab the location of the deceased.
      % Might need to grab the old location if logged off.

      if Send(who,@IsLoggedOn)
      {
         oRoom = Send(who,@GetOwner);
         iRow = Send(who,@GetRow);
         iCol = Send(who,@GetCol);
         iFine_Row = Send(who,@GetFineRow);
         iFine_Col = Send(who,@GetFineCol);
         iAngle = Send(who,@GetAngle);
         iRoom = Send(Send(who,@GetOwner),@GetRoomNum);
      }
      else
      {
         iRoom = Send(who,@GetSaveRoom);
         oRoom = Send(SYS,@FindRoomByNum,#num=iRoom);
         iRow = Send(who,@GetSaveRow);
         iCol = Send(who,@GetSaveCol);
         iFine_Row = Send(who,@GetSaveFineRow);
         iFine_Col = Send(who,@GetSaveFineCol);
         iAngle = Send(who,@GetSaveAngle);
      }

      % Record-keeping. Keep this before the token check,
      % so we can give proper message.
      Send(SYS,@UserKilled,#what=who,#killer=what,#oRoom=oRoom,#stroke_obj=stroke_obj);
      Send(Send(SYS,@GetStatistics),@PlayerDiedCounter);

      % Create the corpse.
      if what <> $
         AND IsClass(what,&User)
      {
         oBody = Send(who,@CreateCorpse,#oPlayerKiller=what);
      }
      else
      {
         oBody = Send(who,@CreateCorpse);
      }
      Send(who,@SetCorpse,#corpse=oBody);

      Send(oRoom,@NewHold,#what=oBody,#new_row=iRow,#new_col=iCol,
            #fine_row=iFine_Row,#fine_col=iFine_Col,#new_angle=iAngle);

      bDrop = TRUE;
      % Start losing stuff if applicable.
      if bDrop
      {
         lReagentBagContents = Send(who,@GetReagentBagContents);
         if lReagentBagContents <> $
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive),lReagentBagContents];
         }
         else
         {
            lInventoryContents = [Send(who,@GetHolderActive),Send(who,@GetHolderPassive)];
         }

         foreach lItems in lInventoryContents
         {
            foreach i in lItems
            {
               % Let the item know we died, in case it does something special.
               Send(i,@OwnerKilled);

               if Send(i,@DropOnDeath)
               {
                  if Send(oRoom,@ReqNewHold,#what=i,#new_row=iRow,#new_col=iCol)
                  {
                     Send(oBody,@NewHold,#what=i);
                  }
               }
            }
         }

         Post(who,@EvaluatePKStatus);

         % Let SoldierShields know we died. It handles itself as appropriate.
         oSoldierShield = Send(who,@FindUsing,#what=&SoldierShield);
         if oSoldierShield <> $
         {
            Send(oSoldierShield,@OwnerDied,#what=what);
         }
      }

      % Give out your dying scream.
      if Send(who,@GetGender) = GENDER_FEMALE
      {
         i = Send(who,@GetFemaleDeathWav);
      }
      else
      {
         i = Send(who,@GetMaleDeathWav);
      }

      Send(oRoom,@SomethingWaveRoom,#what=oBody,#wave_rsc=i);
      if Send(who,@IsLoggedOn)
      {
         Send(who,@WaveSendUser,#what=who,#wave_rsc=i);
      }

      Send(who,@SetHealth,#amount=1);

      Send(who,@NewHealth);
      Send(who,@NewMana);
      Send(who,@NewVigor);
      
      Send(who,@SetDeathCost,#DeathCost=Send(Send(SYS,@GetDesertRoomMaintenance),@GetDeathCost),#bOverride=TRUE);
      Send(who,@ApplyDeathPenalties);

      % Refresh the client with what's really going on.
      if Send(who,@IsLoggedOn)
      {
         Send(who,@ToCliStats,#group=1);
         Send(who,@ToCliStats,#group=2);
         Send(who,@ToCliStats,#group=3);
         Send(who,@ToCliStats,#group=4);

         % Wake up with red foggy hangover.
         Send(who,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=5000);
      }
      
      oAfterlife = Send(SYS,@FindRoomByNum,#num=RID_DESERTALDUNES);
      
      if IsClass(self,&DesertDunesRoom)
      {
         Send(SYS,@UtilGoNearSquare,#what=who,
                                    #where=oAfterlife,
                                    #new_row=iRow,
                                    #new_col=iCol,
                                    #fine_row=iFine_Row,
                                    #fine_col=iFine_Col,
                                    #new_angle=iAngle);
      }
      else
      {
         Send(oAfterlife,@Teleport,#what=who);
      }
      return;
   }

   CanHavePlayerPortal()
   {
      return FALSE;
   }

   CanTokenEnterRoom()
   {
      return FALSE;
   }

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      if IsClass(oSpell,&DeathRift)
         OR IsClass(oSpell,&PortalOfLife)
      {
         Send(who,@MsgSendUser,#message_rsc=cannot_death_rift_or_pol);
         return FALSE;
      }

      propagate;
   }

   OverridesDeathAllowPhasing()
   {
      return TRUE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
