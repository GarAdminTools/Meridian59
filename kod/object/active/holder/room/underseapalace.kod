% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
UnderseaPalace is Room

%
%
% NPC
%  - Art
%  - Kod
%
% Rune Words -
%  - The proper sequence of runes unlocks special encounters.
%
%
% Runes -
%  - Need better descriptions
%  - Drop locs
%
% Crystals -
%  - Need art
%  - Need function
%  - Need descriptions
%  - Drop locs
%
% Chambers -
%  - Spawn monsters
%  - Threats
%  - Loot?
%
%
% Boss -
%  - BGF?
%  - KOD
%
% Questions:
%  - What happens at 300 rooms

constants:

   include blakston.khd

resources:
  
   room_name_Undersea_Palace = "Small Remnant of a Sea Palace"
   room_Undersea_Palace = underseachamberdeath.roo
   Undersea_Palace_music = aamusic2.mp3
   
   Undersea_Palace_lever_desc = \
      "Covered in gnomish runes, this lever looks to be the central activation of some tremendous mechanism."
   
   Undersea_Palace_not_begun_yet = \
      "The endless sea palace does not permit you entrance..."
   tower_created_msg = \
      "The sound of massive gears rumbles through the area."

classvars:

   vrName = room_name_Undersea_Palace

   viTeleport_row = 13
   viTeleport_col = 7

   viTerrain_Type = TERRAIN_CITY

   viPermanent_flags = ROOM_NO_COMBAT

   viLongitude = 5
   viLatitude = 5

properties:

   prRoom = room_Undersea_Palace
   piRoom_num = RID_UNDERSEA_PALACE

   prMusic = Undersea_Palace_music
   
   plChambersCreated = $
   poLever = $
   
   poVisualTimer = $

messages:

   Constructed()
   {

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

%      plExits = Cons([ 2, 5, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);
%      plExits = Cons([ 2, 6, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);
%      plExits = Cons([ 2, 7, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);
%      plExits = Cons([ 3, 7, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);

      %% to sea
      plExits = Cons([ 14, 6, RID_OPEN_WATER, 36, 26, ROTATE_NONE ],plExits);
      plExits = Cons([ 14, 7, RID_OPEN_WATER, 36, 26, ROTATE_NONE ],plExits);
      plExits = Cons([ 14, 8, RID_OPEN_WATER, 36, 26, ROTATE_NONE ],plExits);
  
      propagate;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&SeaPalaceDevice),#new_row=9,#new_col=5,
           #fine_row=15,#fine_col=48);
            
      poLever = Create(&Lever,#description=Undersea_Palace_lever_desc);
      Send(self,@NewHold,#what=poLever,#new_row=7,#new_col=5,#fine_row=15,#fine_col=48);

      propagate;
   }

   CreateChamber(oRune=$)
   {
      local iRID;

      % Set up the room
      iRID = Send(self,@GetNextAvailableRID);
      
      if iRID = 0
      {
         return FALSE;
      }
      
      Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=Send(self,@GetRoomClassByRune,#iRune=Send(oRune,@GetRuneNumber)),#oRune=oRune);
      plChambersCreated = Cons(iRID,plChambersCreated);

      % Add it to the room enter count statistics.
      Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);
      
      poVisualTimer = Create(&VisualTimer,#iTime=1800,#oTargetRoom=self,#lTargetRooms=plChambersCreated);

      return TRUE;
   }

   GetNextAvailableRID()
   {
      local iRID;

      iRID = RID_UNDERSEA_PALACE_START;

      if plChambersCreated = $
      {
         return iRID;
      }

      while iRID < RID_UNDERSEA_PALACE_END
      {
         if NOT FindListElem(plChambersCreated,iRID)
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }

      return 0;
   }
   
   GetRoomClassByRune(iRune=OCEANIC_RUNE_DEATH)
   {
      switch(iRune)
      {
         case OCEANIC_RUNE_DEATH:
            return &UnderseaChamberDeath;
         case OCEANIC_RUNE_JUNGLE:
            return &UnderseaChamberJungle;
         case OCEANIC_RUNE_SKY:
            return &UnderseaChamberSky;
         case OCEANIC_RUNE_FRACTURED:
            return &UnderseaChamberFractured;
         case OCEANIC_RUNE_HEXED:
            return &UnderseaChamberHexed;
         case OCEANIC_RUNE_SERPENT:
            return &UnderseaChamberSerpent;
         case OCEANIC_RUNE_SEA:
            return &UnderseaChamberSea;
         case OCEANIC_RUNE_CHAINED:
            return &UnderseaChamberChained;
         case OCEANIC_RUNE_SWORD:
            return &UnderseaChamberSword;
         case OCEANIC_RUNE_HAMMER:
            return &UnderseaChamberHammer;
         case OCEANIC_RUNE_MOUNTAIN:
            return &UnderseaChamberMountain;
         case OCEANIC_RUNE_SCALED:
            return &UnderseaChamberScaled;
      }
      return &UnderseaChamberDeath;
   }
   
   ChambersCompleted()
   {
      if poVisualTimer <> $
      {
         Send(poVisualTimer,@Delete);
         poVisualTimer = $;
      }
      
      return;
   }

   DestroyChambers()
   {
      local i;
      
      foreach i in plChambersCreated
      {
         Send(Send(SYS,@FindRoomByNum,#num=i),@Delete);
      }
      plChambersCreated = $;
      return;
   }

   SomethingChanged(what=$)
   {
      if what = poLever
         AND Send(poLever,@GetState) = LEVER_DOWN
      {
         Send(self,@BuildTower);
      }

      propagate;
   }
   
   BuildTower()
   {
      local lContents, i, each_obj, oSeaPalaceDevice, iRID, oPlayer;
      
      foreach i in Send(self,@GetHolderActive)
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&SeaPalaceDevice)
         {
            oSeaPalaceDevice = each_obj;
            break;
         }
      }
      
      if oSeaPalaceDevice <> $
         AND plChambersCreated = $
         AND Send(oSeaPalaceDevice,@GetRuneCount) >= 5
         AND Send(oSeaPalaceDevice,@GetRuneCount) <= 300
      {
         % Set up the room
         iRID = Send(self,@GetNextAvailableRID);
      
         if iRID = 0
         {
            return FALSE;
         }
      
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=&UnderseaPalaceBossRoom);
         plChambersCreated = Cons(iRID,plChambersCreated);

         % Add it to the room enter count statistics.
         Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);
            
         foreach i in Send(oSeaPalaceDevice,@GetHolderPassive)
         {
            if IsClass(i,&SeaPalaceRune)
            {
               Send(self,@CreateChamber,#oRune=i);
               Send(i,@Delete);
            }
            else if IsClass(i,&SeaPalaceCrystal)
            {
               Send(i,@Delete);
            }
         }
         
         foreach oPlayer in Send(self,@GetPlayersInRoom)
         {
            Send(oPlayer,@MsgSendUser,#message_rsc=tower_created_msg);
         }
      }
      return;
   }
   
   Delete()
   {
      poLever = $;
      plChambersCreated = $;
      if poVisualTimer <> $
      {
         Send(poVisualTimer,@Delete);
         poVisualTimer = $;
      }
      propagate;
   }
   
   GetChambers()
   {
      return plChambersCreated;
   }

   SomethingTryGo(what=$, row=$, col=$)
   {
      local oRoom;

      if what <> $
         AND IsClass(what,&Player)
         AND row < 2
         AND col > 6
         AND col < 8
      {
         if plChambersCreated = $
         {
            Send(what,@MsgSendUser,#message_rsc=Undersea_Palace_not_begun_yet);
            return TRUE;
         }

         oRoom = Send(self,@GetCurrentUnfinishedRoom);
            
         if oRoom <> $
         {
            Send(oRoom,@NewHold,#what=what,#new_row=13,#new_col=7,#new_angle=Send(what,@GetAngle));
            return TRUE;
         }
      }

      propagate;
   }

   GetCurrentUnfinishedRoom()
   {
      local iRID, oRoom;
      
      foreach iRID in plChambersCreated
      {
         if Send(Send(SYS,@FindRoomByNum,#num=iRID),@GetNextDoorOpen) = FALSE
         {
            return Send(SYS,@FindRoomByNum,#num=iRID);
         }
      }
      
      return $;
   }

   GetNumberOfRooms()
   {
      if plChambersCreated <> $
      {
         return Length(plChambersCreated);
      }
      return 0;
   }

   GetAverageLevel()
   {
      local iRID, iSum;
      
      iSum = 0;
      foreach iRID in plChambersCreated
      {
         iSum = iSum + Send(Send(SYS,@FindRoomByNum,#Num=iRID),@GetMonsterLevel);
      }
      
      iSum = Bound(iSum,20,$);
      
      return iSum;
   }

   VisualTimerTrigger()
   {
      % Time's up.
      Send(self,@DestroyChambers);
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
