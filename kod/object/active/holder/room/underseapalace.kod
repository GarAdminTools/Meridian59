% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
UnderseaPalace is Room

constants:

   include blakston.khd

resources:
  
   room_name_Undersea_Palace = "Small Remnant of an Undersea Palace"
   room_Undersea_Palace = underseapalace.roo
   Undersea_Palace_music = aamusic2.mp3
   
   Undersea_Palace_lever_desc = "Pull this lever."

classvars:

   vrName = room_name_Undersea_Palace

   viTeleport_row = 3
   viTeleport_col = 3

   viTerrain_Type = TERRAIN_CITY

   viLongitude = 5
   viLatitude = 5

properties:

   prRoom = room_Undersea_Palace
   piRoom_num = RID_UNDERSEA_PALACE

   prMusic = Undersea_Palace_music
   
   plChambersCreated = $
   poLever = $

messages:

   Constructed()
   {

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

%      plExits = Cons([ 2, 5, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);
%      plExits = Cons([ 2, 6, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);
%      plExits = Cons([ 2, 7, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);
%      plExits = Cons([ 3, 7, ROOM_LOCKED_DOOR, Undersea_Palace_locked],plExits);

      %% to sea
      plExits = Cons([ 11, 2, RID_OPEN_WATER, 36, 26, ROTATE_NONE ],plExits);
      plExits = Cons([ 11, 3, RID_OPEN_WATER, 36, 26, ROTATE_NONE ],plExits);
      plExits = Cons([ 11, 4, RID_OPEN_WATER, 36, 26, ROTATE_NONE ],plExits);
  
      propagate;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&SeaPalaceDevice),#new_row=9,#new_col=5,
           #fine_row=15,#fine_col=48);
            
      poLever = Create(&Lever,#description=Undersea_Palace_lever_desc);
      Send(self,@NewHold,#what=poLever,#new_row=7,#new_col=5,#fine_row=15,#fine_col=48);

      propagate;
   }

   CreateChamber(iRune=OCEANIC_RUNE_DEATH)
   {
      local iRID;

      % Set up the room
      iRID = Send(self,@GetNextAvailableRID);
      
      if iRID = 0
      {
         return FALSE;
      }
      
      Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=Send(self,@GetRoomClassByRune,#iRune=OCEANIC_RUNE_DEATH));
      plChambersCreated = Cons(iRID,plChambersCreated);

      % Add it to the room enter count statistics.
      Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);

      return TRUE;
   }

   GetNextAvailableRID()
   {
      local iRID;

      iRID = RID_UNDERSEA_PALACE_START;

      if plChambersCreated = $
      {
         return iRID;
      }

      while iRID < RID_UNDERSEA_PALACE_END
      {
         if NOT FindListElem(plChambersCreated,iRID)
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }

      return 0;
   }
   
   GetRoomClassByRune(iRune=OCEANIC_RUNE_DEATH)
   {
      return &UnderseaChamber;
   }
   
   ChambersCompleted()
   {
      local i;
      
      foreach i in plChambersCreated
      {
         Send(i,@Delete);
      }
      
      return;
   }

   SomethingChanged(what=$)
   {
      if what = poLever
         AND Send(poLever,@GetState) = LEVER_DOWN
      {
         Send(self,@BuildTower);
      }

      propagate;
   }
   
   BuildTower()
   {
      local lContents, i, each_obj, oSeaPalaceDevice;
      
      foreach i in Send(self,@GetHolderActive)
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&SeaPalaceDevice)
         {
            oSeaPalaceDevice = each_obj;
            break;
         }
      }
      
      if oSeaPalaceDevice <> $
      {
         foreach i in Send(oSeaPalaceDevice,@GetHolderPassive)
         {
            if IsClass(i,&SeaPalaceRune)
            {
               Send(self,@CreateChamber,#iRune=Send(i,@GetRuneNumber));
               Send(i,@Delete);
            }
            else if IsClass(i,&SeaPalaceCrystal)
            {
               Send(i,@Delete);
            }
         }
      }
      return;
   }
   
   Delete()
   {
      poLever = $;
      plChambersCreated = $;
      propagate;
   }
   
   GetChambers()
   {
      return plChambersCreated;
   }

   SomethingTryGo(what=$, row=$, col=$)
   {
      if what <> $
         AND IsClass(what,&Player)
         AND row < 2
         AND col > 4
         AND col < 9
      {
         if plChambersCreated <> $
         {
            Send(Send(SYS,@FindRoomByNum,#num=First(plChambersCreated)),@NewHold,#what=what,#new_row=5,#new_col=5);
         }
      }

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
