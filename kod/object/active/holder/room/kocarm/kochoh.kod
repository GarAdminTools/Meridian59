% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
KocatanHall is KocatanRoom

constants:

   include blakston.khd

resources:

   include kochoh.lkod

   room_Kocatanhall = Kochoh.roo
   room_name_Kocatanhall = "The Hall of Heroes"

   Kocatanhall_music = extra01.mp3

   news_Kocatan_hall = "General News"
   news_Kocatan_hall_desc = "Find out what's happening around Meridian."

   hoh_best_adventurer = \
      "This is a statue of %q, greatest adventurer in the land."

   hoh_best_warrior = "This is a statue of %q, mightiest warrior in the land."

   hoh_best_wizard = \
      "This is a statue of %q, most powerful wizard in the land."

   hoh_best_faren = "This is a statue of %q, master of Faren."
   hoh_best_qor = "This is a statue of %q, master of Qor."
   hoh_best_shalille = "This is a statue of %q, master of Shal'ille."
   hoh_best_riija = "This is a statue of %q, master of Riija."
   hoh_best_kraanan = "This is a statue of %q, master of Kraanan."
   hoh_best_jala = "This is a statue of %q, master of Jala."
   
   hoh_best_alchemy = "This is a statue of %q, master of Alchemy."
   hoh_best_witchery = "This is a statue of %q, master of Witchery."
   hoh_best_banditry = "This is a statue of %q, master of Banditry."
   hoh_best_sorcery = "This is a statue of %q, master of Sorcery."
   hoh_best_knightcraft = "This is a statue of %q, master of Knightcraft."
   hoh_best_weaponcraft = "This is a statue of %q, master of Weaponcraft."

classvars:

   vrName = room_name_Kocatanhall

   viTeleport_row = 13
   viTeleport_col = 7

   viLongitude = 21
   viLatitude = 49

   viTerrain_type = TERRAIN_CITY | TERRAIN_SHOP

properties:

   viPermanent_flags = ROOM_NO_COMBAT | ROOM_SAFELOGOFF

   prRoom = room_Kocatanhall
   piRoom_num = RID_KOC_HALL_OF_HEROES

   piBaseLight = LIGHT_NICE
   piOutside_factor = 3

   prMusic = Kocatanhall_music
   plStatues = $
   pbEverEntered = FALSE

   % Most wisdom in the game
   plGreatestAdventurer = $

   plGreatestWizard = $
   plGreatestWarrior = $
   
   plWisestWithShal = $
   plWisestWithQor = $
   plWisestWithFaren = $
   plWisestWithRiija = $
   plWisestWithJala = $
   plWisestWithKraanan = $
   plWisestWithBanditry = $
   plWisestWithWitchery = $
   plWisestWithSorcery = $
   plWisestWithKnightcraft = $
   plWisestWithWeaponcraft = $
   plWisestWithAlchemy = $

   % Check once a day
   ptUpdateTimer = $
   piUpdateTime = 1000 * 60 * 60 * 24

messages:

   ChooseStatues()
   {
      local oLore;

      if pbEverEntered
      {
         return Send(SYS,@GetFailureRsc);
      }

      pbEverEntered = TRUE;

      oLore = Send(SYS,@GetLore);
      if oLore = $
      {
         return Send(SYS,@GetFailureRsc);
      }

      Post(self,@CreateStatues);
%      Post(oLore,@ChooseCurrentBests);

      return Send(SYS,@GetPleaseWaitRsc);
   }

   CreateStandardExits()
   {
      plExits = $;

      % TO TOWN
      plExits = Cons([ 14, 7, RID_KOCATAN, 23, 30, ROTATE_NONE ],plExits);
      
      % TO BOW MASTER
      plExits = Cons([ 3, 3, RID_KOC_HALL_OF_HEROES_A, 2, 4, ROTATE_NONE ],plExits);
      plExits = Cons([ 4, 3, RID_KOC_HALL_OF_HEROES_A, 2, 4, ROTATE_NONE ],plExits);
      
      % TO LANGUAGE MASTER
      plExits = Cons([ 3, 11, RID_KOC_HALL_OF_HEROES_B, 2, 4, ROTATE_NONE ],plExits);
      plExits = Cons([ 4, 11, RID_KOC_HALL_OF_HEROES_B, 2, 4, ROTATE_NONE ],plExits);

      propagate;
   }

   CreateStandardObjects()
   {
      local oNews, oStatue;

      oNews = Create(&NewsLink,#nid=NID_TOS_HALL,#name=news_Kocatan_hall,
                     #desc=news_Kocatan_hall_desc);
      Send(self,@NewHold,#what=oNews,#new_row=7,#new_col=7,
           #fine_row=16,#fine_col=32);      

      % Do not create statues here.  We don't know if they are legal.
      propagate;
   }

   CreateStatues()
   {
      local oStatue;

      if NOT pbEverEntered
      {
         return Send(SYS,@GetFailureRsc);
      }

      % The order of the statues is important.  The most important
      % statues are at the end, with the best player being last.
      % The first statues go down the side halls.

      plStatues = $;

      % Alchemy
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_alchemy);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_EAST,
            #new_row=5,#new_col=1,#fine_row=16,#fine_col=24);

      % Knightcraft
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_knightcraft);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_WEST,
            #new_row=5,#new_col=13,#fine_row=16,#fine_col=40);

      % Sorcery
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_sorcery);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_EAST,
            #new_row=7,#new_col=1,#fine_row=48,#fine_col=24);

      % Banditry
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_banditry);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_WEST,
            #new_row=7,#new_col=13,#fine_row=48,#fine_col=40);

      % Witchery
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_witchery);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_EAST,
            #new_row=10,#new_col=1,#fine_row=16,#fine_col=24);

      % Weaponcraft
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_weaponcraft);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_WEST,
            #new_row=10,#new_col=13,#fine_row=16,#fine_col=40);

      % Jala
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_jala);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_WEST,
            #new_row=9,#new_col=11,#fine_row=40,#fine_col=0);

      % Qor
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_qor);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_EAST,
            #new_row=9,#new_col=4,#fine_row=40,#fine_col=0);

      % Shal'ille
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_shalille);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_WEST,
            #new_row=7,#new_col=11,#fine_row=24,#fine_col=0);

      % Kraanan
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_kraanan);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_EAST,
            #new_row=7,#new_col=4,#fine_row=24,#fine_col=0);

      % Faren
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_faren);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_WEST,
            #new_row=5,#new_col=11,#fine_row=8,#fine_col=0);

      % Riija
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_riija);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_EAST,
            #new_row=5,#new_col=4,#fine_row=8,#fine_col=0);

      % Wizard
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_wizard);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_SOUTH_EAST,
            #new_row=2,#new_col=4,#fine_row=24,#fine_col=56);

      % Warrior (skills)
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_warrior);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_SOUTH_WEST,
            #new_row=2,#new_col=10,#fine_row=24,#fine_col=8);

      % Adventurer (overall)
      oStatue = Create(&Statue,#bDefault=TRUE,#desc=hoh_best_adventurer);
      plStatues = Cons(oStatue,plStatues);
      Send(self,@NewHold,#what=oStatue,#new_angle=ANGLE_SOUTH,
            #new_row=1,#new_col=7,#fine_row=32,#fine_col=32);

      Post(self,@UpdateStatues);

      return Send(SYS,@GetSuccessRsc);
   }

   ResetStatues()
   "Admin supported. Resets all of the Hall of Heroes statues."
   {
      local i;

      % Delete statues, clear out "best" lists in lore, then recreate statues.
      foreach i in plStatues
      {	 
         Send(i, @Delete);
      }
      plStatues = $;

      Send(self,@CreateStatues);

      return Send(SYS,@GetSuccessRsc);
   }

   UpdateStatues(lData = $)
   {
      local i, index;

      if plStatues = $
      {
         % Statues haven't been created yet.  No one has entered yet.
         return;
      }

      Send(self,@SetHighestWisdom);
      Send(Nth(plStatues,1),@SetStatue,#original=First(plGreatestAdventurer));
      
      Send(self,@SetHighestWarrior);
      Send(Nth(plStatues,2),@SetStatue,#original=First(plGreatestWarrior));
      
      Send(self,@SetHighestWizard);
      Send(Nth(plStatues,3),@SetStatue,#original=First(plGreatestWizard));
      
      Send(self,@SetRiijaMaster);
      Send(Nth(plStatues,4),@SetStatue,#original=First(plWisestWithRiija));
      
      Send(self,@SetFarenMaster);
      Send(Nth(plStatues,5),@SetStatue,#original=First(plWisestWithFaren));
      
      Send(self,@SetKraananMaster);
      Send(Nth(plStatues,6),@SetStatue,#original=First(plWisestWithKraanan));
      
      Send(self,@SetShalMaster);
      Send(Nth(plStatues,7),@SetStatue,#original=First(plWisestWithShal));
      
      Send(self,@SetQorMaster);
      Send(Nth(plStatues,8),@SetStatue,#original=First(plWisestWithQor));
      
      Send(self,@SetJalaMaster);
      Send(Nth(plStatues,9),@SetStatue,#original=First(plWisestWithJala));
      
      Send(self,@SetWeaponcraftMaster);
      Send(Nth(plStatues,10),@SetStatue,#original=First(plWisestWithWeaponcraft));
      
      Send(self,@SetWitcheryMaster);
      Send(Nth(plStatues,11),@SetStatue,#original=First(plWisestWithWitchery));
      
      Send(self,@SetBanditryMaster);
      Send(Nth(plStatues,12),@SetStatue,#original=First(plWisestWithBanditry));
      
      Send(self,@SetSorceryMaster);
      Send(Nth(plStatues,13),@SetStatue,#original=First(plWisestWithSorcery));
      
      Send(self,@SetKnightcraftMaster);
      Send(Nth(plStatues,14),@SetStatue,#original=First(plWisestWithKnightcraft));
      
      Send(self,@SetAlchemyMaster);
      Send(Nth(plStatues,15),@SetStatue,#original=First(plWisestWithAlchemy));

      if ptUpdateTimer <> $
      {
         DeleteTimer(ptUpdateTimer);
         ptUpdateTimer = $;
      }
      ptUpdateTimer = CreateTimer(self,@UpdateStatues,piUpdateTime);

      return;
   }

   Delete()
   {
      % Get rid of renowned flags
      Send(First(plGreatestAdventurer),@SetRenowned,#value=FALSE);
      Send(First(plGreatestWarrior),@SetRenowned,#value=FALSE);
      Send(First(plGreatestWizard),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithFaren),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithRiija),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithBanditry),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithWitchery),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithWeaponcraft),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithKnightcraft),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithJala),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithShal),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithQor),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithKraanan),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithAlchemy),@SetRenowned,#value=FALSE);
      Send(First(plWisestWithSorcery),@SetRenowned,#value=FALSE);

      % Delete crest items if we're being deleted
      if plWisestWithShal <> $
      {
         Send(First(plWisestWithShal),@DeleteStatueCrest);
      }
      if plWisestWithQor <> $
      {
         Send(First(plWisestWithQor),@DeleteStatueCrest);
      }

      plStatues = $;
      if ptUpdateTimer <> $
      {
         DeleteTimer(ptUpdateTimer);
         ptUpdateTimer = $;
      }

      plGreatestAdventurer = $;
      plGreatestWizard = $;
      plGreatestWarrior = $;
      plWisestWithShal = $;
      plWisestWithQor = $;
      plWisestWithFaren = $;
      plWisestWithRiija = $;
      plWisestWithJala = $;
      plWisestWithKraanan = $;
      plWisestWithBanditry = $;
      plWisestWithWitchery = $;
      plWisestWithSorcery = $;
      plWisestWithKnightcraft = $;
      plWisestWithWeaponcraft = $;
      plWisestWithAlchemy = $;

      propagate;
   }

   SetHighestWisdom()
   {
      local i, curWisdom, oRandomUser;

      if plGreatestAdventurer = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plGreatestAdventurer = [oRandomUser,0];
      }
      else
      {
         Send(First(plGreatestAdventurer),@SetRenowned,#value=FALSE);
      }

      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);
         if plGreatestAdventurer = $
         {
            plGreatestAdventurer = [i,curWisdom];
         }
         else if curWisdom > Nth(plGreatestAdventurer,2)
         {
            plGreatestAdventurer = [i,curWisdom];
         }
      }

      Send(First(plGreatestAdventurer),@SetRenowned,#value=TRUE);

      return;
   }

   SetHighestWizard()
   {
      local i, curWisdom, iMasteryCount, oRandomUser;

      if plGreatestWizard = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plGreatestWizard = [oRandomUser,0,0,0];
      }
      else
      {
         Send(First(plGreatestWizard),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);
         iMasteryCount = 0;

         if Send(i,@HasSpell,#num=SID_BOND)
            OR Send(i,@HasSpell,#num=SID_PORTAL_OF_LIFE)
            OR Send(i,@HasSpell,#num=SID_HOLY_SHIELD)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSpell,#num=SID_GAZE_OF_THE_BASILISK)
            OR Send(i,@HasSpell,#num=SID_DEATH_RIFT)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSpell,#num=SID_LIGHTNING_WALL)
            OR Send(i,@HasSpell,#num=SID_LIGHTNING_STRIKE)
            OR Send(i,@HasSpell,#num=SID_SPORE_BURST)
            OR Send(i,@HasSpell,#num=SID_SEISMIC_FIST)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSpell,#num=SID_SHATTERLOCK)
            OR Send(i,@HasSpell,#num=SID_ANTIMAGIC_AURA)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSpell,#num=SID_ELUSION)
            OR Send(i,@HasSpell,#num=SID_SEDUCE)
            OR Send(i,@HasSpell,#num=SID_SINGULAR_FOCUS)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSpell,#num=SID_CRYSTALIZE_MANA)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSpell,#num=SID_HEX_BLACK_MANTLE)
            OR Send(i,@HasSkill,#num=SKID_OSTRACIZATION)
            OR Send(i,@HasSkill,#num=SKID_BLOOD_RUNES)
            OR Send(i,@HasSkill,#num=SKID_HERMITAGE)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSkill,#num=SKID_EMPOWERMENT)
         {
            iMasteryCount++;
         }

         if plGreatestWizard = $
         {
            plGreatestWizard = [i,curWisdom,Send(i,@GetMaxManaWithoutReservedPenalties),iMasteryCount];
         }
         else
         {
            % Greater level 6 masteries wins first.
            if iMasteryCount > Nth(plGreatestWizard,4)
            {
               plGreatestWizard = [i,curWisdom,Send(i,@GetMaxManaWithoutReservedPenalties),iMasteryCount];
               continue;
            }
            else if iMasteryCount = Nth(plGreatestWizard,4)
               AND Send(i,@GetMaxManaWithoutReservedPenalties) > Nth(plGreatestWizard,3)
            {
               % Max mana wins next.
               plGreatestWizard = [i,curWisdom,Send(i,@GetMaxManaWithoutReservedPenalties),iMasteryCount];
               continue;
            }
            else if curWisdom > Nth(plGreatestWizard,2)
            {
               % Lastly, wisdom.
               plGreatestWizard = [i,curWisdom,Send(i,@GetMaxManaWithoutReservedPenalties),iMasteryCount];
            }
         }
      }

      Send(First(plGreatestWizard),@SetRenowned,#value=TRUE);

      return;
   }

   SetHighestWarrior()
   {
      local i, curWisdom, iMasteryCount, oRandomUser;

      if plGreatestWarrior = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plGreatestWarrior = [oRandomUser,0,0,0];
      }
      else
      {
         Send(First(plGreatestWarrior),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);
         iMasteryCount = 0;

         if Send(i,@HasSkill,#num=SKID_DISARM)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSkill,#num=SKID_ZEALOUS_FERVOR)
            OR Send(i,@HasSkill,#num=SKID_WEAPONMASTER)
         {
            iMasteryCount++;
         }

         if Send(i,@HasSkill,#num=SKID_SPY)
            OR Send(i,@HasSkill,#num=SKID_RECKLESS_HEART)
         {
            iMasteryCount++;
         }

         if plGreatestWarrior = $
         {
            plGreatestWarrior = [i,curWisdom,Send(i,@GetMaxHealth),iMasteryCount];
         }
         else
         {
            % Greater level 6 masteries wins first.
            if iMasteryCount > Nth(plGreatestWarrior,4)
            {
               plGreatestWarrior = [i,curWisdom,Send(i,@GetMaxHealth),iMasteryCount];
               continue;
            }
            else if iMasteryCount = Nth(plGreatestWarrior,4)
               AND Send(i,@GetMaxHealth) > Nth(plGreatestWarrior,3)
            {
               % Max health wins next.
               plGreatestWarrior = [i,curWisdom,Send(i,@GetMaxHealth),iMasteryCount];
               continue;
            }
            else if curWisdom > Nth(plGreatestWarrior,2)
            {
               % Lastly, wisdom.
               plGreatestWarrior = [i,curWisdom,Send(i,@GetMaxHealth),iMasteryCount];
            }
         }
      }

      Send(First(plGreatestWarrior),@SetRenowned,#value=TRUE);

      return;
   }

   SetShalMaster()
   {
      local i, curWisdom, oRandomUser, oSaveLastMaster;

      oSaveLastMaster = $;
      if plWisestWithShal = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithShal = [oRandomUser,0,0];
      }
      else
      {
         oSaveLastMaster = First(plWisestWithShal);
         Send(oSaveLastMaster,@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR Send(i,@IsUserInactive)
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSpell,#num=SID_BOND)
               OR Send(i,@HasSpell,#num=SID_PORTAL_OF_LIFE)
               OR Send(i,@HasSpell,#num=SID_HOLY_SHIELD))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater karma wins first.
         if Send(i,@GetKarma) > Nth(plWisestWithShal,3)
         {
            plWisestWithShal = [i,curWisdom,Send(i,@GetKarma)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithShal,2)
         {
            % Lastly, wisdom.
            plWisestWithShal = [i,curWisdom,Send(i,@GetKarma)];
         }
      }

      if oSaveLastMaster = $
      {
         % There was no previous master. Likely a recreate.
         Send(First(plWisestWithShal),@NewHold,#what=Create(&ShalilleCrest));
      }
      else if First(plWisestWithShal) <> oSaveLastMaster
      {
         % There was a previous master, but not the one we just chose.
         % We have a new master.
         Send(oSaveLastMaster,@DeleteStatueCrest);
         Send(First(plWisestWithShal),@NewHold,#what=Create(&ShalilleCrest));
      }
      else
      {
         % There was a previous master, and it WAS who we chose again. Do nothing.
      }

      Send(First(plWisestWithShal),@SetRenowned,#value=TRUE);

      return;
   }

   SetQorMaster()
   {
      local i, curWisdom, oRandomUser, oSaveLastMaster;

      oSaveLastMaster = $;
      if plWisestWithQor = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithQor = [oRandomUser,0,0];
      }
      else
      {
         oSaveLastMaster = First(plWisestWithQor);
         Send(oSaveLastMaster,@SetRenowned,#value=FALSE);
      }

      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR Send(i,@IsUserInactive)
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSpell,#num=SID_GAZE_OF_THE_BASILISK)
               OR Send(i,@HasSpell,#num=SID_DEATH_RIFT))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Lesser karma wins first.
         if Send(i,@GetKarma) < Nth(plWisestWithQor,3)
         {
            plWisestWithQor = [i,curWisdom,Send(i,@GetKarma)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithQor,2)
         {
            % Lastly, wisdom.
            plWisestWithQor = [i,curWisdom,Send(i,@GetKarma)];
         }
      }

      if oSaveLastMaster = $
      {
         % There was no previous master. Give them the crest.
         Send(First(plWisestWithQor),@NewHold,#what=Create(&QorCrest));
      }
      else if First(plWisestWithQor) <> oSaveLastMaster
      {
         % There was a previous master, but not the one we just chose.
         % We have a new master. Delete the old crest and give a new one.
         Send(oSaveLastMaster,@DeleteStatueCrest);
         Send(First(plWisestWithQor),@NewHold,#what=Create(&QorCrest));
      }
      else
      {
         % There was a previous master, and it WAS who we chose again. Do nothing.
      }

      Send(First(plWisestWithQor),@SetRenowned,#value=TRUE);

      return;
   }

   SetFarenMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithFaren = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithFaren = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithFaren),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSpell,#num=SID_LIGHTNING_WALL)
               OR Send(i,@HasSpell,#num=SID_LIGHTNING_STRIKE)
               OR Send(i,@HasSpell,#num=SID_SPORE_BURST)
               OR Send(i,@HasSpell,#num=SID_SEISMIC_FIST))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater Mysticism wins first.
         if Send(i,@GetMysticism) > Nth(plWisestWithFaren,3)
         {
            plWisestWithFaren = [i,curWisdom,Send(i,@GetMysticism)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithFaren,2)
         {
            % Lastly, wisdom.
            plWisestWithFaren = [i,curWisdom,Send(i,@GetMysticism)];
         }
      }

      Send(First(plWisestWithFaren),@SetRenowned,#value=TRUE);

      return;
   }

   SetRiijaMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithRiija = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithRiija = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithRiija),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSpell,#num=SID_ELUSION)
               OR Send(i,@HasSpell,#num=SID_SEDUCE)
               OR Send(i,@HasSpell,#num=SID_SINGULAR_FOCUS))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater Intellect wins first.
         if Send(i,@GetIntellect) > Nth(plWisestWithRiija,3)
         {
            plWisestWithRiija = [i,curWisdom,Send(i,@GetIntellect)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithRiija,2)
         {
            % Lastly, wisdom.
            plWisestWithRiija = [i,curWisdom,Send(i,@GetIntellect)];
         }
      }

      Send(First(plWisestWithRiija),@SetRenowned,#value=TRUE);

      return;
   }

   SetJalaMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithJala = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithJala = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithJala),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSpell,#num=SID_CRYSTALIZE_MANA))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater mana wins first.
         if Send(i,@GetMaxManaWithoutReservedPenalties) > Nth(plWisestWithJala,3)
         {
            plWisestWithJala = [i,curWisdom,Send(i,@GetMaxManaWithoutReservedPenalties)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithJala,2)
         {
            % Lastly, wisdom.
            plWisestWithJala = [i,curWisdom,Send(i,@GetMaxManaWithoutReservedPenalties)];
         }
      }

      Send(First(plWisestWithJala),@SetRenowned,#value=TRUE);

      return;
   }

   SetKraananMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithKraanan = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithKraanan = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithKraanan),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSpell,#num=SID_SHATTERLOCK)
            OR Send(i,@HasSpell,#num=SID_ANTIMAGIC_AURA))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater stamina wins first.
         if Send(i,@GetStamina) > Nth(plWisestWithKraanan,3)
         {
            plWisestWithKraanan = [i,curWisdom,Send(i,@GetStamina)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithKraanan,2)
         {
            % Lastly, wisdom.
            plWisestWithKraanan = [i,curWisdom,Send(i,@GetStamina)];
         }
      }

      Send(First(plWisestWithKraanan),@SetRenowned,#value=TRUE);

      return;
   }

   SetWeaponcraftMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithWeaponcraft = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithWeaponcraft = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithWeaponcraft),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSkill,#num=SKID_DISARM))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater agility wins first.
         if Send(i,@GetAgility) > Nth(plWisestWithWeaponcraft,3)
         {
            plWisestWithWeaponcraft = [i,curWisdom,Send(i,@GetAgility)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithWeaponcraft,2)
         {
            % Lastly, wisdom.
            plWisestWithWeaponcraft = [i,curWisdom,Send(i,@GetAgility)];
         }
      }

      Send(First(plWisestWithWeaponcraft),@SetRenowned,#value=TRUE);

      return;
   }

   SetKnightcraftMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithKnightcraft = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithKnightcraft = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithKnightcraft),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSkill,#num=SKID_ZEALOUS_FERVOR)
               OR Send(i,@HasSkill,#num=SKID_WEAPONMASTER))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater might wins first.
         if Send(i,@GetMight) > Nth(plWisestWithKnightcraft,3)
         {
            plWisestWithKnightcraft = [i,curWisdom,Send(i,@GetMight)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithKnightcraft,2)
         {
            % Lastly, wisdom.
            plWisestWithKnightcraft = [i,curWisdom,Send(i,@GetMight)];
         }
      }

      Send(First(plWisestWithKnightcraft),@SetRenowned,#value=TRUE);

      return;
   }

   SetBanditryMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithBanditry = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithBanditry = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithBanditry),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSkill,#num=SKID_SPY)
               OR Send(i,@HasSkill,#num=SKID_RECKLESS_HEART))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater might wins first.
         if Send(i,@GetAim) > Nth(plWisestWithBanditry,3)
         {
            plWisestWithBanditry = [i,curWisdom,Send(i,@GetAim)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithBanditry,2)
         {
            % Lastly, wisdom.
            plWisestWithBanditry = [i,curWisdom,Send(i,@GetAim)];
         }
      }

      Send(First(plWisestWithBanditry),@SetRenowned,#value=TRUE);

      return;
   }

   SetSorceryMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithSorcery = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithSorcery = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithSorcery),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSkill,#num=SKID_EMPOWERMENT))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater Mysticism wins first.
         if Send(i,@GetMysticism) > Nth(plWisestWithSorcery,3)
         {
            plWisestWithSorcery = [i,curWisdom,Send(i,@GetMysticism)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithSorcery,2)
         {
            % Lastly, wisdom.
            plWisestWithSorcery = [i,curWisdom,Send(i,@GetMysticism)];
         }
      }

      Send(First(plWisestWithSorcery),@SetRenowned,#value=TRUE);

      return;
   }

   SetWitcheryMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithWitchery = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithWitchery = [oRandomUser,0,0];
      }
      else
      {
         Send(First(plWisestWithWitchery),@SetRenowned,#value=FALSE);
      }
      
      foreach i in Send(SYS,@GetUsers)
      {
         if Send(i,@GetMaxHealth) < 100
            OR IsClass(i,&DM)
            OR Send(i,@IsRenowned)
            OR NOT (Send(i,@HasSpell,#num=SID_HEX_BLACK_MANTLE)
               OR Send(i,@HasSkill,#num=SKID_OSTRACIZATION)
               OR Send(i,@HasSkill,#num=SKID_BLOOD_RUNES)
               OR Send(i,@HasSkill,#num=SKID_HERMITAGE))
         {
            continue;
         }

         curWisdom = Send(i,@GetAccumulatedWisdom);

         % Greater Mysticism wins first.
         if Send(i,@GetMysticism) > Nth(plWisestWithWitchery,3)
         {
            plWisestWithWitchery = [i,curWisdom,Send(i,@GetMysticism)];
            continue;
         }
         else if curWisdom > Nth(plWisestWithWitchery,2)
         {
            % Lastly, wisdom.
            plWisestWithWitchery = [i,curWisdom,Send(i,@GetMysticism)];
         }
      }

      Send(First(plWisestWithWitchery),@SetRenowned,#value=TRUE);

      return;
   }

   SetAlchemyMaster()
   {
      local i, curWisdom, oRandomUser;

      if plWisestWithAlchemy = $
      {
         oRandomUser = Nth(Send(SYS,@GetUsers),Random(1,Length(Send(SYS,@GetUsers))));
         plWisestWithAlchemy = [oRandomUser,curWisdom,Send(oRandomUser,@GetIntellect)];
      }

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
