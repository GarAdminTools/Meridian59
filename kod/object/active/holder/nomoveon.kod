% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NoMoveOn is Holder

constants:

   include blakston.khd

classvars:

   viMoveOn_type = MOVEON_NO

properties:

   % keep our row and col for speed and angle
   piRow
   piCol
   piFine_row = 0
   piFine_col = 0

   % List of enchantments applied by radius spells.
   % Each element is [song object, spellpower, caster]
   % Support for players, monsters, and items
   plRadiusEnchantments = $

messages:

   NewOwner(what = $)
   {
      if what <> $
      {
         piRow = First(Send(what,@GetRoomPos,#what=self));
         piCol = Nth(Send(what,@GetRoomPos,#what=self),2);

         piFine_row = Nth(Send(what,@GetRoomPos,#what=self),3);
         piFine_col = Nth(Send(what,@GetRoomPos,#what=self),4);
      }

      propagate;
   }

   GetRow()
   {
      return piRow;
   }

   GetCol()
   {
      return piCol;
   }

   GetFineRow()
   {
      return piFine_row;
   }

   GetFineCol()
   {
      return piFine_col;
   }

   ReqSomethingMoved(what = $,new_row = $,new_col = $,new_finerow = $,
                     new_finecol = $)
   {
      propagate;
   }

   SomethingMoved(what = $,new_row = $,new_col = $,fine_row = $,fine_col = $)
   {
      if what = self
      {
         %% posted so we know it happens last, and that new_row is going to be
         %% the pre-coords, and piRow is going to be the post.  This was crucial
         %% to making the spam protection on the walls work.

         Post(self,@ChangeCoords,#new_row=new_row,#new_col=new_col,
               #fine_row=fine_row,#fine_col = fine_col);
      }

      propagate;
   }

   ChangeCoords(new_row = $,new_col = $,fine_row = $,fine_col = $)
   {
      %% posted so we know it happens last, and that new_row is going to be
      %% the pre-coords, and piRow is going to be the post.  This was crucial
      %% to making the spam protection on the walls work.

      piRow = new_row;
      piCol = new_col;
      piFine_row = fine_row;
      piFine_col = fine_col;

      return;
   }

   AddRadiusEnchantment(what=$,iPower=0,source=$)
   {
      local i;
      
      foreach i in plRadiusEnchantments
      {
         if Nth(i,1) = what
            AND Nth(i,2) = iPower
            AND Nth(i,3) = source
         {
            return;
         }
      }

      plRadiusEnchantments = Cons([what,iPower,source],plRadiusEnchantments);
      
      If IsClass(self,&User)
      {
         Send(self,@ShowAddEnchantment,#what=what,#type=2);
         
         If source = self
            AND NOT Send(what,@GetOldAreaEnchStyle)
         {
            Send(self,@ShowAddEnchantment,#what=what,#type=1);
         }
      }
      
      return;
   }

   RemoveRadiusEnchantment(what=$,iPower=0,source=$)
   {
      local i;

      foreach i in plRadiusEnchantments
      {
         if Nth(i,1) = what
            AND Nth(i,2) = iPower
            AND Nth(i,3) = source
         {
            If IsClass(self,&User)
            {
               Send(self,@ShowRemoveEnchantment,#what=Nth(i,1),#type=2);

               If source = self
                  AND NOT Send(what,@GetOldAreaEnchStyle)
               {
                  Send(self,@ShowRemoveEnchantment,#what=Nth(i,1),#type=1);
               }
            }
         
            plRadiusEnchantments = DelListElem(plRadiusEnchantments,i);
         }
      }

      return;
   }
   
   IsAffectedByRadiusEnchantment(what=$,caster=$,byClass=&RadiusEnchantment)
   "Returns whether or not currently enchanted by <what> radius enchantment."
   {
      local i;
      
      if plRadiusEnchantments = $
      {
         return FALSE;
      }

      if what = $
      {
         foreach i in plRadiusEnchantments
         {
            if IsClass(Nth(i,1),byClass)
            {
               if caster = $
               {
                  return TRUE;
               }
               else
               {
                  if Nth(i,3) = caster
                  {
                     return TRUE;
                  }
               }
            }
         }
      }
      else
      {
         foreach i in plRadiusEnchantments
         {
            if Nth(i,1) = what
            {
               if caster = $
               {
                  return TRUE;
               }
               else
               {
                  if Nth(i,3) = caster
                  {
                     return TRUE;
                  }
               }
            }
         }      
      }
      
      return FALSE;
   }
   
   GetMostPowerfulRadiusEnchantmentState(byClass=&RadiusEnchantment)
   {
      local i, oHighest;
   
      oHighest = $;
   
      foreach i in plRadiusEnchantments
      {
         if IsClass(Nth(i,1), byClass)
         {
            if oHighest = $
            {
               oHighest = i;
            }
            else
            {
               if Nth(i,2) > Nth(oHighest,2)
               {
                  oHighest = i;
               }
            }
         }
      }
      return oHighest;
   }

   GetRadiusEnchantments()
   {
      return plRadiusEnchantments;
   }

   IsInSameRoom(what = $)
   {
      local oOwner;
      
      oOwner = Send(what,@GetOwner);

      if poOwner <> $
         AND IsClass(poOwner,&Room)
         AND oOwner <> $
         AND IsClass(oOwner,&Room)
         AND poOwner = oOwner
      {
         return TRUE;
      }

      return FALSE;
   }

   PossessesA(class = $)
   "Override from Holder, optimised for NoMoveOn."
   {
      return GetListElemByClass(plPassive,class) <> $;
   }

   SquaredDistanceTo(what = $)
   "Computes squared distance to <what>. Returns $ for any object that is "
   "not within a room."
   {
      local iRow, iCol;
      
      if NOT Send(self,@IsInSameRoom,#what=what)
      {
         return $;
      }

      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);

      % Sanity checking
      if iRow = $ OR iCol = $
         OR piRow = $ OR piCol = $
      {
         return $;
      }

      return send(self,@SquaredDistanceToLocation,#row=iRow,#col=iCol);
   }

   SquaredDistanceToLocation(row = $, col = $)
   "Computes squared distance to (row,col)"
   {
      local iRow_diff, iCol_diff;

      iRow_diff = piRow - row;
      iCol_diff = piCol - col;

      return  (iRow_diff * iRow_diff + iCol_diff * iCol_diff);
   }

   SquaredFineDistanceTo(what = $)
   "Computes squared distance to <what> in fine-units. Returns $ for any "
   "object that is not within a room."
   {
      local iRow, iCol, iFineRow, iFineCol;
      
      if NOT Send(self,@IsInSameRoom,#what=what)
      {
         return $;
      }

      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);
      iFineRow = Send(what,@GetFineRow);
      iFineCol = Send(what,@GetFineCol);

      return Send(self,@SquaredFineDistanceToLocation,#row=iRow,#col=iCol,
                  #fine_row=iFineRow,#fine_col=iFineCol);
   }

   SquaredFineDistanceToLocation(row = $,col = $,fine_row = FINENESS_HALF,
                                 fine_col = FINENESS_HALF)
   "Computes squared distance to (row,col)"
   {
      local iRow, iCol, iRow_diff, iCol_diff, iResult;

      % Sanity check, big row/col can be $.
      if row = $ OR col = $ OR piRow = $ OR piCol = $
      {
         return $;
      }

      % Scale to fine
      iRow = (piRow * FINENESS) + piFine_row;
      iCol = (piCol * FINENESS) + piFine_col;
      row = (row * FINENESS) + fine_row;
      col = (col * FINENESS) + fine_col;

      % Deltas
      iRow_diff = iRow - row;
      iCol_diff = iCol - col;

      iResult = (iRow_diff * iRow_diff + iCol_diff * iCol_diff);
      if iResult < 0
      {
         iResult = MAX_INT;
      }

      return iResult;
   }

   SqFineDistToVision(what = $)
   "Computes squared distance to <what> in fine-units. Optimised for "
   "monster vision check. Returns squared fine units, divide by "
   "FINENESS_SQUARED to compare to squared row/col units."
   {
      local iRow, iCol, iWhatRow, iWhatCol, iRow_diff, iCol_diff, iResult;

      % Scale to fine.
      iRow = piRow * FINENESS + piFine_row;
      iCol = piCol * FINENESS + piFine_col;
      iWhatRow = Send(what,@GetRow) * FINENESS + Send(what,@GetFineRow);
      iWhatCol = Send(what,@GetCol) * FINENESS + Send(what,@GetFineCol);

      % Deltas.
      iRow_diff = iRow - iWhatRow;
      iCol_diff = iCol - iWhatCol;

      iResult = iRow_diff * iRow_diff + iCol_diff * iCol_diff;
      if iResult < 0
      {
         iResult = MAX_INT;
      }

      return iResult;
   }

   SquaredFineDistanceTo3D(what=$)
   {
      local iRow, iCol, iWhatRow, iWhatCol, iRow_diff, iCol_diff, iHeight_diff,
      iResult;

      % Scale to fine.
      iRow = piRow * FINENESS + piFine_row;
      iCol = piCol * FINENESS + piFine_col;
      iWhatRow = Send(what,@GetRow) * FINENESS + Send(what,@GetFineRow);
      iWhatCol = Send(what,@GetCol) * FINENESS + Send(what,@GetFineCol);

      % Deltas.
      iRow_diff = iRow - iWhatRow;
      iCol_diff = iCol - iWhatCol;
      iHeight_diff = Send(self,@GetHeightFloorAtObjectBSP)
                          - Send(what,@GetHeightFloorAtObjectBSP);

      iResult = iRow_diff * iRow_diff + iCol_diff * iCol_diff
                  + iHeight_diff * iHeight_diff;
      if iResult < 0
      {
         iResult = MAX_INT;
      }

      return iResult;
   }

   SquaredFineDistanceToLocation3D(row = $,col = $,fine_row = FINENESS_HALF,
                                 fine_col = FINENESS_HALF)
   {
      local iRow, iCol, iWhatRow, iWhatCol, iRow_diff, iCol_diff, iHeight_diff,
            iResult, iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID;

      % Scale to fine
      iRow = piRow * FINENESS + piFine_row;
      iCol = piCol * FINENESS + piFine_col;
      iWhatRow = (row * FINENESS) + fine_row;
      iWhatCol = (col * FINENESS) + fine_col;

      % set query-flags, here we're only interested in the sectorinfo
      iQflags = LIQ_GET_SECTORINFO;

      % query data from bsp in c-function
      if NOT GetLocationInfoBSP(
                      Send(poOwner,@GetRoomData), iQflags, 
                      Send(self,@GetRow), Send(self,@GetCol),
                      Send(self,@GetFineRow), Send(self,@GetFineCol),
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
      {
         debug("Failed to get location info in ", Send(poOwner,@GetRoomData));
         iHeight_diff = 0;
      }
      else
	  {
         iHeight_diff = Send(self,@GetHeightFloorAtObjectBSP) - iHeightFWD;
	  }
      	
      % Deltas.
      iRow_diff = iRow - iWhatRow;
      iCol_diff = iCol - iWhatCol;

      iResult = iRow_diff * iRow_diff + iCol_diff * iCol_diff
                  + iHeight_diff * iHeight_diff;
      if iResult < 0
      {
         iResult = MAX_INT;
      }

      return iResult;
   }

   SquaredFineDistanceBetweenLocations3D(lLocationOne=$, row = $,col = $,fine_row = FINENESS_HALF,fine_col = FINENESS_HALF)
   {
      local iRow, iCol, iWhatRow, iWhatCol, iRow_diff, iCol_diff, iHeight_diff,
            iResult, iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID;

      % Scale to fine
      iRow = Nth(lLocationOne,1) * FINENESS + Nth(lLocationOne,3);
      iCol = Nth(lLocationOne,2) * FINENESS + Nth(lLocationOne,4);
      iWhatRow = (row * FINENESS) + fine_row;
      iWhatCol = (col * FINENESS) + fine_col;

      % set query-flags, here we're only interested in the sectorinfo
      iQflags = LIQ_GET_SECTORINFO;

      % query data from bsp in c-function
      if NOT GetLocationInfoBSP(
                      Send(poOwner,@GetRoomData), iQflags, 
                      Nth(lLocationOne,1), Nth(lLocationOne,2),
                      Nth(lLocationOne,3), Nth(lLocationOne,4),
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
      {
         debug("Failed to get location info in ", Send(poOwner,@GetRoomData));
         iHeight_diff = 0;
      }
      else
      {
         iHeight_diff = Send(self,@GetHeightFloorAtObjectBSP) - iHeightFWD;
      }
      	
      % Deltas.
      iRow_diff = iRow - iWhatRow;
      iCol_diff = iCol - iWhatCol;

      iResult = iRow_diff * iRow_diff + iCol_diff * iCol_diff
                  + iHeight_diff * iHeight_diff;
      if iResult < 0
      {
         iResult = MAX_INT;
      }

      return iResult;
   }

   AttackIsComingFromSide(what=$,iSide=SIDE_FRONT)
   {
      local iMyAngle, iWhatAngle, iMinBound, iMaxBound;
      % This function just compares the directions we and what are facing during an attack
      % For all single target attacks and spells, the attacker must be facing the defender
      % We can use that relationship to determine an angle without trigonometry

      if what = $
      {
         return FALSE;
      }

      iMyAngle = Send(self,@GetAngle);
      iWhatAngle = Send(what,@GetAngle);

      % On a case of iMyAngle = 0,
      % personal quadrants are 0-1025, 1026-2050, 2051-3075, 3076-4099

      % On a case of iWhatAngle = 0,
      % iMyAngle 1026-3075 means What is in front of us
      % iMyAngle 0-1025 and 3076-4099 means What is behind us
      
      % On a case of iWhatAngle = 512,
      % iMyAngle opposite is 2563
      % iMyAngle 1538 - 3588 means What is in front of us
      % iMyAngle 0-1537 and 3589-4099 means What is behind us

      % The ranges are always 2050 in length.
      % The relationship is such that:
      % iMyAngle being in range 1025 + iWhatAngle to 3075 + iWhatAngle means What is in front of us

      switch(iSide)
      {
         case SIDE_FRONT:
            iMinBound = 1025 + iWhatAngle;
            iMaxBound = 3075 + iWhatAngle;
            break;
         case SIDE_BACK:
            iMinBound = 3075 + iWhatAngle;
            iMaxBound = 5125 + iWhatAngle;
            break;
         case SIDE_LEFT:
            iMinBound = 2050 + iWhatAngle;
            iMaxBound = 4100 + iWhatAngle;
            break;
         case SIDE_RIGHT:
            iMinBound = 0 + iWhatAngle;
            iMaxBound = 2050 + iWhatAngle;
            break;
         case QUADRANT_FRONT_RIGHT:
            iMinBound = 1025 + iWhatAngle;
            iMaxBound = 2050 + iWhatAngle;
            break;
         case QUADRANT_BACK_RIGHT:
            iMinBound = 0 + iWhatAngle;
            iMaxBound = 1025 + iWhatAngle;
            break;
         case QUADRANT_BACK_LEFT:
            iMinBound = 3075 + iWhatAngle;
            iMaxBound = 4100 + iWhatAngle;
            break;
         case QUADRANT_FRONT_LEFT:
            iMinBound = 2050 + iWhatAngle;
            iMaxBound = 3075 + iWhatAngle;
            break;
      }

      if iMaxBound >= 8200
      {
         % Adjust to same iteration
         iMyAngle = iMyAngle + 8200;
      }
      else if iMaxBound >= 4100
      {
         iMyAngle = iMyAngle + 4100;
      }

      if iMyAngle >= iMinBound
         AND iMyAngle <= iMaxBound
      {
         return TRUE;
      }

      return FALSE;
   }

   AttackIsComingFromTheLeft(what=$)
   {
      local iMyAngle, iWhatAngle, iMinBound, iMaxBound;

      if what = $
      {
         return FALSE;
      }

      iMyAngle = Send(self,@GetAngle);
      iWhatAngle = Send(what,@GetAngle);

      % On a case of iMyAngle = 0,
      % personal quadrants are 0-1025, 1026-2050, 2051-3075, 3076-4099

      % On a case of iWhatAngle = 0,
      % iMyAngle 1026-3075 means What is in front of us
      % iMyAngle 0-1025 and 3076-4099 means What is behind us
      
      % On a case of iWhatAngle = 512,
      % iMyAngle opposite is 2563
      % iMyAngle 1538 - 3588 means What is in front of us
      % iMyAngle 0-1537 and 3589-4099 means What is behind us

      % The ranges are always 2050 in length.
      % The relationship is such that:
      % iMyAngle being in range 1025 + iWhatAngle to 3075 + iWhatAngle means What is in front of us

      iMinBound = 1025 + iWhatAngle;
      iMaxBound = 3075 + iWhatAngle;

      if iMaxBound >= 4100
      {
         % Adjust to same iteration
         iMyAngle = iMyAngle + 4100;
      }

      if iMyAngle >= iMinBound
         AND iMyAngle <= iMaxBound
      {
         return TRUE;
      }

      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
