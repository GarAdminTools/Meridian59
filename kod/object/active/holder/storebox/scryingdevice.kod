% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ScryingDevice is StorageBox

constants:

   CHEST_ITEMS_MAX = 500

   include blakston.khd

resources:

   ScryingDevice_name_rsc = "Scrying Device"
   ScryingDevice_icon_rsc = sfpsmall.bgf

   ScryingDevice_desc_rsc = \
      "This strange device seems to have a slot for some sort of crystal foci..."

   the_way_is_opened = \
      "The way is opened... but to where?"

   vrScryingCrystalProjectile = \
      blindring.bgf

   scrying_device_charging_wav_rsc = monsterspellbuild1.wav
   scrying_device_charged_wav_rsc = portal.wav

classvars:

   vrName = ScryingDevice_name_rsc
   vrIcon = ScryingDevice_icon_rsc
   vrDesc = ScryingDevice_desc_rsc

   viBulk_hold_max = $
   viWeight_hold_max = $

properties:

   piPortalCharge = 0
   poChaosStratumRoom = $
   poCurrentPortal = $
   poAnimTarget = $
   
   ptPortalChargeTimer = $

messages:

   Constructor()
   {
      propagate;
   }

   ReqNewHold(what = $, who = $)
   {
      if Send(self,@CanDepositItems,#lItems=[what])
      {
         Post(self,@OpenChaosStratum,#what=what,#who=who,#oCrystal=what);
         return TRUE;
      }
      
      

      propagate;
   }

   CanDepositItems(lItems = $)
   {
      local plItemsStored;

      if lItems = $
      {
         return FALSE;
      }
      
      if NOT IsClass(First(lItems),&ScryingCrystal)
      {
         return FALSE;
      }
      
      if poChaosStratumRoom <> $
         AND Send(poChaosStratumRoom,@IsActive)
      {
         return FALSE;
      }

      plItemsStored = Send(self,@GetHolderPassive);
      if plItemsStored <> $
         AND (Length(plItemsStored) + Length(lItems)) > CHEST_ITEMS_MAX
         AND NOT (Length(lItems) = 1
            AND IsClass(First(lItems),&NumberItem))
      {
         return FALSE;
      }

      return TRUE;
   }

   OpenChaosStratum(what=$,who=$,oCrystal=$)
   {
      local i, each_obj, iCount, oLeagueMaint, oPortal, oRoom, oAnimTarget;

      piPortalCharge = 0;

      foreach i in Send(poOwner,@GetHolderActive)
      {
         each_obj = Send(poOwner,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&InvisibleObject)
         {
            poAnimTarget = each_obj;
         }
      }
      
      if poCurrentPortal <> $
      {
         Send(poCurrentPortal,@Delete);
      }

      poChaosStratumRoom = Send(SYS,@FindRoomByNum,#num=RID_CHAOS_STRATA_START);
      Send(poChaosStratumRoom,@ChaosShift,#iRID=Send(oCrystal,@GetRidBaseRoom),
                                          #boost_chaos_level=Send(oCrystal,@GetChaosLevel),
                                          #iTier=Send(oCrystal,@GetTier),
                                          #iQuality=Send(oCrystal,@CalculateQuality));
      poCurrentPortal = Create(&ChaosStratumPortal,#lLocation=[RID_CHAOS_STRATA_START, Send(poChaosStratumRoom,@GetTeleportRow), Send(poChaosStratumRoom,@GetTeleportCol), 32, 32],#glow_intensity=255);
      Send(poCurrentPortal,@SetDestination,#dest_room_num=RID_CHAOS_STRATA_START,#dest_angle=0,
                                                                            #dest_row=Send(poChaosStratumRoom,@GetTeleportRow),
                                                                            #dest_col=Send(poChaosStratumRoom,@GetTeleportCol),
                                                                            #dest_fine_row=0,
                                                                            #dest_fine_col=0,
                                                                            #glow_color=LIGHT_BPURPLE);
      Send(poChaosStratumRoom,@SetScryingDevice,#oScryingDevice=self);

      if poAnimTarget <> $
      {
         Send(poOwner,@SomethingShot,#who=self,#target=poAnimTarget,
               #projectile=self,#flags=PROJ_FLAG_LIGHT_SOURCE);
      }

      ptPortalChargeTimer = CreateTimer(self,@DoPortalChargeStep,400);

      %oLeagueMaint = Send(SYS,@GetChaosStrataMaintenance);
      %Send(oLeagueMaint,@CreateNewChaosStratum,#oCrystal=oCrystal);
      
      Send(oCrystal,@Delete);

      return;
   }
   
   CalculateQuality(oCrystal=$)
   {
      Debug("quality calculation not done");
      return 0;
   }
   
   ChaosStratumRoomEnded()
   {
      if poCurrentPortal <> $
      {
         Send(poCurrentPortal,@Delete);
      }
      return;
   }
   
   DoPortalChargeStep(timer=$)
   {
      local i, each_obj;

      ptPortalChargeTimer = $;
      
      if piPortalCharge >= 2000
      {
         piPortalCharge = 0;
         Send(poOwner,@NewHold,#what=poCurrentPortal,#new_row=23,#new_col=36,#fine_row=47,#fine_col=48);
         Send(poOwner,@SomethingWaveRoom,#what=self,#wave_rsc=scrying_device_charged_wav_rsc);

         foreach i in Send(poOwner,@GetHolderActive)
         {
            each_obj = Send(poOwner,@HolderExtractObject,#data=i);
            if IsClass(each_obj,&Player)
            {
               Send(each_obj,@MsgSendUser,#message_rsc=the_way_is_opened);
            }
         }
      }
      else
      {
         if poAnimTarget <> $
         {
            Send(poOwner,@SomethingShot,#who=self,#target=poAnimTarget,
                  #projectile=self,#flags=PROJ_FLAG_LIGHT_SOURCE);
         }
         Send(poOwner,@SomethingWaveRoom,#what=self,#wave_rsc=scrying_device_charging_wav_rsc);
         piPortalCharge = piPortalCharge + 400;
         ptPortalChargeTimer = CreateTimer(self,@DoPortalChargeStep,400);
      }
      return;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   %%% Projectile stuff.

   GetProjectileIcon()
   {
      return vrScryingCrystalProjectile;
   }

   GetProjectileSpeed()
   {
      return 3;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 1, 2, 6);   % 40ms between animations

      return;
   }

   GetProjectileLightFlags()
   {
      % Lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      return 100;
   }

   GetProjectileLightColor()
   {
      return LIGHT_BPURPLE;
   }
   
   Delete()
   {
      if ptPortalChargeTimer <> $
      {
         DeleteTimer(ptPortalChargeTimer);
         ptPortalChargeTimer = $;
      }
      poAnimTarget = $;
      poChaosStratumRoom = $;
      poCurrentPortal = $;
      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
