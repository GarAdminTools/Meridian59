% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Forge is StorageBox

% 

constants:

   CHEST_ITEMS_MAX = 1

   include blakston.khd

resources:

   Forge_name_rsc = "magical forge"
   Forge_icon_rsc = anvil.bgf

   Forge_desc_rsc = \
      "What magics the Adventurer's League have learned from "
      "its members may be imbued into items here by a process of "
      "forging and inlaying of runes."
      "\n\nPlace the object inside to begin the forging process."


   category_fire = "fire"
   category_cold = "cold"
   category_acid = "acid"
   category_shock = "shock"
   category_holy = "holy"
   category_unholy = "unholy"
   category_nerudite = "nerudite"
   category_quake = "quake"
   category_illusion = "illusion"
   
   forge_powered_up_msg = \
      "The power of the forge grows by %i points in the realm of %s."

classvars:

   vrName = Forge_name_rsc
   vrIcon = Forge_icon_rsc
   vrDesc = Forge_desc_rsc

   viBulk_hold_max = $
   viWeight_hold_max = $

properties:

   pbActive = FALSE
   
   poHeldItem = $
   poForger = $

messages:

   CanBeForged(what=$)
   {
      if what <> $
      {
         if IsClass(what,&DefenseModifier)
            OR IsClass(what,&Weapon)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   CanPowerUpForge(what=$)
   {
      if what <> $
      {
         if IsClass(what,&ElementalChunk)
            OR IsClass(what,&MajorHeartStone)
            OR IsClass(what,&HeartStone)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   ReqNewHold(what = $, who = $)
   {
      if NOT Send(self,@CanDepositItems,#lItems=[what])
      {
         return FALSE;
      }

      if NOT Send(self,@CanPowerUpForge,#lItems=[what])
         AND NOT NOT Send(self,@CanBeForged,#lItems=[what])
      {
         return FALSE;
      }

      Post(self,@RegisterForger,#what=what,#who=who);
      propagate;
   }

   RegisterForger(what=$,who=$)
   {
      if who <> $
      {
         poForger = who;
      }
      return;
   }
   
   UnregisterForger()
   {
      if poHeldItem <> $
         AND poForger <> $
      {
         Send(poForger,@NewHold,#what=poHeldItem);
         poHeldItem = $;
      }
      poForger = $;
      return;
   }

   CanDepositItems(lItems = $)
   {
      local plItemsStored;

      if lItems = $
      {
         return FALSE;
      }

      plItemsStored = Send(self,@GetHolderPassive);
      if plItemsStored <> $
         AND (Length(plItemsStored) + Length(lItems)) > CHEST_ITEMS_MAX
      {
         return FALSE;
      }
      
      if (IsClass(First(lItems),&NumberItem)
         AND NOT IsClass(First(lItems),&HeartStone))
      {
         return FALSE;
      }

      return TRUE;
   }

   NewHold(what=$)
   {
      if Send(self,@CanPowerUpForge,#what=what)
      {
         Send(self,@PowerUpForge,#what=what);
         Post(what,@Delete);
         propagate;
      }

      if Send(self,@CanBeForged,#what=what)
      {
         poHeldItem = what;
         pbActive = TRUE;
         Post(poOwner,@SomethingChanged,#what=self);
      }
      propagate;
   }

   PowerUpForge(what=$)
   {
      if what <> $
      {
         if IsClass(what,&ElementalChunk)
         {
            Send(SETTINGS_OBJECT,@AddLeagueForgePower,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            Send(self,@InformRoomOfPowerUp,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            return;
         }
         if IsClass(what,&MajorHeartStone)
         {
            Send(SETTINGS_OBJECT,@AddLeagueForgePower,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            Send(self,@InformRoomOfPowerUp,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            return;
         }
         if IsClass(what,&HeartStone)
         {
            Send(SETTINGS_OBJECT,@AddLeagueForgePower,#iAmount=Send(what,@GetForgeValue)*Send(what,@GetNumber),#iType=Send(what,@GetForgeType));
            Send(self,@InformRoomOfPowerUp,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            return;
         }
      }
      return;
   }
   
   InformRoomOfPowerUp(iAmount=0,iType=FORGE_FIRE)
   {
      local i, rString;
      
      rString = category_fire;
      if iType = FORGE_COLD
      {
         rString = category_cold;
      }
      else if iType = FORGE_ACID
      {
         rString = category_acid;
      }
      else if iType = FORGE_SHOCK
      {
         rString = category_shock;
      }
      else if iType = FORGE_HOLY
      {
         rString = category_holy;
      }
      else if iType = FORGE_UNHOLY
      {
         rString = category_unholy;
      }
      else if iType = FORGE_NERUDITE
      {
         rString = category_nerudite;
      }
      else if iType = FORGE_QUAKE
      {
         rString = category_quake;
      }
      else if iType = FORGE_ILLUSION
      {
         rString = category_illusion;
      }
   
      foreach i in Send(poOwner,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Send(First(i),@MsgSendUser,#message_rsc=forge_powered_up_msg,#parm1=iAmount,#parm2=rString);
         }
      }
      return;
   }

   LeaveHold(what=$)
   {
      local i;
      
      poHeldItem = $;
      pbActive = FALSE;
      Post(poOwner,@SomethingChanged,#what=self);

      propagate;
   }

   % Give forge a glow when active.
   SendLightingInformation()
   {
      if pbActive
      {
         AddPacket(2,LIGHT_FLAG_ON);
         % Intensity (out of 255)
         AddPacket(1,1);
         % Color
         AddPacket(2,LIGHT_BRED);
         return;
      }

      propagate;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }
   
   GetForgingItem()
   {
      return poHeldItem;
   }
   
   Delete()
   {
      if poHeldItem <> $
      {
         Send(poHeldItem,@Delete);
      }
      poHeldItem = $;
      propagate;
   }

   GetActive()
   {
      return pbActive;
   }

   SomeoneSaid(what=$,string=$,type=$)
   {
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
