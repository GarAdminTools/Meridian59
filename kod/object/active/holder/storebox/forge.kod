% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Forge is StorageBox

% 

constants:

   CHEST_ITEMS_MAX = 1
   
   TIER_ZERO_POWER = 0
   TIER_ONE_POWER = 1
   TIER_TWO_POWER = 2
   TIER_THREE_POWER = 3
   TIER_FOUR_POWER = 4
   TIER_FIVE_POWER = 5
   TIER_SIX_POWER = 6
   TIER_SEVEN_POWER = 7
   TIER_EIGHT_POWER = 8
   TIER_NINE_POWER = 9
   TIER_TEN_POWER = 10

   include blakston.khd

resources:

   Forge_name_rsc = "magical forge"
   Forge_icon_rsc = anvil.bgf

   Forge_desc_rsc = \
      "What magics the Adventurer's League have learned from "
      "its members may be imbued into items here by a process of "
      "forging and inlaying of runes. The forge itself "
      "may be empowered by a sacrifice of elemental fragments, heartstone shards, "
      "chunks of elemental energy, and major heartstones. "
      "These items will be destroyed, and the forge will grow "
      "stronger."
      "\n\nTo improve an item, place the object inside to begin the forging process. "
      "\n\nWhile you are present in the area, your item "
      "cannot be taken from the forge by anyone else."
   
   forge_powered_up_msg = \
      "The power of the forge grows by %i points in the realm of %s, bringing it to %i points and tier %i."

   forge_active_item = \
      "Your %s becomes surrounded in free-flowing magical energies! To strike while the iron is hot, ~Bchoose a forging category by speaking one out loud.~B This forge "
      "has the capability to smelt in the realms of: "
   forge_category_prompt = \
      "%s - tier %i"
      
   forge_category_choice_command_fire = "fire"
   forge_category_choice_command_cold = "cold"
   forge_category_choice_command_acid = "acid"
   forge_category_choice_command_shock = "shock"
   forge_category_choice_command_holy = "holy"
   forge_category_choice_command_unholy = "unholy"
   forge_category_choice_command_quake = "quake"
   forge_category_choice_command_nerudite = "nerudite"
   forge_category_choice_command_illusion = "illusion"
   
   forge_category_not_available_now = "Something much greater will be needed to access such arcane magics..."
   
   forge_mod_choice_fire_resistance = "fire resistance"
   forge_mod_choice_cold_resistance = "cold resistance"
   forge_mod_choice_acid_resistance = "acid resistance"
   forge_mod_choice_shock_resistance = "shock resistance"
   forge_mod_choice_holy_resistance = "holy resistance"
   forge_mod_choice_unholy_resistance = "unholy resistance"
   
   forge_mod_choice_health = "health"
   forge_mod_choice_mana = "mana"
   forge_mod_choice_vigor = "vigor"
   
   forge_mod_choice_might = "might"
   forge_mod_choice_intellect = "intellect"
   forge_mod_choice_stamina = "stamina"
   forge_mod_choice_agility = "agility"
   forge_mod_choice_mysticism = "mysticism"
   forge_mod_choice_aim = "aim"
   
   forge_mod_choice_melee_offense = "melee offense"
   forge_mod_choice_ranged_offense = "ranged offense"
   forge_mod_choice_melee_damage = "melee damage"
   
   forge_mod_choice_fire_damage = "fire damage"
   forge_mod_choice_cold_damage = "cold damage"
   forge_mod_choice_acid_damage = "acid damage"
   forge_mod_choice_shock_damage = "shock damage"
   forge_mod_choice_holy_damage = "holy damage"
   forge_mod_choice_unholy_damage = "unholy damage"
   
   forge_mod_choice_bludgeon_damage = "bludgeon damage"
   forge_mod_choice_thrust_damage = "thrust damage"
   forge_mod_choice_slash_damage = "slash damage"
   forge_mod_choice_pierce_damage = "pierce damage"
   forge_mod_choice_weapon_damage = "weapon damage"
   
   forge_mod_choice_magic_damage = "magic damage"
   
   forge_mod_choice_defense = "defense"
   forge_mod_choice_armor = "armor"
   forge_mod_choice_bludgeon_resistance = "bludgeon resistance"
   forge_mod_choice_thrust_resistance = "thrust resistance"
   forge_mod_choice_pierce_resistance = "pierce resistance"
   forge_mod_choice_slash_resistance = "slash resistance"

   fire_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of flame are:"
   cold_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of ice are:"
   acid_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of acid are:"
   shock_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of lightning are:"
   holy_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of holiness are:"
   unholy_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of unholiness are:"
   quake_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of kinetic energies are:"
   illusion_realm_contains = \
      "~BSpeak the name of an enchantment to attempt to forge it.~B The available enchantments from the realm of unbridled magic are:"
      
   already_has_a_mod_of_that_type = \
      "The item already has an enchantment of that type!"
   cannot_generate_that_mod = \
      "The item can't be enchanted with that at all."
   mod_limit_for_that_mod = \
      "The item can't have any more enchantments."
   no_space_for_that_mod_prefix = \
      "The item doesn't have the space for more prefix-rune enchantments right now."
   no_space_for_that_mod_suffix = \
      "The item doesn't have the space for more suffix-rune enchantments right now."
   forging_successful = \
      "The forge grows bright as mana is channeled into newly forming runes!"

   need_higher_tier = \
      "To smelt that enchantment, the forge must have at least tier %i in the proper realm of magic."

   need_to_init_category = \
      "None. You must first sacrifice elemental fragments, heartstone shards, chunks of elemental energy, or major heartstones to attune this forge to that realm."

classvars:

   vrName = Forge_name_rsc
   vrIcon = Forge_icon_rsc
   vrDesc = Forge_desc_rsc

   viBulk_hold_max = $
   viWeight_hold_max = $

properties:

   pbActive = FALSE
   
   poHeldItem = $
   poForger = $

messages:

   CanBeForged(what=$)
   {
      if what <> $
      {
         if IsClass(what,&DefenseModifier)
            OR IsClass(what,&Weapon)
            OR IsClass(what,&Ring)
            OR IsClass(what,&Gauntlet)
            OR IsClass(what,&Glove)
            OR IsClass(what,&JewelofFroz)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   CanPowerUpForge(what=$)
   {
      if what <> $
      {
         if IsClass(what,&ElementalChunk)
            OR IsClass(what,&MajorHeartStone)
            OR IsClass(what,&HeartStone)
            OR IsClass(what,&ElementalFragment)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   ReqNewHold(what = $, who = $)
   {
      if NOT Send(self,@CanDepositItems,#lItems=[what])
      {
         return FALSE;
      }

      if NOT Send(self,@CanPowerUpForge,#lItems=[what])
         AND NOT NOT Send(self,@CanBeForged,#lItems=[what])
      {
         return FALSE;
      }

      Post(self,@RegisterForger,#what=what,#who=who);
      propagate;
   }

   RegisterForger(what=$,who=$)
   {
      if who <> $
      {
         poForger = who;
      }
      return;
   }
   
   UnregisterForger()
   {
      if poHeldItem <> $
         AND poForger <> $
      {
         Send(poForger,@NewHold,#what=poHeldItem);
         poHeldItem = $;
      }
      poForger = $;
      return;
   }

   CanDepositItems(lItems = $)
   {
      local plItemsStored;

      if lItems = $
      {
         return FALSE;
      }

      plItemsStored = Send(self,@GetHolderPassive);
      if plItemsStored <> $
         AND (Length(plItemsStored) + Length(lItems)) > CHEST_ITEMS_MAX
      {
         return FALSE;
      }
      
      if (IsClass(First(lItems),&NumberItem)
         AND NOT IsClass(First(lItems),&HeartStone))
      {
         return FALSE;
      }

      return TRUE;
   }

   NewHold(what=$)
   {
      if Send(self,@CanPowerUpForge,#what=what)
      {
         Send(self,@PowerUpForge,#what=what);
         Post(what,@Delete);
         propagate;
      }

      if Send(self,@CanBeForged,#what=what)
      {
         poHeldItem = what;
         pbActive = TRUE;
         Send(self,@InformRoomForgingReady);
         Post(poOwner,@SomethingChanged,#what=self);
      }
      propagate;
   }

   PowerUpForge(what=$)
   {
      if what <> $
      {
         if IsClass(what,&ElementalChunk)
         {
            Send(SETTINGS_OBJECT,@AddLeagueForgePower,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            Send(self,@InformRoomOfPowerUp,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            return;
         }
         if IsClass(what,&MajorHeartStone)
         {
            Send(SETTINGS_OBJECT,@AddLeagueForgePower,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            Send(self,@InformRoomOfPowerUp,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            return;
         }
         if IsClass(what,&HeartStone)
         {
            Send(SETTINGS_OBJECT,@AddLeagueForgePower,#iAmount=Send(what,@GetForgeValue)*Send(what,@GetNumber),#iType=Send(what,@GetForgeType));
            Send(self,@InformRoomOfPowerUp,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            return;
         }
         if IsClass(what,&ElementalFragment)
         {
            Send(SETTINGS_OBJECT,@AddLeagueForgePower,#iAmount=Send(what,@GetForgeValue)*Send(what,@GetNumber),#iType=Send(what,@GetForgeType));
            Send(self,@InformRoomOfPowerUp,#iAmount=Send(what,@GetForgeValue),#iType=Send(what,@GetForgeType));
            return;
         }
      }
      return;
   }
   
   InformRoomOfPowerUp(iAmount=0,iType=FORGE_FIRE)
   {
      local i, iCalculatedTier, iNewPoints;

      iNewPoints = Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),iType);

      foreach i in Send(poOwner,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Send(First(i),@MsgSendUser,#message_rsc=forge_powered_up_msg,
                                       #parm1=iAmount,
                                       #parm2=Send(SYS,@GetForgeCategory,#iType=iType),
                                       #parm3=iNewPoints,
                                       #parm4=Send(self,@CalculateTier,#iPower=iNewPoints));
         }
      }
      return;
   }
   
   InformRoomForgingReady()
   {
      local i, index, lForgePowers;
      
      lForgePowers = Send(SETTINGS_OBJECT,@GetLeagueForgePowers);

      foreach i in Send(poOwner,@GetHolderActive)
      {
         if IsClass(First(i),&Player)
         {
            Send(First(i),@MsgSendUser,#message_rsc=forge_active_item,#parm1=Send(poHeldItem,@Getname));
            index = FORGE_FIRE;
            while index <= Length(lForgePowers)
            {
               if Nth(lForgePowers,index) > 0
               {
                  Send(First(i),@MsgSendUser,#message_rsc=forge_category_prompt,
                                             #parm1=Send(SYS,@GetForgeCategory,#iType=index),
                                             #parm2=Send(self,@CalculateTier,#iPower=Nth(lForgePowers,index)));
               }
               index++;
            }
         }
      }
      return;
   }

   LeaveHold(what=$)
   {
      local i;
      
      poForger = $;
      poHeldItem = $;
      pbActive = FALSE;
      Post(poOwner,@SomethingChanged,#what=self);

      propagate;
   }

   % Give forge a glow when active.
   SendLightingInformation()
   {
      if pbActive
      {
         AddPacket(2,LIGHT_FLAG_ON);
         % Intensity (out of 255)
         AddPacket(1,1);
         % Color
         AddPacket(2,LIGHT_BRED);
         return;
      }

      propagate;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }
   
   GetForgingItem()
   {
      return poHeldItem;
   }
   
   Delete()
   {
      if poHeldItem <> $
      {
         Send(poHeldItem,@Delete);
      }
      poHeldItem = $;
      propagate;
   }

   GetActive()
   {
      return pbActive;
   }

   SomeoneSaid(what=$,string=$,type=$)
   {
      local iCalculatedTier;

      if what <> $
         AND IsClass(what,&Player)
         AND poForger = what
         AND poHeldItem <> $
         AND Send(self,@CanBeForged,#what=poHeldItem)
         AND type = SAY_NORMAL
      {
         if StringEqual(String,forge_category_choice_command_nerudite)
         {
            Post(what,@MsgSendUser,#message_rsc=forge_category_not_available_now);
            return;
         }

         if StringEqual(String,forge_category_choice_command_illusion)
         {
            Post(what,@MsgSendUser,#message_rsc=illusion_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ILLUSION));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_magic_damage);
            }
            return;
         }
         if StringEqual(String,forge_category_choice_command_quake)
         {
            Post(what,@MsgSendUser,#message_rsc=quake_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_QUAKE));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 1
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_bludgeon_damage);
            }
            if iCalculatedTier >= 3
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_thrust_damage);
            }
            if iCalculatedTier >= 5
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_slash_damage);
            }
            if iCalculatedTier >= 7
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_pierce_damage);
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_weapon_damage);
            }
            return;
         }
         if StringEqual(String,forge_category_choice_command_fire)
         {
            Post(what,@MsgSendUser,#message_rsc=fire_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_FIRE));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 1
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_fire_resistance);
            }
            if iCalculatedTier >= 3
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_health);
            }
            if iCalculatedTier >= 5
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_might);
            }
            if iCalculatedTier >= 7
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_thrust_resistance);
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_fire_damage);
            }
            return;
         }
         if StringEqual(String,forge_category_choice_command_cold)
         {
            Post(what,@MsgSendUser,#message_rsc=cold_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_COLD));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 1
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_cold_resistance);
            }
            if iCalculatedTier >= 3
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_mana);
            }
            if iCalculatedTier >= 5
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_agility);
            }
            if iCalculatedTier >= 7
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_slash_resistance);
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_cold_damage);
            }
            return;
         }
         if StringEqual(String,forge_category_choice_command_acid)
         {
            Post(what,@MsgSendUser,#message_rsc=acid_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ACID));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 1
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_acid_resistance);
            }
            if iCalculatedTier >= 3
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_vigor);
            }
            if iCalculatedTier >= 5
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_stamina);
            }
            if iCalculatedTier >= 7
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_armor);
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_acid_damage);
            }
            return;
         }
         if StringEqual(String,forge_category_choice_command_shock)
         {
            Post(what,@MsgSendUser,#message_rsc=shock_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_SHOCK));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 1
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_shock_resistance);
            }
            if iCalculatedTier >= 3
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_intellect);
            }
            if iCalculatedTier >= 5
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_melee_offense);
            }
            if iCalculatedTier >= 7
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_defense);
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_shock_damage);
            }
            return;
         }
         if StringEqual(String,forge_category_choice_command_holy)
         {
            Post(what,@MsgSendUser,#message_rsc=holy_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_HOLY));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 1
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_holy_resistance);
            }
            if iCalculatedTier >= 3
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_mysticism);
            }
            if iCalculatedTier >= 5
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_melee_damage);
            }
            if iCalculatedTier >= 7
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_pierce_resistance);
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_holy_damage);
            }
            return;
         }
         if StringEqual(String,forge_category_choice_command_unholy)
         {
            Post(what,@MsgSendUser,#message_rsc=unholy_realm_contains);
            iCalculatedTier = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_UNHOLY));
            if iCalculatedTier = 0
            {
               Post(what,@MsgSendUser,#message_rsc=need_to_init_category);
               return;
            }
            if iCalculatedTier >= 1
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_unholy_resistance);
            }
            if iCalculatedTier >= 3
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_aim);
            }
            if iCalculatedTier >= 5
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_ranged_offense);
            }
            if iCalculatedTier >= 7
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_bludgeon_resistance);
            }
            if iCalculatedTier >= 9
            {
               Post(what,@MsgSendUser,#message_rsc=forge_mod_choice_unholy_damage);
            }
            return;
         }

         if StringEqual(String,forge_mod_choice_bludgeon_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_QUAKE)) >= 1
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&BludgeonEmpowermentMod,#iType=FORGE_QUAKE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=1);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_thrust_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_QUAKE)) >= 3
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ThrustEmpowermentMod,#iType=FORGE_QUAKE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=3);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_slash_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_QUAKE)) >= 5
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&SlashEmpowermentMod,#iType=FORGE_QUAKE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=5);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_pierce_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_QUAKE)) >= 7
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&PierceEmpowermentMod,#iType=FORGE_QUAKE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=7);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_weapon_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_QUAKE)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&WeaponEmpowermentMod,#iType=FORGE_QUAKE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }
         
         if StringEqual(String,forge_mod_choice_magic_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ILLUSION)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&MagicEmpowermentMod,#iType=FORGE_ILLUSION);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }

         if StringEqual(String,forge_mod_choice_fire_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_FIRE)) >= 1
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&FireResistanceMod,#iType=FORGE_FIRE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=1);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_health)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_FIRE)) >= 3
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&HealthMod,#iType=FORGE_FIRE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=3);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_might)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_FIRE)) >= 5
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&WeaponMightMod,#iType=FORGE_FIRE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=5);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_thrust_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_FIRE)) >= 7
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ThrustResistanceMod,#iType=FORGE_FIRE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=7);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_fire_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_FIRE)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&FireEmpowermentMod,#iType=FORGE_FIRE);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }

         if StringEqual(String,forge_mod_choice_cold_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_COLD)) >= 1
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ColdResistanceMod,#iType=FORGE_COLD);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=1);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_mana)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_COLD)) >= 3
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ManaMod,#iType=FORGE_COLD);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=3);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_agility)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_COLD)) >= 5
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&WeaponAgilityMod,#iType=FORGE_COLD);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=5);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_slash_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_COLD)) >= 7
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&SlashResistanceMod,#iType=FORGE_COLD);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=7);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_cold_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_COLD)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ColdEmpowermentMod,#iType=FORGE_COLD);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }

         if StringEqual(String,forge_mod_choice_acid_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ACID)) >= 1
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&AcidResistanceMod,#iType=FORGE_ACID);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=1);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_vigor)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ACID)) >= 3
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&VigorMod,#iType=FORGE_ACID);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=3);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_stamina)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ACID)) >= 5
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&CasterStamMod,#iType=FORGE_ACID);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=5);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_armor)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ACID)) >= 7
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ArmorMod,#iType=FORGE_ACID);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=7);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_acid_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_ACID)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&AcidEmpowermentMod,#iType=FORGE_ACID);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }

         if StringEqual(String,forge_mod_choice_shock_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_SHOCK)) >= 1
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ShockResistanceMod,#iType=FORGE_SHOCK);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=1);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_intellect)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_SHOCK)) >= 3
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&CasterIntMod,#iType=FORGE_SHOCK);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=3);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_melee_offense)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_SHOCK)) >= 5
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&OffenseMod,#iType=FORGE_SHOCK);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=5);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_defense)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_SHOCK)) >= 7
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&DefenseMod,#iType=FORGE_SHOCK);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=7);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_shock_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_SHOCK)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&ShockEmpowermentMod,#iType=FORGE_SHOCK);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }

         if StringEqual(String,forge_mod_choice_holy_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_HOLY)) >= 1
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&HolyResistanceMod,#iType=FORGE_HOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=1);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_mysticism)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_HOLY)) >= 3
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&CasterMystMod,#iType=FORGE_HOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=3);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_melee_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_HOLY)) >= 5
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&WeaponDamageMod,#iType=FORGE_HOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=5);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_pierce_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_HOLY)) >= 7
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&PierceResistanceMod,#iType=FORGE_HOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=7);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_holy_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_HOLY)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&HolyEmpowermentMod,#iType=FORGE_HOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }

         if StringEqual(String,forge_mod_choice_unholy_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_UNHOLY)) >= 1
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&UnholyResistanceMod,#iType=FORGE_UNHOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=1);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_aim)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_UNHOLY)) >= 3
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&WeaponAimMod,#iType=FORGE_UNHOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=3);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_ranged_offense)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_UNHOLY)) >= 5
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&RangedOffenseMod,#iType=FORGE_UNHOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=5);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_bludgeon_resistance)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_UNHOLY)) >= 7
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&BludgeonResistanceMod,#iType=FORGE_UNHOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=7);
               return;
            }
         }
         if StringEqual(String,forge_mod_choice_unholy_damage)
         {
            if Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),FORGE_UNHOLY)) >= 9
            {
               Post(self,@AttemptForging,#who=what,#oItem=poHeldItem,#cClass=&UnholyEmpowermentMod,#iType=FORGE_UNHOLY);
               return;
            }
            else
            {
               Post(what,@MsgSendUser,#message_rsc=need_higher_tier,#parm1=9);
               return;
            }
         }
      }
      return;
   }

   ReqTaker(what=$,taker=$)
   {
      if poForger <> $
         AND poForger <> taker
         AND Send(poForger,@GetOwner) = Send(self,@GetOwner)
      {
         return FALSE;
      }

      propagate;
   }

   CalculateTier(iPower=0)
   {
      if iPower > 1000000
      {
         return 10;
      }
      if iPower > 7500000
      {
         return 9;
      }
      if iPower > 4800000
      {
         return 8;
      }
      if iPower > 240000
      {
         return 7;
      }
      if iPower > 120000
      {
         return 6;
      }
      if iPower > 60000
      {
         return 5;
      }
      if iPower > 30000
      {
         return 4;
      }
      if iPower > 15000
      {
         return 3;
      }
      if iPower > 5000
      {
         return 2;
      }
      if iPower > 0
      {
         return 1;
      }
      return 0;
   }

   AttemptForging(who=$,oItem=$,cClass=&FireResistanceMod,iType=FORGE_FIRE)
   {
      local i, lPrefixes, lSuffixes, oChosenMod, iRolledPower, bIsPossible, lExistingEnchantmentMods, iPrefixSuffixType,
            iModRangeMin, iModRangeMax, iPowerDivisor, iForgePower;

      if who = $
      {
         return;
      }

      if oItem = $
      {
         return;
      }

      if Send(oItem,@HasMagicModOfClass,#class=cClass)
      {
         Post(who,@MsgSendUser,#message_rsc=already_has_a_mod_of_that_type);
         return FALSE;
      }
      
      lExistingEnchantmentMods = Send(oItem,@GetMagicMods);
      if lExistingEnchantmentMods <> $
         AND Length(lExistingEnchantmentMods) >= 6
      {
         Post(who,@MsgSendUser,#message_rsc=mod_limit_for_that_mod);
         return FALSE;
      }
      
      lPrefixes = Send(oItem,@GetPrefixes);
      lSuffixes = Send(oItem,@GetSuffixes);

      bIsPossible = FALSE;
      foreach i in lPrefixes
      {
         if First(i) = cClass
         {
            bIsPossible = TRUE;
         }
      }

      foreach i in lSuffixes
      {
         if First(i) = cClass
         {
            bIsPossible = TRUE;
         }
      }

      if lPrefixes = $
         AND lSuffixes = $
      {
         return;
      }
      
      if NOT bIsPossible
      {
         Post(who,@MsgSendUser,#message_rsc=cannot_generate_that_mod);
         return FALSE;
      }
      
      oChosenMod = Send(SYS,@GetMagicMod,#class=cClass);
      iPrefixSuffixType = Send(oChosenMod,@GetModType);

      if iPrefixSuffixType = MOD_PREFIX
         AND Send(oItem,@GetMagicModsNumberOfType,#type=MOD_PREFIX) >= 3
      {
         Post(who,@MsgSendUser,#message_rsc=no_space_for_that_mod_prefix);
         return;
      }
      if iPrefixSuffixType = MOD_SUFFIX
         AND Send(oItem,@GetMagicModsNumberOfType,#type=MOD_SUFFIX) >= 3
      {
         Post(who,@MsgSendUser,#message_rsc=no_space_for_that_mod_suffix);
         return;
      }

      iForgePower = Send(self,@CalculateTier,#iPower=Nth(Send(SETTINGS_OBJECT,@GetLeagueForgePowers),iType));
      
      iModRangeMin = Send(oChosenMod,@GetModRangeMin);
      iModRangeMax = Send(oChosenMod,@GetModRangeMax);
      iPowerDivisor = Send(oChosenMod,@GetPowerDivisor);

      % Bring the max from ilvl 300 down to ilvl 200
      iModRangeMax = ((iModRangeMax*2)/3);
      if iModRangeMax < iModRangeMin
      {
         iModRangeMax = iModRangeMin;
      }
      
      iRolledPower = ((iModRangeMax - iModRangeMin) * iForgePower)/10;

      % Now we have a mod that has not already been applied, is in a bin with free space,
      % and empowered by the shard. Let's apply it.
      if Send(oItem,@ApplyMagicMod,#cClass=cClass,#iPower=iRolledPower)
      {
         Post(who,@MsgSendUser,#message_rsc=forging_successful);
         return;
      }

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
