% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TrappedBox is Holder

constants:

   include blakston.khd

   CLEAN_DELAY = 21600000   %% if the chests aren't replaced in 6 hours,
                            %% they delete themselves.

resources:

classvars:

   viBulk_hold_max = 4000
   viWeight_hold_max = $

properties:

   % Placed here so we can change it when locked.
   viObject_flags = OF_CONTAINER

   pbLocked = FALSE
   ptClean = $

messages:

   Constructor(bLocked=$)
   {
      if bLocked
      {
         pbLocked = TRUE;
         viObject_Flags = viObject_Flags & ~OF_CONTAINER;
      }

      propagate;
   }

   ReqNewOwner(what = $)
   {
      return FALSE;
   }

   SendAnimation()
   {
      if pbLocked
      {
         AddPacket(1,ANIMATE_NONE,2,1);
       
         return;
      }

      AddPacket(1,ANIMATE_NONE,2,2);

      return;
   }

   EnterLimbo()
   {
      if poOwner<> $
      {
         Send(poOwner,@LeaveHold,#what=self);
         poOwner = $;
      }

      ptClean = CreateTimer(self,@CleanTimer,CLEAN_DELAY);

      return;
   }

   CleanTimer()
   {
      ptClean = $;
      if poOwner = $
      {
         %Debug("Self-cleaning excess chests.");
         Send(self,@Delete);
      }

      return;
   }

   NewOwner(what=$)
   {
      if what <> $ 
      {
         if ptClean <> $
         {
            DeleteTimer(ptClean);
            ptClean = $;
         }
      }

      propagate;
   }

   Delete()
   {
      if ptClean <> $
      {
         DeleteTimer(ptClean);
         ptClean = $;
      }
      
      Send(SYS,@RemoveChestFromList,#oChest=self);

      propagate;
   }

   ReqNewHold(what = $, who = $)
   {
      local oWhoOwner;

      % The player's owner.
      oWhoOwner = Send(who,@GetOwner);

      if (NOT Send(oWhoOwner,@LineOfSight,#obj1=who,#obj2=self))
      {
         Debug("ALERT!  ",Send(who,@GetTrueName),who," in RID ",
               Send(oWhoOwner,@GetRoomNum),
               " depositing to a chest they cannot see! ");

         return FALSE ;
      }

      if IsClass(who,&User)
         AND NOT IsClass(who,&Admin)
         AND IsClass(oWhoOwner,&Room)
         AND IsClass(poOwner,&Room)
         AND oWhoOwner <> poOwner
      {
         Debug("ALERT!  ",Send(who,@GetTrueName),who," in RID ",
               Send(oWhoOwner,@GetRoomNum),
               " putting into distant chest in RID ",
               Send(poOwner,@GetRoomNum));

         return FALSE;
      }

      if NOT Send(what,@CanBeStoredInVault)
      {
         return FALSE;
      }

      if IsClass(oWhoOwner,&GuildHall)
      {
         return Send(oWhoOwner,@ReqUseGuildChest,#who=who,#oBox=self);
      }

      propagate;
   }

   LockChest(bLocked=$)
   {
      pbLocked = bLocked;

      if pbLocked
      {
         viObject_Flags = viObject_Flags & ~OF_CONTAINER;
         viObject_Flags = viObject_Flags | OF_ACTIVATABLE;
      }

      if NOT pbLocked
      {
         viObject_Flags = viObject_Flags | OF_CONTAINER;
         viObject_Flags = viObject_Flags & ~OF_ACTIVATABLE;
      }
      
      Send(poOwner,@SomethingChanged,#what=self);

      return;
   }

   GetLocked()
   {
      return pbLocked;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
