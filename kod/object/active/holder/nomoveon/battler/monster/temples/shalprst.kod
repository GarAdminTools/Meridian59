% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ShalillePriestess is Temples

constants:

   include blakston.khd

resources:

   include shalprst.lkod

   shalpriestess_name_rsc = "Priestess Xiana"
   shalpriestess_icon_rsc = shalprst.bgf
   shalpriestess_desc_rsc = \
      "Clean and prim, this priestess of peaceful serenity speaks only "
      "kind words.  She even wishes peace on those of Qor and prays for "
      "their redemption.  If you say 'summon' to her, she will summon "
      "your corpse if you have recently died, even if you serve evil."
      "\n\nAdditionally, if you wish to follow Shal'ille's pacifist "
      "philosophy and completely opt out of player combat forever, "
      "you may say 'I wish to follow Shal'ille's way of peace.' This "
      "choice cannot be undone once taken, and you will be unable "
      "to enter many combat-focused areas."
   shal_forget_potion_sale = \
      "~bShould you buy and quaff %s%s, Shal'ille will bless you by "
      "exorcising all traces of Qor from your thoughts.~n~k"

   priestess_token_delivered_rsc = \
      "~bAhhh. I will see that this gets returned to its "
      "rightful councillor. %s~n~k"
   priestess_faction_delivered_rsc = \
      "~bYe seem like a fair person, why do you align yourself with "
      "these political factions?  We'll take care of that.~n~k"
   priestess_neutral_delivered_rsc = \
      "~bOne as pure as you is seldom seen in these days of political "
      "intrigue.  It is so refreshing.~n~k"

   shalpriestess_already_have_spell = \
      "~bLook within yourself, %s, and you will find that light "
      "already shining inside your mind.~n~k"
   shalpriestess_not_ready = \
      "~bThe intricacies of the spiritual hammer can only be grasped by one "
      "who is versed in the ways of the God of Battle.  Seek ye further, "
      "child, and return when your mind has followed His path a ways "
      "longer.~n~k"
   shalillepriestess_teach_song = \
      "Oh, are you one of the followers of Jala?  I do know of a beautiful "
      "ancient hymn that is said to be able to hinder the spells that come "
      "from the darkness.  I am willing to teach it to those that are "
      "able to learn it."
   shalillepriestess_teach = \
      "The benevolence of Shal'ille offers %s%s%s%s%s%s%s%s%s%s%s%s at that "
      "level."

   shalillepriestess_cannot_summon = \
      "~bI cannot yet summon your corpse. You must wait %i more seconds "
      "for the violent energies of your death to dissipate."
   shalillepriestess_summon = "~bI shall aid you in your time of weakness."
   shalillepriestess_summoned = \
      "A benevolent light gently sets your corpse at your feet!"

   shalillepriestess_opt_out_command = \
      "I wish to follow Shal'ille's way of peace."
   shalillepriestess_opt_out_reply = \
      "~bShal'ille's light shall fall upon you always."

   holy_fragments_delivered = \
      "~bHmm..."

   holy_shield_spell_reserved = \
      "~bThat spell is new and powerful, based on magical energies brought to me by crusaders. "
      "Return to me again when you have fully mastered the arts of Shal'ille."

classvars:

   vrTeach_message = shalillepriestess_teach
   vrName = shalpriestess_name_rsc
   vrIcon = shalpriestess_icon_rsc
   vrDesc = shalpriestess_desc_rsc
   viQuestID = QST_ID_SHALILLE_DISCIPLE
   viKarma = 90
   viAttributes = \
      MOB_NOFIGHT | MOB_LISTEN | MOB_RANDOM | MOB_RECEIVE \
      | MOB_TEACHER | MOB_COND_SELLER | MOB_PERM_QUESTER
   viOccupation = MOB_ROLE_PRIESTESS

messages:

   AffectMood(why=$,what=$)
   {
      if why = MOODMOD_DAWN
      {
         Send(self,@SetMood,#new_mood=piMood+3);

         return;
      }

      if why = MOODMOD_DUSK
      {
         Send(self,@SetMood,#new_mood=piMood-3);

         return;
      }

      return;
   }

   Constructor()
   {
      plWantedItems=[&Token];

      propagate;
   }

   HasDoneLearnQuest(who=$)
   {
      return TRUE;
   }

   InitCondSale()
   {
      local oObj;

      oObj=Create(&ForgetPotionQor);
      Send(Send(SYS,@GetLibrary),@AddToMobLib,#mob=self,
            #triggers=[Send(oObj,@GetName)],
            #action=[LIBACT_CONDITIONAL,oObj,2500,Shal_forget_potion_sale]);

      return;
   }

   SetForSale()
   "We make the mob a spell teacher of bless and lighting (as well as"
   "letting her sell chalices for profit. Also, we add a skll for fun"
   {
      plFor_Sale = [
         $,$,
         [
            SID_MINOR_HEAL,
            SID_HOLY_WEAPON,
            SID_DETECT_EVIL,
            SID_HOLY_TOUCH,
            SID_REMOVE_CURSE,
            SID_CURE_POISON,
            SID_CURE_DISEASE,
            SID_RESCUE,
            SID_SPIRITUAL_HAMMER,
            SID_MARK_OF_DISHONOR,
            SID_PURIFY,
            SID_BREATH_OF_LIFE,
            SID_FORCES_OF_LIGHT,
            SID_MAJOR_HEAL,
            SID_UMBRELLA,
            SID_PORTAL_OF_LIFE,
            SID_HOLY_SYMBOL,
            SID_FINAL_RITES,
            SID_SEANCE,
            SID_RESIST_ACID,
            SID_DAZZLE,
            SID_SACRED_RESONANCE,
            SID_HOLY_SHIELD
         ],
      $];

      return;
   }

   CanDoTeach(who=$,sid=0)
   {
      local i;

      if sid = SID_SPIRITUAL_HAMMER
         AND NOT Send(self,@CanAddSpell,#report=TRUE,#who=who,#num=sid)
      {
         return FALSE;
      }

      if sid = SID_SACRED_RESONANCE
      {
         Send(self,@SayToOne,#target=who,
               #message_rsc=shalillepriestess_teach_song);
      }
      
      if sid = SID_HOLY_SHIELD
         AND NOT Send(self,@CanAddSpell,#report=TRUE,#who=who,#num=sid)
      {
         return FALSE;
      }

      propagate;
   }

   CanAddSpell(who=$,num=0,report=FALSE)
   {
      local i, oSpell, bFound;

      if who = $ OR num = 0
      {
         Debug("Called CanAddSpell with bad parameters!");

         return FALSE;
      }

      if Send(who,@HasSpell,#num=num)
      {
         if report
         {
            Post(self,@SayToOne,#target=who,
               #message_rsc=shalpriestess_already_have_spell,
               #parm1=Send(who,@GetName));
         }

         return FALSE;
      }

      if num = SID_SPIRITUAL_HAMMER
      {
         bFound = FALSE;
         foreach i in Send(who,@GetSpellList)
         {
            oSpell = Send(SYS,@FindSpellByNum,
                           #num=Send(who,@DecodeSpellNum,#compound=i));
            if Send(oSpell,@GetSchool) = SS_KRAANAN
               AND Send(oSpell,@GetLevel) > 2
            {
               % Player has a high enough level spell in the required
               % school, can learn the spell.
               bFound = TRUE;

               break;
            }
         }

         % Player doesn't have a high enough level spell in the
         % required school, denied.
         if NOT bFound
         {
            if report
            {
               Post(self,@SayToOne,#target=who,#message_rsc=shalpriestess_not_ready);
            }

            return FALSE;
         }
      }

      if num = SID_HOLY_SHIELD
         AND NOT Send(who,@HasCompletedQuestChain,#chain_num=SHAL6_CHAIN)
      {
         if report
         {
            Send(self,@SayToOne,#target=who,
                  #message_rsc=holy_shield_spell_reserved);
         }
         return FALSE;
      }

      propagate;
   }

   ReqGive(what = $, item_list = $)
   {
      if item_list <> $
         AND Length(item_list) = 1
      {
         if IsClass(First(item_list),&HolyFragment)
            AND Send(First(item_list),@GetNumber) >= 100
         {
            Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
                  #string=holy_fragments_delivered);
            Send(what,@GavePassiveQuestItem,#obj=First(item_list),#the_npc=self);
            return TRUE;
         }
      }
      propagate;
   }

   CheckWhyWanted(obj=$,who=$)
   {
      local temp_rsc, oGame;

      if NOT isClass(obj,&Token)
      {
         propagate;
      }

      oGame = Send(SYS,@GetTokenGame);

      if oGame <> $
         AND Send(oGame,@IsTokenReal,#obj=obj)
      {
         if Send(who,@GetFaction)<>FACTION_NEUTRAL
         {
            temp_rsc=priestess_faction_delivered_rsc;
         }
         else
         {
            temp_rsc=priestess_neutral_delivered_rsc;
         }

         Send(oGame,@IncreaseScandalChance);
         Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
               #string=priestess_token_delivered_rsc,#parm1=temp_rsc);

         return TRUE;
      }

      propagate;
   }

   GetFaction()
   {
      return FACTION_NEUTRAL;
   }

   UserEntered(who = $)
   {
      if Send(who,@GetHomeRoom) = RID_MAR_INN
      {
         Send(self,@SetMood,#new_mood=piMood+2);
      }

      if Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         Send(self,@SetMood,#new_mood=piMood-2);

         propagate;
      }

      if Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
      {
         Send(self,@SetMood,#new_mood=piMood-1);
      }

      propagate;
   }

   SomeoneSaid(what=$,type=$,string=$)
   {
      local oCorpse;

      if type = SAY_YELL OR NOT IsClass(what,&User)
      {
          propagate;
      }

      if StringContain(string,"summon")
         AND what <> $
         AND IsClass(what,&User)
         AND Send(what,@GetCorpse) <> $
      {
         oCorpse = Send(what,@GetCorpse);
         
         if NOT Send(oCorpse,@GetSummonable)
         {
            Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
		          #string=shalillepriestess_cannot_summon,#parm1=Send(oCorpse,@GetSummonTime)/1000);
            propagate;
         }
      
         Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
		       #string=shalillepriestess_summon);
         Send(poOwner,@NewHold,#what=oCorpse,#new_row=Send(what,@GetRow),
               #new_col=Send(what,@GetCol));
         Send(what,@MsgSendUser,#message_rsc=shalillepriestess_summoned);
      }

      if StringContain(string,shalillepriestess_opt_out_command)
         AND what <> $
         AND IsClass(what,&User)
         AND Send(SETTINGS_OBJECT,@GetAllowOptOutPvP)
      {
         Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
		       #string=shalillepriestess_opt_out_reply);
      
         Send(what,@OptOutPvP);
      }

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
