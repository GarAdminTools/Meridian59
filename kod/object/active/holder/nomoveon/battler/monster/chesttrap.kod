% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ChestTrap is Monster

constants:

   include blakston.khd

resources:

   chest_trap_name_rsc = "trapped chest"
   chest_trap_icon_rsc = rat.bgf
   chest_trap_desc_rsc = \
      "This is a template object. How are you seeing this?"

   chest_trap_dead_icon_rsc = ratX.bgf
   chest_trap_dead_name_rsc = "dead trapped chest"

   chest_trap_sound_hit = rat_atkh.wav
   chest_trap_sound_miss = rat_atkm.wav
   chest_trap_sound_death = rat_dth.wav
   chest_trap_sound_aware = rat_awr.wav

classvars:

   vrName = chest_trap_name_rsc
   vrIcon = chest_trap_icon_rsc
   vrDesc = chest_trap_desc_rsc
   vrDead_icon = chest_trap_dead_icon_rsc
   vrDead_name = chest_trap_dead_name_rsc

   viTreasure_type = TID_NONE

   viSpeed = SPEED_FAST
   viAttack_type = ATCK_WEAP_CLAW
   viAttributes = 0
   viLevel = 30
   viDifficulty = 1
   viVisionDistance = 6
   viKarma = -20
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_SWITCHALOT
   viCashmin = 150
   viCashmax = 250

   vrSound_hit = chest_trap_sound_hit
   vrSound_miss = chest_trap_sound_miss
   vrSound_aware = chest_trap_sound_aware
   vrSound_death = chest_trap_sound_death

   viBaseSize = 30

properties:

   piAnimation = ANIM_NONE

messages:

   Constructed()
   {
      plResistances = [ [-ATCK_SPELL_FIRE, -20],
                        [ATCK_WEAP_BLUDGEON, -10],
                        [ATCK_WEAP_SLASH, 20] ];

      plCreatureTypes = Cons(CREATURE_TYPE_MUNDANE,plCreatureTypes);
      plCreatureTypes = Cons(CREATURE_TYPE_ANIMAL,plCreatureTypes);

      propagate;
   }

   MonsterAttack(what = $)
   {
      % add in any attack animation calls
      Send(self,@DoSlash);

      return;
   }

   DoSlash()
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,125,2,2,2,6);

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,75,2,2,2,6);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,100,2,7,2,11,2,1);

         return;
      }

      % if no body animation

      propagate;
   }

   IsAlly(target = $)
   {
      if IsClass(target,&GiantRat)
      {
         return TRUE;
      }
   
      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
