% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Marauder is Human

constants:

   include blakston.khd

   EQUIPMENT_DROP_PERCENT = 100

resources:

   % in increasing order of agony
   marauder_sound_male_ouch1 = ouchm1.wav
   marauder_sound_male_ouch2 = ouchm2.wav
   marauder_sound_male_ouch3 = ouchm3.wav
   marauder_sound_male_ouch4 = ouchm4.wav

   marauder_sound_female_ouch1 = ouchf1.wav
   marauder_sound_female_ouch2 = ouchf2.wav
   marauder_sound_female_ouch3 = ouchf3.wav
   marauder_sound_female_ouch4 = ouchf4.wav
   
   marauder_through_walls_rsc = "%s activates %s wallhack! What a cheater!"

classvars:

   vrName = NomadBandit_name_rsc
   vrDesc = NomadBandit_desc_rsc
   vrDead_name = NomadBandit_dead_name_rsc

   viTreasure_type = TID_NONE

   viSpeed = SPEED_FASTER
   viAttack_type = ATCK_WEAP_SLASH
   viAttributes = 0
   viDefault_behavior = AI_MOVE_REGROUP | \
      AI_FIGHT_AGGRESSIVE |  AI_FIGHT_WIZARD_KILLER | AI_FIGHT_HYPERAGGRESSIVE | AI_FIGHT_SINGLEMINDED

   viColorTranslate1 = XLAT_TO_ORANGE     % Shirt
   viColorTranslate2 = XLAT_TO_ORANGE   % Pants

   vcShieldClass = &GuildShield
   viShieldColor1 = XLAT_TO_RED
   viShieldColor2 = XLAT_TO_RED
   viShieldShape = SHIELDSHAPE_SLASH
   viInsignia = $

   viVisionDistance = 35

   viCashMin = 1500
   viCashMax = 60000

   viCanSpawnAsChampion = FALSE

   viLeadershipCost = 2200

properties:

   piBaseLevel = 150
   piBaseDifficulty = 6

   %Here so they can be set
   vrIcon = human_male_icon_rsc
   vrDead_Icon = human_dead_male_icona_rsc
   vrDead_Legs = human_dead_male_iconb_rsc
   viLevel = 150         % piBaseLevel
   viDifficulty = 6     % piBaseDifficulty
   piGender = GENDER_MALE
   viKarma = 0
   
   psURL = $
   
   piMoveSpeed = 40
   
   vrSound_aware = $
   
   ptAggroTimer = $
   
   piFailedAggroChecks = 0

messages:

   Constructed()
   {
      if ptAggroTimer = $
      {
         ptAggroTimer = CreateTimer(self,@DoAggroCheck,5000);
      }
      propagate;
   }

   SomethingLeft(what = $, iRow=0, iCol=0)
   "Follow the enemy!"
   {
      if poMaster = $
         AND what <> $
         AND IsClass(what,&Player)
         AND Send(self,@GetTarget) = what
      {
         Post(self,@MarauderFollow,#who=what);
         Post(self,@DeactivateWallhack);
      }

      propagate;
   }
   
   DoAggroCheck(timer=$)
   {
      ptAggroTimer = $;
      
      if poOwner <> $
      {
         ptAggroTimer = CreateTimer(self,@DoAggroCheck,5000);
      }
      
      if poTarget <> $
      {
         return;
      }
      
      if Send(self,@AggroPlayers)
      {
         piFailedAggroChecks = 0;
      }
      else
      {
         piFailedAggroChecks++;
      }
      
      if piFailedAggroChecks > 24
      {
         Post(self,@Delete);
      }
      
      return;
   }

   IsAlly(target = $, regroup = FALSE)
   {
      if IsClass(target,&Monster)
      {
         return TRUE;
      }

      propagate;
   }

   GetObjectFlags()
   {
      local iFlags, oIllusion;

      iFlags = OF_ATTACKABLE | OF_PLAYER | OF_DISPLAY_NAME;

      % Get the flashing/flickering/phasing/bouncing flags.
      iFlags = iFlags | piDrawEffectFlag;

      return iFlags;
   }

   GetPlayerNameColor()
   {
      local iDrawFX, iFlags;

      iFlags = 0;

      % Check for any shadow form effects.
      iDrawfX = Send(self,@GetDrawingEffects);
      if (iDrawFX & DRAWFX_BLACK) = DRAWFX_BLACK
      {
         iFlags = iFlags | NC_SHADOW;
      }

      iFlags = iFlags | NC_KILLER;

      return iFlags;
   }

   GetClientObjectType()
   {
      return OT_KILLER;
   }

   GetURL()
   {
      return psURL;
   }

   GetOuchSound()
   {
      local iHealthFraction;

      % Since piHealth is inflated by a factor of 100, 
      % this returns the correct fraction.
      if piMax_Hit_points > 0
      {
         iHealthFraction = piHit_points / piMax_Hit_points;
      }
      else
      {
         iHealthFraction = 0;
      }

      if piGender = GENDER_MALE
      {
         if iHealthFraction > 75
         {
            return marauder_sound_male_ouch1;
         }

         if iHealthFraction > 50
         {
            return marauder_sound_male_ouch2;
         }

         if iHealthFraction > 25
         {
            return marauder_sound_male_ouch3;
         }

         return marauder_sound_male_ouch4;
      }

      if iHealthFraction > 75
      {
         return marauder_sound_female_ouch1;
      }

      if iHealthFraction > 50
      {
         return marauder_sound_female_ouch2;
      }

      if iHealthFraction > 25
      {
         return marauder_sound_female_ouch3;
      }

      return marauder_sound_female_ouch4;
   }

   MarauderFollow(who=$)
   {
      local oNewRoom;

      if who = $
      {
         return;
      }

      oNewRoom = Send(who,@GetOwner);
      if oNewRoom = $
      {
         return;
      }
       
      if IsClass(oNewRoom,&GuildHall)
         OR Send(oNewRoom,@CheckRoomFlag,#flag=ROOM_NO_COMBAT)
         OR Send(oNewRoom,@CheckRoomFlag,#flag=ROOM_SANCTUARY)
         OR Send(oNewRoom,@CheckRoomFlag,#flag=ROOM_SAFE_DEATH)
         OR poOwner = $
      {
         return;
      }

      Send(oNewRoom,@NewHold,#what=self,
            #new_row=Send(who,@GetRow),#new_col=Send(who,@GetCol),
            #fine_row=Send(who,@GetFineRow),#fine_col=Send(who,@GetFineCol),
            #new_angle=Send(who,@GetAngle));

      return;
   }
   
   AggroPlayers()
   {
      local i, each_obj;
      
      if poOwner <> $
      {
         foreach i in Send(poOwner,@GetHolderActive)
         {
            each_obj = Send(poOwner,@HolderExtractObject,#data=i);
            if IsClass(each_obj,&Player)
            {
               Send(self,@TargetSwitch,#what=each_obj,#iHatred=100);
               Send(self,@EnterStateChase,#target=each_obj,#actnow=TRUE);
               
               return TRUE;
            }
         }
      }
      return FALSE;
   }
   
   NewOwner()
   {
      Post(self,@AggroPlayers);
      propagate;
   }

   CreateTreasure(who = $, corpse = $,ladderID=0)
   {
      local oTreasure, iNumber, iNumberOfReagentsDropped, lReagentClasses, oUsedItem, oItemAtt, 
            lItemClasses, iNumLoot, lShirtClasses, lPantsClasses, lMaskClasses;

      lReagentClasses = $;
      lReagentClasses = Cons(&DarkAngelFeather,lReagentClasses);
      lReagentClasses = Cons(&WebMoss,lReagentClasses);
      lReagentClasses = Cons(&BlueDragonScale,lReagentClasses);
      lReagentClasses = Cons(&DragonflyEye,lReagentClasses);
      lReagentClasses = Cons(&ElderBerry,lReagentClasses);
      lReagentClasses = Cons(&Diamond,lReagentClasses);
      lReagentClasses = Cons(&Emerald,lReagentClasses);
      lReagentClasses = Cons(&EntrootBerry,lReagentClasses);
      lReagentClasses = Cons(&FairyWing,lReagentClasses);
      lReagentClasses = Cons(&Herbs,lReagentClasses);
      lReagentClasses = Cons(&KriipaClaw,lReagentClasses);
      lReagentClasses = Cons(&RainbowFern,lReagentClasses);
      lReagentClasses = Cons(&BlueMushroom,lReagentClasses);
      lReagentClasses = Cons(&CyanMushroom,lReagentClasses);
      lReagentClasses = Cons(&GrayMushroom,lReagentClasses);
      lReagentClasses = Cons(&GreenMushroom,lReagentClasses);
      lReagentClasses = Cons(&PurpleMushroom,lReagentClasses);
      lReagentClasses = Cons(&RedMushroom,lReagentClasses);
      lReagentClasses = Cons(&Mushroom,lReagentClasses);
      lReagentClasses = Cons(&YellowMushroom,lReagentClasses);
      lReagentClasses = Cons(&OrcTooth,lReagentClasses);
      lReagentClasses = Cons(&PolishedSeraphym,lReagentClasses);
      lReagentClasses = Cons(&Yrxlsap,lReagentClasses);
      lReagentClasses = Cons(&Ruby,lReagentClasses);
      lReagentClasses = Cons(&ShamanBlood,lReagentClasses);
      lReagentClasses = Cons(&Sapphire,lReagentClasses);
      lReagentClasses = Cons(&Solagh,lReagentClasses);
      lReagentClasses = Cons(&UncutSeraphym,lReagentClasses);
      
      lItemClasses = $;
      lItemClasses = Cons(&MysticSword,lItemClasses);
      lItemClasses = Cons(&Scimitar,lItemClasses);
      lItemClasses = Cons(&Axe,lItemClasses);
      lItemClasses = Cons(&Hatchet,lItemClasses);
      lItemClasses = Cons(&ShortSword,lItemClasses);
      lItemClasses = Cons(&Dagger,lItemClasses);
      lItemClasses = Cons(&Hammer,lItemClasses);
      lItemClasses = Cons(&Mace,lItemClasses);
      lItemClasses = Cons(&NeruditeSword,lItemClasses);
      lItemClasses = Cons(&BanditScimitar,lItemClasses);
      lItemClasses = Cons(&BattleBow,lItemClasses);
      lItemClasses = Cons(&Longbow,lItemClasses);
      lItemClasses = Cons(&CasterMace,lItemClasses);
      lItemClasses = Cons(&Flail,lItemClasses);
      lItemClasses = Cons(&Maul,lItemClasses);
      lItemClasses = Cons(&DiscipleRobe,lItemClasses);
      lItemClasses = Cons(&LightDiscipleRobe,lItemClasses);
      lItemClasses = Cons(&PlateArmor,lItemClasses);
      lItemClasses = Cons(&NeruditeArmor,lItemClasses);
      lItemClasses = Cons(&ChainArmor,lItemClasses);
      lItemClasses = Cons(&LeatherArmor,lItemClasses);
      lItemClasses = Cons(&ScaleArmor,lItemClasses);
      lItemClasses = Cons(&SimpleHelm,lItemClasses);
      lItemClasses = Cons(&SpikedHelm,lItemClasses);
      lItemClasses = Cons(&Circlet,lItemClasses);
      lItemClasses = Cons(&IvyCirclet,lItemClasses);
      lItemClasses = Cons(&KnightHelm,lItemClasses);
      lItemClasses = Cons(&RunedHelm,lItemClasses);
      
      lShirtClasses = $;
      lShirtClasses = Cons(&Shirt,lShirtClasses);
      lShirtClasses = Cons(&Tanktop,lShirtClasses);
      
      lPantsClasses = $;
      lPantsClasses = Cons(&Skirt,lPantsClasses);
      lPantsClasses = Cons(&PantsA,lPantsClasses);
      lPantsClasses = Cons(&PantsB,lPantsClasses);
      lPantsClasses = Cons(&PantsC,lPantsClasses);
      lPantsClasses = Cons(&PantsD,lPantsClasses);
      lPantsClasses = Cons(&ShortSkirt,lPantsClasses);
      
      lMaskClasses = $;
      lMaskClasses = Cons(&AntMask,lMaskClasses);
      lMaskClasses = Cons(&XeoMask,lMaskClasses);
      lMaskClasses = Cons(&DaemonMask,lMaskClasses);
      lMaskClasses = Cons(&FeyMask,lMaskClasses);
      lMaskClasses = Cons(&KriipaMask,lMaskClasses);
      lMaskClasses = Cons(&MummyMask,lMaskClasses);
      lMaskClasses = Cons(&RatMask,lMaskClasses);
      lMaskClasses = Cons(&ShrunkenHeadMask,lMaskClasses);
      lMaskClasses = Cons(&StoneTrollMask,lMaskClasses);
      lMaskClasses = Cons(&SkullMask,lMaskClasses);
      lMaskClasses = Cons(&TrollMask,lMaskClasses);
      
      iNumberOfReagentsDropped = Random(10,30);
      
      while iNumberOfReagentsDropped > 0
      {
         oTreasure = Create(Nth(lReagentClasses,Random(1,Length(lReagentClasses))),#corpse=corpse,#ladderID=1);
         iNumber = Random(5,35);
         Send(oTreasure,@AddNumber,#number=iNumber);

         if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
         {
            Send(poOwner,@NewHold,#what=oTreasure,
                  #new_row=piRow,#new_col=piCol,
                  #fine_row=piFine_row,#fine_col=piFine_col);
         }
         else
         {
            Send(oTreasure,@Delete);
         }
         iNumberOfReagentsDropped--;
      }

      iNumLoot = Random(2,7);
      
      while iNumLoot > 0
      {
         oTreasure = Create(Nth(lItemClasses,Random(1,Length(lItemClasses))),#corpse=corpse,#ladderID=1,#level=Bound(viLevel,20,240));
         Post(oTreasure,@RollLootMods,#oMonster=self);

         if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
         {
            Send(poOwner,@NewHold,#what=oTreasure,
                  #new_row=piRow,#new_col=piCol,
                  #fine_row=piFine_row,#fine_col=piFine_col);
         }
         else
         {
            Send(oTreasure,@Delete);
         }
         iNumLoot--;
      }

      iNumLoot = 1;
      
      while iNumLoot > 0
      {
         oTreasure = Create(Nth(lShirtClasses,Random(1,Length(lShirtClasses))),#corpse=corpse,#ladderID=1,#level=Bound(viLevel,20,240));
         Post(oTreasure,@RollLootMods,#oMonster=self);
         Send(oTreasure,@Randomize);

         if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
         {
            Send(poOwner,@NewHold,#what=oTreasure,
                  #new_row=piRow,#new_col=piCol,
                  #fine_row=piFine_row,#fine_col=piFine_col);
         }
         else
         {
            Send(oTreasure,@Delete);
         }
         iNumLoot--;
      }

      iNumLoot = 1;
      
      while iNumLoot > 0
      {
         oTreasure = Create(Nth(lPantsClasses,Random(1,Length(lPantsClasses))),#corpse=corpse,#ladderID=1,#level=Bound(viLevel,20,240));
         Post(oTreasure,@RollLootMods,#oMonster=self);
         Send(oTreasure,@Randomize);

         if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
         {
            Send(poOwner,@NewHold,#what=oTreasure,
                  #new_row=piRow,#new_col=piCol,
                  #fine_row=piFine_row,#fine_col=piFine_col);
         }
         else
         {
            Send(oTreasure,@Delete);
         }
         iNumLoot--;
      }

      iNumLoot = Random(-2,1);
      
      while iNumLoot > 0
      {
         oTreasure = Create(Nth(lMaskClasses,Random(1,Length(lMaskClasses))),#corpse=corpse,#ladderID=1,#level=Bound(viLevel,20,240));
         Post(oTreasure,@RollLootMods,#oMonster=self);
         Send(oTreasure,@Randomize);

         if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
         {
            Send(poOwner,@NewHold,#what=oTreasure,
                  #new_row=piRow,#new_col=piCol,
                  #fine_row=piFine_row,#fine_col=piFine_col);
         }
         else
         {
            Send(oTreasure,@Delete);
         }
         iNumLoot--;
      }

      oTreasure = Create(&Money,#corpse=corpse,#ladderID=1);
      iNumber = Random(500,35000);
      Send(oTreasure,@AddNumber,#number=iNumber);
      if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
      {
         Send(poOwner,@NewHold,#what=oTreasure,
               #new_row=piRow,#new_col=piCol,
               #fine_row=piFine_row,#fine_col=piFine_col);
      }
      else
      {
         Send(oTreasure,@Delete);
      }

      oItemAtt = Send(SYS,@FindItemAttByNum,#num=IA_CORPSEPOINTER);

      foreach oUsedItem in plUsing
      {
         if NOT pbIllusion
            AND NOT IsClass(oUsedItem,&MithrilShield)
            AND NOT IsClass(oUsedItem,&SoldierShield)
         {
            if (oItemAtt <> $) AND Send(oItemAtt,@ReqAddToItem,#oItem=oUsedItem)
            {
               Send(oItemAtt,@AddToItem,#oItem=oUsedItem,#state1=corpse);
            }
            
            Send(oUsedItem,@SetLadderID,#value=1);

            Send(poOwner,@NewHold,#what=oUsedItem,
                  #new_row=piRow,#new_col=piCol,
                  #fine_row=piFine_row,#fine_col=piFine_col);
         }
         else
         {
            Send(oUsedItem,@Delete);
         }
      }

      plUsing = $;

      return;
   }
   
   Delete()
   {
      if ptAggroTimer <> $
      {
         DeleteTimer(ptAggroTimer);
      }
      ptAggroTimer = $;
      propagate;
   }
   
   ActivateWallhack()
   {
      local i, each_obj;
      
      Send(self,@SetBehaviorFlag,#flag=AI_MOVE_WALKTHROUGH_WALLS,#value=TRUE);
      
      if poOwner <> $
      {
         foreach i in Send(poOwner,@GetHolderActive)
         {
            each_obj = Send(poOwner,@HolderExtractObject,#data=i);
            if IsClass(each_obj,&Player)
            {
               Send(each_obj,@MsgSendUser,#message_rsc=marauder_through_walls_rsc,#parm1=Send(self,@GetName),#parm2=Send(self,@GetHisHer));
            }
         }
      }
      return;
   }
   
   DeactivateWallhack()
   {
      Send(self,@SetBehaviorFlag,#flag=AI_MOVE_WALKTHROUGH_WALLS,#value=FALSE);
      return;
   }

   TryAttack(what=$,stroke_obj=$)
   {
      
      propagate;
   }
   
   GetEpicRarityBoost()
   {
      % Out of 100,000
      return 50000;
   }
   
   GetRareRarityBoost()
   {
      return 50000;
   }
   
   CanBeCharmed()
   {
      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
