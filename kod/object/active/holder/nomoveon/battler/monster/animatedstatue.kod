% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
AnimatedStatue is Monster

constants:

   include blakston.khd

   ANIM_CAST = 3

   % Neutral action, our troops don't smile, etc.
   NO_ACTION = 1

   % What percent of the statues are stronger?
   RARE_PERCENT = 20

   % What percent of the time do we wake up when someone is near?
   WAKEUP_CHANCE = 100

   % How long are we dormant when someone tries to wake us up?
   DORMANT_DURATION = 2 * 60 * 1000  % 2 minutes (in ms)

resources:

   AnimatedStatue_name_rsc = "statue"
   AnimatedStatue_active_name_rsc = "animated statue"

   AnimatedStatue_desc_rsc = \
      "This statue is the image of some ancient %s.\n\n%r"

   AnimatedStatue_dead_name_rsc = "crumbled animated statue"

   AnimatedStatue_mason = "mason"
   AnimatedStatue_farmer = "farmer"
   AnimatedStatue_merchant = "merchant"
   AnimatedStatue_blacksmith = "blacksmith"
   AnimatedStatue_elder = "elder"
   AnimatedStatue_soldier = "soldier"

   AnimatedStatue_damage = "~B~r%s%s is noticeably more damaged."
   AnimatedStatue_severe_damage = "~B~r%s%s is severely damaged."

   AnimatedStatue_icon_blank = blank.bgf

   AnimatedStatue_male_icon_rsc = bta.bgf
   AnimatedStatue_female_icon_rsc = btb.bgf  

   % a is male, b is female
   AnimatedStatue_legs_a_rsc = bfa.bgf
   AnimatedStatue_legs_b_rsc = bfb.bgf

   AnimatedStatue_rightarm_a_rsc = bra.bgf
   AnimatedStatue_rightarm_b_rsc = brb.bgf

   AnimatedStatue_leftarm_a_rsc = bla.bgf
   AnimatedStatue_leftarm_b_rsc = blb.bgf

   AnimatedStatue_dead_male_icona_rsc = playerXa.bgf
   AnimatedStatue_dead_male_iconb_rsc = playerXb.bgf
   AnimatedStatue_dead_female_icona_rsc = heraXa.bgf
   AnimatedStatue_dead_female_iconb_rsc = heraXb.bgf

   AnimatedStatue_head_male_icon = phax.bgf
   AnimatedStatue_head_female_icon = phkx.bgf

   % male
   AnimatedStatue_eyes_ax_icon = peax.bgf
   AnimatedStatue_eyes_bx_icon = pebx.bgf
   AnimatedStatue_eyes_cx_icon = pecx.bgf
   AnimatedStatue_eyes_dx_icon = pedx.bgf

   % female
   AnimatedStatue_eyes_kx_icon = pekx.bgf
   AnimatedStatue_eyes_lx_icon = pelx.bgf
   AnimatedStatue_eyes_mx_icon = pemx.bgf

   % male
   AnimatedStatue_mouth_ax_icon = pmax.bgf
   AnimatedStatue_mouth_bx_icon = pmbx.bgf
   AnimatedStatue_mouth_cx_icon = pmcx.bgf

   % female
   AnimatedStatue_mouth_kx_icon = pmkx.bgf
   AnimatedStatue_mouth_lx_icon = pmlx.bgf
   AnimatedStatue_mouth_mx_icon = pmmx.bgf

   % male
   AnimatedStatue_nose_ax_icon = pnax.bgf
   AnimatedStatue_nose_bx_icon = pnbx.bgf
   AnimatedStatue_nose_cx_icon = pncx.bgf

   % female
   AnimatedStatue_nose_kx_icon = pnkx.bgf
   AnimatedStatue_nose_lx_icon = pnlx.bgf
   AnimatedStatue_nose_mx_icon = pnmx.bgf

   % both
   AnimatedStatue_hair_cd_icon = ptcd.bgf
   AnimatedStatue_hair_bald_icon = blank.bgf

   % male
   AnimatedStatue_hair_ac_icon = ptac.bgf
   AnimatedStatue_hair_ba_icon = ptba.bgf
   AnimatedStatue_hair_ad_icon = ptad.bgf
   AnimatedStatue_hair_bb_icon = ptbb.bgf
   AnimatedStatue_hair_xa_icon = ptxa.bgf

   % female
   AnimatedStatue_hair_bc_icon = ptbc.bgf
   AnimatedStatue_hair_ca_icon = ptca.bgf
   AnimatedStatue_hair_db_icon = ptdb.bgf
   AnimatedStatue_hair_bd_icon = ptbd.bgf
   AnimatedStatue_hair_cb_icon = ptcb.bgf
   AnimatedStatue_hair_dc_icon = ptdc.bgf
   AnimatedStatue_hair_dr_icon = ptdr.bgf
   AnimatedStatue_hair_xb_icon = ptxb.bgf

   AnimatedStatue_rightarm_gauntlet_male = bre.bgf
   AnimatedStatue_rightarm_gauntlet_female = brf.bgf
   AnimatedStatue_leftarm_gauntlet_male = ble.bgf
   AnimatedStatue_leftarm_gauntlet_female = blf.bgf

   AnimatedStatue_sound_attack = xeoatk.wav
   AnimatedStatue_sound_aware = xeodie.wav
   AnimatedStatue_sound_death = xeo1awr.wav

classvars:

   vrDesc = AnimatedStatue_desc_rsc
   vrDead_name = AnimatedStatue_dead_name_rsc
   vrActiveName = AnimatedStatue_active_name_rsc

   viTreasure_type = TID_STATUE

   viAttack_type = ATCK_WEAP_SLASH

   vrSound_hit = AnimatedStatue_sound_attack
   vrSound_miss = AnimatedStatue_sound_attack
   vrSound_aware = AnimatedStatue_sound_aware
   vrSound_death = AnimatedStatue_sound_death

   viKarma = 0
   viDead_drawfx = DRAWFX_SECONDTRANS

   % percentage chance to be female
   viChanceFemale = 50

   % Our normal speed when active
   viNormalSpeed = SPEED_AVERAGE
   viCashmin = 150
   viCashmax = 500

   viIndefinite = ARTICLE_A

   vsStatue_job_one = AnimatedStatue_mason
   vsStatue_job_two = AnimatedStatue_farmer
   vsStatue_job_three = AnimatedStatue_merchant
   vsStatue_job_four = AnimatedStatue_blacksmith
   vsStatue_job_five = AnimatedStatue_elder
   vsStatue_job_rare_and_powerful = AnimatedStatue_soldier
   
   vcWeaponOne = &Longsword
   vcWeaponTwo = &Hammer
   vcWeaponThree = &Axe
   
   vcArmorOne = &LeatherArmor
   vcArmorTwo = &ChainArmor
   vcArmorthree = &ScaleArmor
   
   vcShieldOne = &MetalShield
   vcShieldTwo = &GoldShield
   vcShieldThree = &Knightshield
   
   % Statues don't have blood
   viBaseBleedPercentage = 0
   viBaseKnockbackPercentage = 0
   viBaseStunPercentage = 0

   viBaseSize = 900

   viCanSpawnAsChampion = FALSE

properties:

   % Put these as properties so they can be set
   vrName = AnimatedStatue_name_rsc

   vrIcon = AnimatedStatue_male_icon_rsc
   vrDead_Icon = AnimatedStatue_dead_male_icona_rsc
   vrDead_Legs = AnimatedStatue_dead_male_iconb_rsc

   viLevel = 75
   viDifficulty = 5
   viVisionDistance = 3
   % Attack range of 192, or 3 row/col.
   viAttackRange = 192
   viGender = GENDER_MALE

   viSpeed = SPEED_NONE
   piAttackSpeed = SPEED_NONE
   piMoveSpeed = SPEED_NONE

   piAnimation = ANIM_NONE

   prLegs = AnimatedStatue_legs_a_rsc
   prRight_arm = AnimatedStatue_rightarm_a_rsc
   prLeft_arm = AnimatedStatue_leftarm_a_rsc

   prHead = AnimatedStatue_head_male_icon
   prEyes = AnimatedStatue_eyes_ax_icon
   prMouth = AnimatedStatue_mouth_ax_icon
   prNose = AnimatedStatue_nose_ax_icon
   prToupee = AnimatedStatue_hair_ac_icon

   % Original data, for replacing when we heal.
   prOriginalHead = AnimatedStatue_head_male_icon
   prOriginalEyes = AnimatedStatue_eyes_ax_icon
   prOriginalMouth = AnimatedStatue_mouth_ax_icon
   prOriginalNose = AnimatedStatue_nose_ax_icon
   prOriginalLeft_arm = AnimatedStatue_leftarm_a_rsc

   plUsing = $
   plOverlays = $
   poHair_Remove = $

   piDrawFX = DRAWFX_SECONDTRANS

   % Is this a rare and powerful type?
   pbIsRareAndPowerful = FALSE

   % Do we have a shield?
   pbHasShield = FALSE

   % What are we an image of?
   prProfession = AnimatedStatue_elder

   % How long should we remain dormant, unable to be awoken by players?
   ptRemainDormant = $

   % Used to lock statue into a dormant state
   pbLockedDormant = FALSE

messages:

   Constructor(bIsRareAndPowerful=FALSE)
   {
      local lProfessions;

      plOverlays = [ ];
      plUsing = [ ];
      plResistances = [ ];

      pbIsRareAndPowerful = bIsRareAndPowerful;

      Send(self,@SetGender);
      Send(self,@SetFace);
      Send(self,@SetEquipment);
      Send(self,@SetHair);

      if pbIsRareAndPowerful
      {
         prProfession = vsStatue_job_rare_and_powerful;

         % Give us a little boost to our stats
         viLevel = viLevel + 15;
         viDifficulty = viDifficulty + 2;

         % This makes the soldiers not have karma
         pbDontDispose = TRUE;
      }
      else
      {
         lProfessions = [ vsStatue_job_one, vsStatue_job_two,
                          vsStatue_job_three, vsStatue_job_four,
                          vsStatue_job_five
                        ];

         prProfession = Nth(lProfessions,Random(1,5));
      }

      propagate;
   }

   Constructed()
   {
      % Set the original data here, for replacing when we heal from damage.
      prOriginalHead = prHead;
      prOriginalEyes = prEyes;
      prOriginalMouth = prMouth;
      prOriginalNose = prNose;
      prOriginalLeft_arm = prLeft_arm;
      
      Send(self,@SetCreatureTypes);

      propagate;
   }
   
   SetCreatureTypes()
   {
      plCreatureTypes = Cons(CREATURE_TYPE_STONE,plCreatureTypes);
      plCreatureTypes = Cons(CREATURE_TYPE_HUMANOID,plCreatureTypes);
      plCreatureTypes = Cons(CREATURE_TYPE_MAGICAL,plCreatureTypes);
      return;
   }

   Delete()
   {
      local oUsedItem;

      if ptRemainDormant <> $
      {
         DeleteTimer(ptRemainDormant);
         ptRemainDormant = $;
      }

      foreach oUsedItem in plUsing
      {
         Send(oUsedItem,@Delete);
      }

      plUsing = $;
      plOverlays = $;

      propagate;
   }

   %%% Infrastructure

   ShowDesc()
   {
      % Does not show status information, because it has none.
      AddPacket(4,vrDesc, 4,prProfession, 4,monster_desc_level,
                4,viLevel);

      return;
   }

   HitPointThresholdDamage()
   "Shows physical damage instead of a message."
   {
      local i, iThreshold, iRandomDamage, rDamageReport, each_obj;

      iThreshold = piHit_points / (piMax_hit_points * 20);

      % General damage report
      rDamageReport = AnimatedStatue_damage;

      if iThreshold <= 1
      {
         if prHead = AnimatedStatue_icon_blank
         {
            return;
         }

         prHead = AnimatedStatue_icon_blank;
         rDamageReport = AnimatedStatue_severe_damage;
      }
      else
      {
         iRandomDamage = Random(1,4);

         if iRandomDamage = 1
         {
            if prEyes = AnimatedStatue_icon_blank
            {
               return;
            }

            prEyes = AnimatedStatue_icon_blank;
         }
         else if iRandomDamage = 2
         {
            if prMouth = AnimatedStatue_icon_blank
            {
                  return;
            }

            prMouth = AnimatedStatue_icon_blank;
         }
         else if iRandomDamage = 3
         {
            if prNose = AnimatedStatue_icon_blank
            {
               return;
            }

            prNose = AnimatedStatue_icon_blank;
         }
         else
         {
            if prLeft_arm = AnimatedStatue_icon_blank
            {
               return;
            }

            prLeft_arm = AnimatedStatue_icon_blank;
            pbHasShield = FALSE;
         }
      }

      Send(poOwner,@SomethingChanged,#what=self);

      foreach i in Send(poOwner,@GetHolderActive)
      {
         each_obj=Send(poOwner,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&User)
            AND Send(each_obj,@GetKillTarget) = self
         {
            Post(each_obj,@MsgSendUser,#what=self,#message_rsc=rDamageReport,
                  #parm1=Send(self,@GetCapDef),#parm2=Send(self,@GetName));
         }
      }

      return;
   }

   HitPointThresholdHeal()
   "Healed a health point, fix one of our broken parts."
   {
      if prHead <> prOriginalHead
      {
         prHead = prOriginalHead;
      }
      else if prLeft_arm <> prOriginalLeft_arm
      {
         prLeft_arm = prOriginalLeft_arm;
      }
      else if prEyes <> prOriginalEyes
      {
         prEyes = prOriginalEyes;
      }
      else if prMouth <> prOriginalMouth
      {
         prMouth = prOriginalMouth;
      }
      else if prNose <> prOriginalNose
      {
         prNose = prOriginalNose;
      }

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   SpellResist(oSpell=$,who=$,iSpellpower=$)
   {
      % Ignore sight-based spells and Seduce
      if IsClass(oSpell,&Blind)
         OR IsClass(oSpell,&Dazzle)
         OR IsClass(oSpell,&Seduce)
      {
         return TRUE;
      }

      propagate;
   }

   SomethingMoved(what = $,new_row = $,new_col = $)
   {
      local iDelay;

      % Only care about moving stuff if we're not already moving
      % Only care about non-immortal players we can see and are "close"
      if piMoveSpeed = SPEED_NONE
         AND NOT pbLockedDormant
         AND what <> $
         AND IsClass(what,&Player)
         AND NOT (IsClass(what,&DM) AND Send(what,@PlayerIsImmortal))
         AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=what)
         AND Send(self,@CanSee,#what=what)
      {
         if Random(1,100) <= WAKEUP_CHANCE
         {
            % Set our intruder as our target if we don't have another one.
            % 25 hatred is pretty low.
            if Send(self,@GetHatred) <= 25
            {
               Send(self,@TargetSwitch,#what=what,#iHatred=25);
            }

            % Someone walked close enough!  Spring to life!
            Send(self,@WakeUp);
         }
         else
         {
            % Don't wake up yet.  Rest a bit longer.
            pbLockedDormant = TRUE;

            iDelay = DORMANT_DURATION;
            % Created by an admin?  Probably an invasion.  Don't sleep as long.
            if pbDontDispose
            {
               iDelay = iDelay / 5;
            }

            ptRemainDormant = CreateTimer(self,@EndDormantTimer,iDelay);
         }
      }

      propagate;
   }

   EndDormantTimer()
   {
      ptRemainDormant = $;
      pbLockedDormant = FALSE;

      return;
   }

   TweakBehavior()
   "Our default behavior it not be noticable as a monster."
   {
      if piMoveSpeed = SPEED_NONE
      {
         piBehavior = AI_NOMOVE | AI_NOFIGHT | AI_NPC;
      }

      return;
   }

   %%% Dealing with waking up and going dormant

   WakeUp()
   {
      % Make ourselves mobile!
      piMoveSpeed = viNormalSpeed;
      piAttackSpeed = viNormalSpeed;

      piBehavior = piBehavior & ~(AI_NOMOVE | AI_NOFIGHT | AI_NPC);
      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
         Send(self,@EnterStateChase,#target=poTarget,#actnow=TRUE);
      }

      % Now, fix our name!
      vrName = vrActiveName;

      return;
   }

   %%% Defense messages

   GetParryAbility(stroke_obj=$)
   {
      if (stroke_obj <> $) AND NOT Send(stroke_obj,@CanParry)
      {
         return 0;
      }

      return (viDifficulty*10)/2;
   }

   GetBlockAbility(stroke_obj=$)
   {
      if ((stroke_obj <> $) AND NOT Send(stroke_obj,@CanBlock))
         OR NOT pbHasShield
      {
         return 0;
      }

      return (viDifficulty*10);
   }

   %%% Graphics setup

   SetGender()
   {
      if random(1,100) < viChanceFemale
      {
         viGender = GENDER_FEMALE;
         vrIcon = AnimatedStatue_female_icon_rsc;
         prHead = AnimatedStatue_head_female_icon;
         prEyes = AnimatedStatue_eyes_kx_icon;
         prMouth = AnimatedStatue_mouth_kx_icon;
         prNose = AnimatedStatue_nose_kx_icon;
         prToupee = AnimatedStatue_hair_ca_icon;
         prLegs = AnimatedStatue_legs_b_rsc;
         prRight_arm = AnimatedStatue_rightarm_b_rsc;
         prLeft_arm = AnimatedStatue_leftarm_b_rsc;
         vrDead_Icon = AnimatedStatue_dead_female_icona_rsc;
         vrDead_Legs = AnimatedStatue_dead_female_iconb_rsc;
      }

      return;
   }

   SetHair()
   {
      local RandomNumber,Translation,HelmetHair;

      % Sets the hairdo, color.  Has a chance of putting a helmet on instead.

      % Helmet?
      if poHair_Remove <> $
      {
         return;
      }

      % Select a hairdo
      if viGender = GENDER_MALE
      {
         RandomNumber = random(0,6);
         % 0 keeps the "default"
         if RandomNumber = 1
         {
            prToupee = AnimatedStatue_hair_cd_icon;
         }
         else if RandomNumber = 2
         {
            prToupee = AnimatedStatue_hair_bald_icon;
         }
         else if RandomNumber = 3
         {
            prToupee = AnimatedStatue_hair_ba_icon;
         }
         else if RandomNumber = 4
         {
            prToupee = AnimatedStatue_hair_ad_icon;
         }
         else if RandomNumber = 5
         {
            prToupee = AnimatedStatue_hair_bb_icon;
         }
         else
         {
            prToupee = AnimatedStatue_hair_xa_icon;
         }
      }
      else
      {
      % female
         RandomNumber = random(0,8);
         % 0 keeps the "default"
         if RandomNumber = 1
         {
            prToupee = AnimatedStatue_hair_cd_icon;
         }
         else if RandomNumber = 2
         {
            prToupee = AnimatedStatue_hair_bc_icon;
         }
         else if RandomNumber = 3
         {
            prToupee = AnimatedStatue_hair_db_icon;
         }
         else if RandomNumber = 4
         {
            prToupee = AnimatedStatue_hair_bd_icon;
         }
         else if RandomNumber = 5
         {
            prToupee = AnimatedStatue_hair_cb_icon;
         }
         else if RandomNumber = 6
         {
            prToupee = AnimatedStatue_hair_dc_icon;
         }
         else if RandomNumber = 7
         {
            prToupee = AnimatedStatue_hair_dr_icon;
         }
         else
         {
            prToupee = AnimatedStatue_hair_xb_icon;
         }
      }

      return;
   }

   SetFace()
   % Randomly sets (gender-appropriate) face elements.
   {
      local RandomNumber;
      % NOTE: 0 always keeps the "default" (a) icon.

      if viGender = GENDER_MALE
      {
         RandomNumber = random(0,3);
         if RandomNumber = 1
         {
            prEyes = AnimatedStatue_eyes_bx_icon;
         }
         else if RandomNumber = 2
         {
            prEyes = AnimatedStatue_eyes_cx_icon;
         }
         else
         {
            prEyes = AnimatedStatue_eyes_dx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prNose = AnimatedStatue_nose_bx_icon;
         }
         else
         {
            prNose = AnimatedStatue_nose_cx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prMouth = AnimatedStatue_mouth_bx_icon;
         }
         else
         {
            prMouth = AnimatedStatue_mouth_cx_icon;
         }
      }
      else
      {
         % female

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prEyes = AnimatedStatue_eyes_lx_icon;
         }
         else
         {
            prEyes = AnimatedStatue_eyes_mx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prNose = AnimatedStatue_nose_lx_icon;
         }
         else
         {
            prNose = AnimatedStatue_nose_mx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prMouth = AnimatedStatue_mouth_lx_icon;
         }
         else
         {
            prMouth = AnimatedStatue_mouth_mx_icon;
         }
      }

      return;
   }

   SetEquipment()
   {
      local oEquipmentItem, iRandomNumber, HelmetHair;

      iRandomNumber = random(1,10);
      if iRandomNumber <= 3
      {
         oEquipmentItem = create(vcWeaponOne);
      }
      else if iRandomNumber <= 6
      {
         oEquipmentItem = create(vcWeaponTwo);
      }
      else
      {
         oEquipmentItem = create(vcWeaponThree);
      }

      Send(self,@AddEquipmentObject,#what=oEquipmentItem);

      % base 20% chance to be a rare type statue.
      if random(1,100) <= RARE_PERCENT
      {
         pbIsRareAndPowerful = TRUE;
      }

      % Armor
      iRandomNumber = random(1,10);

      if iRandomNumber <= 4
      {
         oEquipmentItem = create(vcArmorOne);
      }
      else if iRandomNumber <= 8
      {
         oEquipmentItem = create(vcArmorTwo);
      }
      else
      {
         oEquipmentItem = create(vcArmorThree);
      }

      Send(self,@SetStatueArmor,#NewArmor=oEquipmentItem);

      % Helmet?
      if random(1,10) <= 5
      {
         HelmetHair = create(&SimpleHelm);
         Send(self,@AddEquipmentObject,#what=HelmetHair);
         poHair_Remove = HelmetHair;
      }

      % Gauntlets?
      if random(1,10) <= 5
      {
         oEquipmentItem = create(&Gauntlet);
         plUsing = Cons(oEquipmentItem,plUsing);
         if viGender = GENDER_MALE
         {
            prRight_arm = AnimatedStatue_rightarm_gauntlet_male;
            prLeft_arm = AnimatedStatue_leftarm_gauntlet_male;
         }
         else
         {
            prRight_arm = AnimatedStatue_rightarm_gauntlet_female;
            prLeft_arm = AnimatedStatue_leftarm_gauntlet_female;
         }
      }

      % Shield?
      if random(1,10) <= 8
      {
         pbHasShield = TRUE;
         iRandomNumber = random(1,100);

         if iRandomNumber <= 40
         {
            oEquipmentItem = Create(vcShieldOne);
         }
         else if iRandomNumber <= 80
         {
            oEquipmentItem = Create(vcShieldTwo);
         }
         else
         {
            oEquipmentItem = Create(vcShieldThree);
         }

         Send(self,@AddEquipmentObject,#what=oEquipmentItem);
      }

      return;
   }

   MonsterAttack(what = $)
   {
      % add in any attack animation calls
      Send(self,@DoSlash);

      return;
   }

   DoSlash()
   {
      piAnimation = PANM_WEAPON_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendMoveAnimation()
   {
      % use standing torso
      AddPacket(1,ANIMATE_NONE, 2,1);

      return;
   }

   SendAnimation()
   {
      % All new data
      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,2, 2,4, 2,1);

         return;
      }

      propagate;
   }

   SendMoveOverlays()
   {
      local i, iOverlays, hotspot, iLeft_group, iRight_group;

      % Player has 7 standard overlays: right arm, left arm, legs, head,
      %  eyes, mouth, nose
      iOverlays = 7;

      if poHair_remove = $
      {
         iOverlays = iOverlays + 1;
      }

      iLeft_group = 1;
      iRight_group = 1;

      foreach i in plOverlays
      {
         % Bows can have more than 1.
         iOverlays = iOverlays + Send(i,@GetNumberOverlays);
         hotspot = Send(i,@GetOverlayHotspot);
         if hotspot = HS_RIGHT_WEAPON
         {
            iRight_group = 17;
         }
         else if hotspot = HS_LEFT_WEAPON or hotspot = HS_BOTTOM_BOW
         {
            % it's really a shield, not weapon
            iLeft_group = 7;
         }
      }

      AddPacket(1,iOverlays);
      AddPacket(4,prLeft_arm, 1,HS_LEFT_HAND);

      if iLeft_group = 1
      {
         AddPacket(1,ANIMATE_CYCLE, 4,200, 2,2, 2,3);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,iLeft_group); 
      }

      AddPacket(4,prRight_arm, 1,HS_RIGHT_HAND);

      if iRight_group = 1
      {
         Addpacket(1,ANIMATE_CYCLE, 4,200, 2,2, 2,3);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,iRight_group); 
      }

      AddPacket(4,prLegs, 1,HS_LEGS, 1,ANIMATE_CYCLE, 4,100, 2,2, 2,5);

      AddPacket(4,prHead, 1,HS_HEAD, 1,ANIMATE_NONE, 2,1);        

      AddPacket(4,prMouth, 1,HS_MOUTH, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prEyes, 1,HS_EYES, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prNose, 1,HS_NOSE, 1,ANIMATE_NONE, 2,1);

      if poHair_remove = $
      {
         AddPacket(4,prToupee, 1,HS_TOUPEE);
         AddPacket(1,ANIMATE_NONE, 2,1);
      }

      foreach i in plOverlays
      {
         Send(i,@SendOverlayInformation,#iAnimation=$);
      }

      return;
   }

   SendOverlays()
   {
      local i, iOverlays, hotspot, iLeft_group, iRight_group;

      % Send overlay bitmap info to user.

      % Player has 7 standard overlays: right arm, left arm, legs, head,
      %  eyes, mouth, nose
      iOverlays = 7;

      if poHair_remove = $
      {
         iOverlays = iOverlays + 1;
      }

      % Overlay info -- display correct group for animation & action

      iLeft_group = 1;
      iRight_group = 1;

      foreach i in plOverlays
      {
         % Bows can have more than 1.
         iOverlays = iOverlays + Send(i,@GetNumberOverlays,
                                      #iAnimation=piAnimation);
         hotspot = Send(i,@GetOverlayHotspot);
         if hotspot = HS_RIGHT_WEAPON
         {
            iRight_group = 17;
         }
         else if hotspot = HS_LEFT_WEAPON or hotspot = HS_BOTTOM_BOW
         {
            % it's really a shield, not weapon 
            iLeft_group = 7;
         }
      }

      AddPacket(1, iOverlays);

      AddPacket(4,prLeft_arm,1,HS_LEFT_HAND);

      if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,8, 2,8, 2,iLeft_group);
      }
      else if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,4, 2,6, 2,iLeft_group);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,iLeft_group);
      }

      AddPacket(4,prRight_arm,1,HS_RIGHT_HAND);

      if piAnimation = ANIM_NONE
      {
         AddPacket(1,ANIMATE_NONE, 2,iRight_group);
      }
      else if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,11, 2,11, 2,iRight_group);
      }
      else if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,4, 2,6, 2,17);
      }

      AddPacket(4,prLegs,1,HS_LEGS);

      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,900, 2,6, 2,6, 2,1);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,1);
      }

      AddPacket(4,prHead, 1,HS_HEAD, 1,ANIMATE_NONE, 2,1);
      AddPacket(4,prMouth, 1,HS_MOUTH, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prEyes, 1,HS_EYES, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prNose, 1,HS_NOSE, 1,ANIMATE_NONE, 2,1);

      if poHair_remove = $
      {
         AddPacket(4,prToupee, 1,HS_TOUPEE);
         AddPacket(1,ANIMATE_NONE, 2,1); 
      }

      foreach i in plOverlays
      {
         Send(i,@SendOverlayInformation,#iAnimation=piAnimation);
      }

      return;
   }

   SetStatueArmor(NewArmor = $)
   {
      vrIcon = Send(NewArmor,@GetShirtIcon,#who=self);
      plUsing = cons(NewArmor, plUsing);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   AddEquipmentObject(what = $)
   "Adds Overlay to list if not duplicated."
   {
      local i;

      foreach i in plOverlays
      {
         if i = what
         {
            return;
         }
      }

      plUsing = Cons(what,plUsing);
      plOverlays = Cons(what,plOverlays);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   % Override from monster superclass
   CreateDeadBody(killer=$)
   {
      return Create(&DeadBody,
                     #victim=self,
                     #killer=killer,
                     #PlayerBodyOverlay=vrDead_Legs,
                     #DrawFX=viDead_drawfx);
   }

   CanMorphTo()
   {
      return FALSE;
   }

   GetProfession()
   {
      return prProfession;
   }

   GetRareAndPowerful()
   {
      return pbIsRareAndPowerful;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
