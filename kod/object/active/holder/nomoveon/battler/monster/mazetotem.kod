% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MazeTotem is Monster

constants:

   include blakston.khd

resources:

   maze_totem_name_rsc = "totem"
   maze_totem_icon_rsc = mazetotem.bgf
   maze_totem_desc_rsc = \
      "This animated pillar appears to be immobile but hostile!"

   maze_totem_dead_name_rsc = "dead remains of a totem trap"

classvars:

   vrName = maze_totem_name_rsc
   vrIcon = maze_totem_icon_rsc
   vrDesc = maze_totem_desc_rsc
   vrDead_icon = $
   vrDead_name = maze_totem_dead_name_rsc

   viTreasure_type = TID_NONE
   viAttack_type = ATCK_WEAP_BLUDGEON
   viSpeed = SPEED_SLOW
   viAttributes = MOB_NOMOVE
   viDefault_behavior = AI_NOMOVE | AI_FIGHT_LASHOUT | AI_FIGHT_HYPERAGGRESSIVE
   viLevel = 50
   viDifficulty = 4
   viVisionDistance = 14
   viKarma = 0
   viCashmin = 0
   viCashmax = 0

   % 1 in x chance to cast a spell.
   viSpellChance = 1

   vrSound_hit = $
   vrSound_miss = $
   vrSound_aware = $
   vrSound_death = $
   
   viCanSpawnAsChampion = FALSE
   
   viBaseBleedPercentage = 0
   viBaseKnockbackPercentage = 0
   viBaseStunPercentage = 0

properties:

   piAnimation = ANIM_NONE

   piSpellPower = 99
   piMax_mana = 120
   
   poPlayerTarget = $

messages:

   Constructor(iSpellID=SID_LIGHTNING)
   {
      plSpellBook = [ [iSpellID, 0, 100] ];
   
      propagate;
   }

   Constructed()
   {
      plResistances = [ [ATCK_WEAP_ALL, 5 ],
                        [-ATCK_SPELL_ALL, 5 ] ];

      propagate;
   }
   
   SomethingMoved(what=$,new_row=$,new_col=$,fine_row=$,fine_col=$)
   "Check to see if we need to change our combat plan because someone moved."
   {
      if what <> $
         AND IsClass(what,&Player)
      {
         Post(self,@TargetSwitch,#what=what,#iHatred=100);
         Post(self,@EnterStateChase,#target=what,#actnow=TRUE);
      }

      propagate;
   }

   CreateDeadBody(killer=$)
   {
      Send(poOwner,@TotemKilled,#totem_object=self);
      return $;
   }

   TryAttack(what=$,stroke_obj=$)
   "Ok, we got someone to attack, lets try and hit them."
   {
      % Phased players can't be hit.
      if IsClass(what,&User)
         AND Send(what,@IsInCannotInteractMode)
      {
         return FALSE;
      }

      % Make sure room allows the attack.
      if NOT Send(poOwner,@ReqSomethingAttack,#what=self,#victim=what,
                  #stroke_obj=stroke_obj)
      {
         % Check if room has special combat effects.
         return FALSE;
      }

      % If we're hitting another monster, check if we can reach or attack it.
      if IsClass(what,&Monster)
      {
         if NOT Send(what,@CanMonsterFight,#who=self,#oStroke=stroke_obj,
                     #use_weapon=stroke_obj)
         {
            return FALSE;
         }
      }

      Send(self,@MonsterCastSpell);

      return TRUE;
   }

   % We put this here so we can edit it a bit to stop totem super spam.
   
   MonsterCastSpell()
   "Handle monster spellcasting here."
   {
      local i, iDistance, oSpell, iRandom, lTargets, iSpellNum, iManaCost;

      % If monster knows no spells, or has no target, return.
      if plSpellBook = $
         OR poTarget = $
      {
         return FALSE;
      }

      % Get the adjusted chance to cast, based on whether we're demented
      % or if AmA is up. Multiply this by 6 because we've decreased the
      % time between chase behavior checks by a factor of 4-7x.
      iRandom = Send(self,@AdjustedChanceBase,#base=(piSpellChance*6));

      % Do the random check now, so we don't go any further
      % if we don't have to.
      if Random(1,iRandom) <> 1
      {
         return FALSE;
      }

      % Get distance to target.
      iDistance = Send(self,@SquaredFineDistanceTo3D,#what=poTarget);

      % Check LoS to target here so we don't waste mana casting
      % when we can't get our target. Instead, we use that time
      % walking to the target.

      if iDistance <= piSpellRange * piSpellRange
         AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=poTarget)
         AND Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget,
                  #use_weapon=self)
      {
         % We go through the monster's spellbook and pick the spell
         % that corresponds to the random number picked. This is used
         % to give a % chance for each spell to be picked.
         iRandom = Random(1,100);
         foreach i in plSpellBook
         {
            if iRandom <= Nth(i,3)
            {
               iSpellNum = Nth(i,1);
               iManaCost = Nth(i,2);

               break;
            }
         }

         % If no spell returned or cannot pay mana costs, spell fails.
         if iSpellNum = $
            OR piMana < iManaCost
         {
            return FALSE;
         }
         
         % Here is where totems differ. They don't recast a PE if the target is affected.
         % By this point we know what spell is chosen and that the target exists.
         % We get the spell object earlier than normal and return FALSE if the player is enchanted.
         
         % Get the spell object.
         oSpell = Send(SYS,@FindSpellByNum,#num=iSpellNum);
         
         if Send(poTarget,@IsEnchanted,#what=oSpell)
         {
            return FALSE;
         }

         % Take mana from monster.
         piMana = piMana - iManaCost;
         Send(self,@NewMana);

         
         % Find the valid targets, defaulting to poTarget.
         lTargets = [poTarget];
         lTargets = Send(oSpell,@GetTargets,#who=self,#lTargets=lTargets);

         % See if we can cast the spell here.
         if Send(oSpell,@CanPayMonsterCosts,#who=self,#lTargets=lTargets,
                  #iSpellPower=piSpellPower)
            AND Send(poOwner,@ReqSpellCast,#who=self,#oSpell=oSpell,
                     #lItems=lTargets)
         {
            % Do any special cast animations; send spell for specific ones.
            Send(self,@MonsterCastAnimation,#iSpellNum=iSpellNum);

            % Cast the spell.
            Send(oSpell,@CastSpell,#who=self,#lTargets=lTargets,
                  #iSpellPower=piSpellPower);
         }

         return TRUE;
      }

      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
