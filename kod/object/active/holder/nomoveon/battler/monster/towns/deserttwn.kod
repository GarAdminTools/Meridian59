% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DesertTown is Towns

constants:

   include blakston.khd
   
resources:

   response_hello_trigger = "hello"

   response_desert_trigger = "desert"
   response_biskalane_trigger = "biskalane"
   response_tales_trigger = "tales"
   response_diffraction_trigger = "diffraction"
   response_elements_trigger = "elements"
   response_vecka_trigger = "vecka"
   
   response_wastes_trigger = "wastes"
   response_sorcerers_trigger = "sorcerers"

   response_sorcerer_trigger = "korath"
   response_witch_trigger = "vrinna"
   response_bandit_trigger = "kerrenor"
   response_ventdal_trigger = "ventdal"
   response_xaerdun_trigger = "xaerdun"
   response_iwodach_trigger = "iwodach"
   response_nequzon_trigger = "nequzon"
   response_raumlar_trigger = "raumlar"

   response_sorcery_trigger = "sorcery"
   response_witchery_trigger = "witchery"
   response_banditry_trigger = "banditry"
   
   response_jala_trigger = "jala"
   response_bard_trigger = "lucius"

   response_default_response = "I know nothing about that."

classvars:

   response_hello_response = response_default_response

   response_desert_response = response_default_response
   response_biskalane_response = response_default_response
   response_tales_response = response_default_response
   response_diffraction_response = response_default_response
   response_elements_response = response_default_response
   response_vecka_response = response_default_response

   response_wastes_response = response_default_response
   response_sorcerers_response = response_default_response

   response_sorcerer_response = response_default_response
   response_witch_response = response_default_response
   response_bandit_response = response_default_response
   
   response_ventdal_response = response_default_response
   response_xaerdun_response = response_default_response
   response_iwodach_response = response_default_response
   response_nequzon_response = response_default_response
   response_raumlar_response = response_default_response

   response_sorcery_response = response_default_response
   response_witchery_response = response_default_response
   response_banditry_response = response_default_response
   
   response_jala_response = response_default_response
   response_bard_response = response_default_response

   random_saying_1 = response_default_response
   random_saying_2 = response_default_response
   random_saying_3 = response_default_response
   random_saying_4 = response_default_response
   random_saying_5 = response_default_response
   random_saying_6 = response_default_response
   random_saying_7 = response_default_response

properties:

   plSpeechResponses = $
   plRandomSayings = $

messages:

   Constructed()
   {
      plSpeechResponses = $;
      plSpeechResponses = Cons([response_hello_trigger,response_hello_response],plSpeechResponses);
      plSpeechResponses = Cons([response_desert_trigger,response_desert_response],plSpeechResponses);
      plSpeechResponses = Cons([response_biskalane_trigger,response_biskalane_response],plSpeechResponses);
      plSpeechResponses = Cons([response_tales_trigger,response_tales_response],plSpeechResponses);
      plSpeechResponses = Cons([response_diffraction_trigger,response_diffraction_response],plSpeechResponses);
      plSpeechResponses = Cons([response_elements_trigger,response_elements_response],plSpeechResponses);
      plSpeechResponses = Cons([response_vecka_trigger,response_vecka_response],plSpeechResponses);
      plSpeechResponses = Cons([response_wastes_trigger,response_wastes_response],plSpeechResponses);
      plSpeechResponses = Cons([response_sorcerers_trigger,response_sorcerers_response],plSpeechResponses);
      plSpeechResponses = Cons([response_sorcerer_trigger,response_sorcerer_response],plSpeechResponses);
      plSpeechResponses = Cons([response_witch_trigger,response_witch_response],plSpeechResponses);
      plSpeechResponses = Cons([response_bandit_trigger,response_bandit_response],plSpeechResponses);
      plSpeechResponses = Cons([response_ventdal_trigger,response_ventdal_response],plSpeechResponses);
      plSpeechResponses = Cons([response_xaerdun_trigger,response_xaerdun_response],plSpeechResponses);
      plSpeechResponses = Cons([response_iwodach_trigger,response_iwodach_response],plSpeechResponses);
      plSpeechResponses = Cons([response_nequzon_trigger,response_nequzon_response],plSpeechResponses);
      plSpeechResponses = Cons([response_raumlar_trigger,response_raumlar_response],plSpeechResponses);
      plSpeechResponses = Cons([response_sorcery_trigger,response_sorcery_response],plSpeechResponses);
      plSpeechResponses = Cons([response_witchery_trigger,response_witchery_response],plSpeechResponses);
      plSpeechResponses = Cons([response_banditry_trigger,response_banditry_response],plSpeechResponses);

      plSpeechResponses = Cons([response_jala_trigger,response_jala_response],plSpeechResponses);
      plSpeechResponses = Cons([response_bard_trigger,response_bard_response],plSpeechResponses);
      
      plRandomSayings = Cons(random_saying_1,plRandomSayings);
      plRandomSayings = Cons(random_saying_2,plRandomSayings);
      plRandomSayings = Cons(random_saying_3,plRandomSayings);
      plRandomSayings = Cons(random_saying_4,plRandomSayings);
      plRandomSayings = Cons(random_saying_5,plRandomSayings);
      plRandomSayings = Cons(random_saying_6,plRandomSayings);
      plRandomSayings = Cons(random_saying_7,plRandomSayings);
      propagate;
   }

   SomeoneSaid(what = $,type = $,string = $)
   {
      local i;

      % Are we supposed to hear things?
      if (NOT (viAttributes & MOB_LISTEN))
         OR string = $
      {
         propagate;
      }

      % Was it a user talking, another NPC, or myself?
      if NOT IsClass(what,&User)
      {
         if what = self OR NOT (viAttributes & MOB_LISTEN_MOB)
         {
            propagate;
         }
      }

      % Anonymous (and morph) filter
      % Don't handle triggers normally if player's anonymous flag is set,
      % just say anonymous_response

      if IsClass(what,&Player)
         AND (Send(what,@CheckPlayerFlag,#flag=PFLAG_ANONYMOUS)
              OR Send(what,@CheckPlayerFlag,#flag=PFLAG_MORPHED))
         AND type <> SAY_DM
      {
         Send(what,@MsgSendUser,#message_rsc=monster_anonymous_response,
              #parm1=Send(self,@GetName));

         return;
      }

      if type = SAY_NORMAL
      {
         foreach i in plSpeechResponses
         {
            if StringContain(string,First(i))
            {
               Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,#string=Nth(i,2));
               propagate;
            }
         }
      }

      propagate;
   }

   SayRandom()
   {
      if plRandomSayings <> $
      {
         Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,#string=Nth(plRandomSayings,Random(1,Length(plRandomSayings))));
      }
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
