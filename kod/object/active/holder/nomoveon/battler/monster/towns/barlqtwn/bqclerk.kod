% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BarloqueClerk is BarloqueTown

constants:

   include blakston.khd
   include protocol.khd

   % Number of pardons allowed in one term
   % (unlike "pardon" spell, a justicar pardon takes you down one notch,
   % from murderer to outlaw, or from outlaw to lawful)
   PARDON_LIMIT = 8

   BOOTH_WEST = 6
   BOOTH_EAST = 7
   BOOTH_NORTH = 12
   BOOTH_SOUTH = 14

   COMMAND_NONE = 0
   COMMAND_PARDON = 1
   COMMAND_REMAND = 2

   STATE_ACCEPTING_VOTES = 1
   STATE_TERM_IN_OFFICE  = 2
   STATE_NO_ELECTIONS = 3

resources:

   include bqclerk.lkod

   barloque_clerk_name_rsc = "Caramo"
   barloque_clerk_icon_rsc = bqclerk.bgf
   barloque_clerk_desc_rsc = \
      "Not your typical Royal bureaucrat.  "
      "She's attractive, charming, and by all accounts, honorable.  "
      "Caramo has spent years counting the Duke's money, "
      "filing the former Queen's taxation scrolls, and more recently, "
      "serving as clerk for the Office of the Justicar."

   % Accountability

   barloque_clerk_pardon = "pardon"
   barloque_clerk_pardons = "pardons"
   barloque_clerk_anoutlaw = "an outlaw"
   barloque_clerk_outlaws = "outlaws"
   barloque_clerk_amurderer = "a murderer"
   barloque_clerk_murderers = "murderers"
   barloque_clerk_alawful = "a lawful citizen"
   barloque_clerk_lawfuls = "lawful citizens"
   barloque_clerk_aperson = "a person"
   barloque_clerk_person = "person"
   barloque_clerk_people = "people"
   barloque_clerk_pardons_served1 = \
      "In this term, Justicar %q hath served %i %s."
   barloque_clerk_pardons_served2 = \
      "Of those, %i %s to %s, and %i to %s."

   % Problems

   barloque_clerk_no_justicar = \
      "In faith, there is no one serving as Justicar currently."
      
   % Intelligence

   barloque_clerk_summary_lawful = \
      "According to records, "
      "%q is a lawful citizen in keeping with the Royal Establishment."
   barloque_clerk_summary_outlaw = \
      "According to records, "
      "%q is an outlaw for having caused injury upon lawful citizens, "
      "or for breaking other laws of the land."
   barloque_clerk_summary_murderer1 = \
      "According to records, "
      "%q hath killed %i %s."
   barloque_clerk_summary_murderer2 = \
      "Of those, %i being %s, and %i %s justifiable by law."
   barloque_clerk_was = "was"
   barloque_clerk_were = "were"
   
   indulgence_not_enough_money = \
      "You think the law will forgive you for partial measures? Pay the "
      "full amount or get out of my sight."
   indulgence_success = \
      "Thank you for paying your debt to society. You will no longer be "
      "considered a murderer in the eyes of the law."
   indulgence_not_a_murderer = "Only murderers may buy indulgences."
   barloque_clerk_indulgence_1 = "Let it be known that "
   barloque_clerk_indulgence_2 = \
      " has been granted an indulgence and pardoned.  So it has been "
      "spoken, so it shall be done.\n\n-- Caramo"
   barloque_clerk_indulgence_3 = " granted indulgence"
   
   no_more_ballots = \
      "According to the Royal Paperwork Reduction Act, ballots are no "
      "longer used in this office."

   % Name changing.
   barloque_clerk_trigger_change = "change"
   barloque_clerk_trigger_name = "name"
   barloque_clerk_change_name = \
      "Yes, I can change your legal name by deed poll.  Simply fill out your "
      "new name on this scroll and return it. If it is available and not "
      "obscene, it shall be yours.  I must warn you, there is a fee of %i "
      "shillings for providing this service, which will be deducted from "
      "your bank account."
   barloque_clerk_cant_hold = \
      "I can change your legal name by deed poll, but you have no room in "
      "your inventory to hold the scroll you would need to fill out."
   barloque_clerk_warning_cost = \
      "~BI must warn you again before I complete this process, that you will be "
      "charged %i shillings for this service.  If you are positive you wish "
      "to pay the fee, I will accept your scroll."
   barloque_clerk_not_enough = \
      "You do not have enough money in your bank account for this service."
   barloque_clerk_bad_name = \
      "Sorry, that username is not valid."
   barloque_clerk_name_changed = \
      "Your name has been changed."

   barloque_clerk_name_post_1 = "'s name has been changed"
   barloque_clerk_name_post_2 = "Let it be known that "
   barloque_clerk_name_post_3 = \
      "'s name has been changed by deed poll to "
   barloque_clerk_name_post_4 = \
      ". So it has been spoken, so shall it be done. \n\n-- Caramo"

classvars:

   vrName = barloque_clerk_name_rsc
   vrIcon = barloque_clerk_icon_rsc
   vrDesc = barloque_clerk_desc_rsc

   viAttributes = \
      MOB_NOFIGHT | MOB_LISTEN | MOB_SELLER | MOB_NOMOVE \
      | MOB_LAWFUL | MOB_FULL_TALK | MOB_RECEIVE
   viGender = GENDER_FEMALE

properties:

   piAnimation = ANIM_NONE

   piJusticar_State = STATE_NO_ELECTIONS

   piCommand = COMMAND_NONE

   % A list containing players who have received the name change cost
   % warning, to avoid players obtaining a ballot and giving it to
   % Caramo "accidentally".
   plNameChangeWarn = $

messages:

   Recreate()
   "Delete outstanding scrolls, verify wanted items and clear warn list."
   {
      Send(self,@SetWantedItems);

      % Clear the name change warning list and delete outstanding scrolls.
      Send(&NameChangeScroll,@Delete);
      plNameChangeWarn = $;

      return;
   }

   Constructor()
   {
      Send(self,@SetWantedItems);
      Send(SYS,@SetCaramo,#oCaramo=self);

      piJusticar_State = STATE_NO_ELECTIONS;

      plNameChangeWarn = $;

      propagate;
   }

   SetWantedItems()
   {
      plWantedItems = [ &NameChangeScroll, &BallotItem, &Money ];

      return;
   }

   GotWantedItem(obj=$,who=$)
   {
      if IsClass(obj,&NameChangeScroll)
      {
         % Deed poll can be used to change a player's name.
         % Returns TRUE if successful, otherwise give the scroll back.
         Send(self,@TryChangePlayerName,#who=who,#oItem=obj);

         return;
      }

      if IsClass(obj,&BallotItem)
      {
         Post(poOwner,@SomeoneSaid,#what=self,#string=no_more_ballots,
               #type=SAY_RESOURCE);

         return;
      }

      if Send(self,@CheckForIndulgence,#who=who,#obj=obj)
      {
         return;
      }

      propagate;
   }

   TryChangePlayerName(who=$,oItem=$)
   "Attempts to change a player's name. If they've been warned, and they can "
   "pay the fee, will check with System to see if the name is valid. If it "
   "is, name will be changed."
   {
      local i, iAmount, oBank;

      if who = $
         OR oItem = $
      {
         return;
      }

      iAmount = Send(SETTINGS_OBJECT,@GetNameChangeCost);

      % No existing list, add player and warn.
      if plNameChangeWarn = $
      {
         plNameChangeWarn = [who];
         Send(self,@SayToOne,#message_rsc=barloque_clerk_warning_cost,
               #target=who,#parm1=iAmount);

         return;
      }

      foreach i in plNameChangeWarn
      {
         if i = who
         {
            % Check if name is valid.
            if NOT Send(SYS,@ValidateUserName,#oUser=who,
                        #sName=Send(oItem,@GetInscription))
            {
               Send(self,@SayToOne,#target=who,
                     #message_rsc=barloque_clerk_bad_name);

               return;
            }

            % Get player's bank account.
            oBank = Send(SYS,@FindBankByNum,#num=BID_TOS);
            if Send(oBank,@GetAccount,#what=who) >= iAmount
            {
               % Player has enough money, change their name and take the
               % money.
               Send(oBank,@WithdrawAccount,#what=who,#amount=iAmount);
               Send(self,@SayToOne,#target=who,
                     #message_rsc=barloque_clerk_name_changed);
               % Record the name change in the Book of Jala.
               Send(self,@RecordNameChangeBook,#parm1=Send(who,@GetTrueName),
                     #parm2=Send(oItem,@GetInscription));
               % System will handle changing the name.
               Send(SYS,@ChangeUserName,#oUser=who,
                     #sName=Send(oItem,@GetInscription));
               % Scroll handles removing player from plNameChangeWarn list.
               Send(oItem,@Delete);

               return;
            }
            else
            {
               % Not enough money.
               Send(self,@SayToOne,#target=who,
                     #message_rsc=barloque_clerk_not_enough);

               return;
            }
         }
      }

      % Player wasn't in list, add them.
      plNameChangeWarn = Cons(who,plNameChangeWarn);
      Send(self,@SayToOne,#message_rsc=barloque_clerk_warning_cost,
            #target=who,#parm1=iAmount);

      return;
   }

   RemoveFromWarnList(who=$)
   {
      local i;

      if who = $
         OR plNameChangeWarn = $
      {
         return;
      }

      foreach i in plNameChangeWarn
      {
         if i = who
         {
            plNameChangeWarn = DelListElem(plNameChangeWarn,who);
         }
      }

      return;
   }

   CheckForIndulgence(who=$,obj=0)
   {
      local oMoney, oBank, amount;

      if NOT IsClass(obj,&Money)
      {
         return FALSE;
      }

      amount = Send(obj,@GetNumber);
      if amount <= 0
      {
         return FALSE;
      }

      % Check for hacked offers
      oMoney = Send(who,@GetMoneyObject);
      if oMoney = $
      {
         return FALSE;
      }

      if Send(oMoney,@GetValue) < amount
      {
         return FALSE;
      }

      if NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         Post(poOwner,@SomeoneSaid,#what=self,
               #string=indulgence_not_a_murderer,#type=SAY_RESOURCE);

         return TRUE;
      }

      if amount < Send(SETTINGS_OBJECT,@GetPardonIndulgenceCost)
      {
         Post(poOwner,@SomeoneSaid,#what=self,
               #string=indulgence_not_enough_money,
               #type=SAY_RESOURCE);

         return TRUE;
      }

      Send(oMoney,@SubtractNumber,#number=Send(SETTINGS_OBJECT,
            @GetPardonIndulgenceCost));
      Send(self,@PerformIndulgencePardonMurderer,#who=who);
      Post(poOwner,@SomeoneSaid,#what=self,#string=indulgence_success,
            #type=SAY_RESOURCE);

      return TRUE;
   }

   PerformIndulgencePardonMurderer(who=$)
   {
      Send(self,@RecordIndulgencePardonBookOfJala,#who=who);

      Send(who,@SetPlayerFlag,#flag=PFLAG_MURDERER,#value=FALSE);
      Send(who,@SetPlayerFlag,#flag=PFLAG_OUTLAW,#value=TRUE);

      return;
   }

   RecordIndulgencePardonBookOfJala(who=$, parm1=$, parm2=$)
   {
      local sString, sString2, oBook;

      ClearTempString();
      AppendTempString(barloque_clerk_indulgence_1);
      AppendTempString(Send(who,@GetTrueName));
      AppendTempString(barloque_clerk_indulgence_2);
      sString = CreateString();
      setString(sString,GetTempString());

      ClearTempString();
      AppendTempString(Send(who,@GetTrueName));
      AppendTempString(barloque_clerk_indulgence_3);
      sString2 = CreateString();
      SetString(sString2,GetTempString());

      oBook = Send(poOwner,@GetBook);
      Send(oBook,@PostNews,#what=self,#title=sString2,#body=sString);

      return;
   }

   RecordNameChangeBook(parm1=$, parm2=$)
   "parm1=oldname,parm2=newname"
   {
      local sString, sString2, oBook;

      ClearTempString();
      AppendTempString(parm1);
      AppendTempString(barloque_clerk_name_post_1);
      sString = SetString($,GetTempString());

      ClearTempString();
      AppendTempString(barloque_clerk_name_post_2);
      AppendTempString(parm1);
      AppendTempString(barloque_clerk_name_post_3);
      AppendTempString(parm2);
      AppendTempString(barloque_clerk_name_post_4);
      sString2 = SetString($,GetTempString());

      oBook = Send(poOwner,@GetBook);
      Send(oBook,@PostNews,#what=self,#title=sString,#body=sString2);

      return;
   }

   %%% Handling citizen commands.

   SomeoneSaid(what=$,type=$,string=$)
   {
      local iRow, iCol, oTarget, iAmount, oScroll;

      if what = $ OR NOT IsClass(what,&Player)
      {
         propagate;
      }
      
      if type <> SAY_NORMAL
      {
         propagate;
      }

      % Public Commands
      if IsClass(what,&User)
      {
         oTarget = Send(SYS,@FindUserByString,#string=string);
         if oTarget <> $
         {
            Send(self,@CitizenRequestsPlayerRecord,#citizen=what,#who=oTarget);

            % Unlikely, but check if the player's name would interfere with
            % the name change system.
            if NOT (StringContain(string,barloque_clerk_trigger_change)
               AND StringContain(string,barloque_clerk_trigger_name))
            {
               return;
            }
         }
      }

      if StringContain(string,barloque_clerk_trigger_change)
            AND StringContain(string,barloque_clerk_trigger_name)
      {
         iAmount = Send(SETTINGS_OBJECT,@GetNameChangeCost);
         oScroll = Create(&NameChangeScroll);

         if Send(what,@ReqNewHold,#what=oScroll)
         {
            Send(self,@SayToOne,#target=what,
                  #message_rsc=barloque_clerk_change_name,#parm1=iAmount);

            % Don't give out multiple scrolls.
            if Send(what,@FindHolding,#class=&NameChangeScroll) = $
            {
               Send(what,@NewHold,#what=oScroll);
            }
            else
            {
               Send(oScroll,@Delete);
            }
         }
         else
         {
            Send(self,@SayToOne,#target=what,
                  #message_rsc=barloque_clerk_cant_hold);
            Send(oScroll,@Delete);
         }

         return;
      }

      propagate;
   }

   CitizenRequestsPlayerRecord(citizen=$,who=$)
   {
      local iTotal, iJust, iUnjust, bMurderer, bOutlaw;

      if who = $
         OR citizen = $
      {
         return;
      }

     iJust = Send(who,@GetJustifiedKills);
     iUnjust = Send(who,@GetUnjustifiedKills);
     iTotal = iJust + iUnjust;

     Send(self,@SayToOne,#target=citizen,
          #message_rsc=barloque_clerk_summary_murderer1,
          #parm1=Send(who,@GetTrueName),#type1=STRING_RESOURCE,
          #parm2=iTotal,
          #parm3=Send(self,@SingPlur,#num=iTotal,#sing=barloque_clerk_person,
                      #plur=barloque_clerk_people));

     Send(self,@SayToOne,#target=citizen,
          #message_rsc=barloque_clerk_summary_murderer2,
          #parm1=iUnjust,
          #parm2=Send(self,@SingPlur,#num=iUnjust,#sing=barloque_clerk_alawful,
                      #plur=barloque_clerk_lawfuls),
          #parm3=iJust,
          #parm4=Send(self,@SingPlur,#num=iJust,#sing=barloque_clerk_was,
                      #plur=barloque_clerk_were));

      return;
   }

   SingPlur(num=$,sing=$,plur=$)
   {
      if num = 1
      {
         return sing;
      }

      return plur;
   }

   ResetBrain()
   {
      poBrain = Send(SYS,@FindBrainByNum,#num=viBrain_type);

      return;
   }

   Delete()
   {
      plNameChangeWarn = $;

      Send(SYS,@DeleteCaramo);

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
