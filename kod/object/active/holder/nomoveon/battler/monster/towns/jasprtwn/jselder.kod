% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
JasperElder is JasperTown

constants:

   include blakston.khd

resources:

   include jselder.lkod

   JasperElder_name_rsc = "Afiera D'xor"
   JasperElder_icon_rsc = jselder.bgf
   JasperElder_desc_rsc = \
      "Afiera D'xor spent many, many years of solitude in these mountains, "
      "and now devotes his life to his art.  His stone carvings are intricate "
      "designs of mathematical perfection.  He will make time, however, to "
      "entertain travellers who hope to share some of the wisdom he has "
      "gained from a life of secluded meditation."
      "\n\nHe can also help you change your stats with training "
      "if you are a newbie, if you are holding an Ancient Trinket, or "
      "if you have a free stat reset from recently reincarnating. "
      "First, reset all your stats to one by saying 'reset stats'. "
      "Then, you may say 'train might', for example, to train a point of Might. "
      "You can also say 'train five might' or 'train ten might.' "
      "The same is true for intellect, stamina, agility, mysticism, and aim. "
      "Once you begin this process, finish it before you leave the area. "
      "Your free stat reset or Ancient Trinket will be consumed when you leave. "

   JasperElder_entry_welcome = "Greetings.  May you live to see my years."

   JasperElder_unwanted_keep = \
      "~k%s%s tells you, \"Perhaps I may find some use for that.~n~k\""
   JasperElder_unwanted_pay = \
      "~k%s%s tells you, \"How convenient.~n~k\""
   JasperElder_unwanted_give = \
      "~k%s%s tells you, \"Most material goods are of little consequence "
      "to an old man like me.~n~k\""

   JsEl_stat_window_trigger = "change stats"

   jas_elder_cannot_train_msg = \
      "You seem to have full command of your potential in that stat. I cannot train you further."
   jas_elder_teach_msg = \
      "You may have heard this tale of wisdom, but I'll tell it again."
   jas_elder_clear_stats_first_msg = \
      "You must say 'reset stats' first to clear your stats. "
      "That will begin the training process. Once it has started, "
      "do not leave before you finish training."

classvars:

   viDefinite = ARTICLE_NONE
   viIndefinite = ARTICLE_NONE
   vrName = JasperElder_name_rsc
   vrIcon = JasperElder_icon_rsc
   vrDesc = JasperElder_desc_rsc
   viAttributes = \
      MOB_RANDOM | MOB_LISTEN | MOB_RECEIVE | MOB_NOFIGHT \
      | MOB_NOMOVE | MOB_TEACHER | MOB_PERM_QUESTER
   viOccupation = MOB_ROLE_ELDER

   viQuestID = QST_ID_DEMENTIA_SPELL

   vrUnwanted_keep = JasperElder_unwanted_keep
   vrUnwanted_pay = JasperElder_unwanted_pay
   vrUnwanted_give = JasperElder_unwanted_give

messages:

   SomeoneSaid(what = $,type = $,string = $,parm1 = $,parm2 = $,parm3 = $,
               parm4 = $, parm5 = $,parm6 = $,parm7 = $,parm8 = $)
   {
      local iResult;

      if StringEqual(string,JsEl_stat_window_trigger)
      {
         if Send(what,@FindHolding,#class=&StatsResetToken) <> $
            OR (Send(what,@GetBaseMaxHealth)
               <= Send(SETTINGS_OBJECT,@GetFreeStatsResetCap))
            OR Send(what,@HasReincarnationStatsReset)
         {
            Send(what,@SendStatChange);
         }
      }

      if what <> $
         AND IsClass(what,&User)
         AND (Send(what,@FindHolding,#class=&StatsResetToken) <> $
            OR (Send(what,@GetBaseMaxHealth)
               <= Send(SETTINGS_OBJECT,@GetFreeStatsResetCap))
            OR Send(what,@HasReincarnationStatsReset))
      {
         if StringContain(string,"reset stats")
         {
            Send(what,@ClearStats);
            return;
         }
         
         if NOT Send(what,@ClearedStatsRecently)
         {
            Send(self,@SayToOne,#target=what,#message_rsc=jas_elder_clear_stats_first_msg);
            return;
         }

         if StringContain(string,"train might")
         {
            iResult = Send(what,@AttemptTrainStatPoint,#type=STAT_ID_MIGHT);
         }
         if StringContain(string,"train intellect")
         {
            iResult = Send(what,@AttemptTrainStatPoint,#type=STAT_ID_INTELLECT);
         }
         if StringContain(string,"train stamina")
         {
            iResult = Send(what,@AttemptTrainStatPoint,#type=STAT_ID_STAMINA);
         }
         if StringContain(string,"train agility")
         {
            iResult = Send(what,@AttemptTrainStatPoint,#type=STAT_ID_AGILITY);
         }
         if StringContain(string,"train mysticism")
         {
            iResult = Send(what,@AttemptTrainStatPoint,#type=STAT_ID_MYSTICISM);
         }
         if StringContain(string,"train aim")
         {
            iResult = Send(what,@AttemptTrainStatPoint,#type=STAT_ID_AIM);
         }

         if StringContain(string,"train five might")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_MIGHT);
         }
         if StringContain(string,"train five intellect")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_INTELLECT);
         }
         if StringContain(string,"train five stamina")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_STAMINA);
         }
         if StringContain(string,"train five agility")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_AGILITY);
         }
         if StringContain(string,"train five mysticism")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_MYSTICISM);
         }
         if StringContain(string,"train five aim")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_AIM);
         }

         if StringContain(string,"train ten might")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_MIGHT,#amount=10);
         }
         if StringContain(string,"train ten intellect")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_INTELLECT,#amount=10);
         }
         if StringContain(string,"train ten stamina")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_STAMINA,#amount=10);
         }
         if StringContain(string,"train ten agility")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_AGILITY,#amount=10);
         }
         if StringContain(string,"train ten mysticism")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_MYSTICISM,#amount=10);
         }
         if StringContain(string,"train ten aim")
         {
            iResult = Send(what,@AttemptTrainStatPoints,#type=STAT_ID_AIM,#amount=10);
         }
         
         if iResult
         {
            Send(self,@SayToOne,#target=what,#message_rsc=jas_elder_teach_msg);
         }
         else
         {
            Send(self,@SayToOne,#target=what,#message_rsc=jas_elder_cannot_train_msg);
         }
         return;
      }

      propagate;
   }

   AffectMood(what=$,why=$)
   {
      if why = MOODMOD_ACCEPT_ITEM
      {
         if IsClass(what, &RainbowFern)
            OR IsClass(what, &WebMoss)
            OR IsClass(what, &OrcTooth)
         {
            Send(self,@SetMood,#new_mood=piMood + 7);
         }
      }

      return;
   }

   InitPermQuest()
   {
      Post(Send(SYS,@GetLibrary),@CreateQuest,#type=QST_PERM,#quester=self,
           #reward= [QST_REWARD_ID,viQuestID]);

      return;
   }

   Constructor()
   "We start a permanent quest for learning a spell" 
   {
      plWantedItems = [&StatsResetToken];
      
      Send(self,@InitPermQuest);

      propagate;
   }

   CanAddSpell(who=$,num=0)
   "We require that a quest be done before one of the spells can be learned."
   {
%      if num=SID_DEMENT
%         AND NOT Send(self,@HasDoneLearnQuest,#who=who)
%      {
%         return FALSE;
%      }

      propagate;
   }

   SetForSale()
   {
      plFor_sale = [
         $,$,
         [
            SID_LIGHTNING_BOLT,
            SID_DEMENT
         ],
      $];

      return;
   }

   UserEntered(who=$)
   {
      if Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
      {
         Send(self,@SetMood,#new_mood=piMood+2);
      }

      if Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         Send(self,@SetMood,#new_mood=piMood+1);
      }

      if Send(who,@GetHomeRoom) = RID_JAS_INN
      {
         Send(self,@SetMood,#new_mood=piMood+2);
      }

      Post(who,@someoneSaid,#what=self,#string=JasperElder_entry_welcome,
            #type=SAY_RESOURCE);

      propagate;
   }

   CanAcceptOffer()
   {
      return TRUE;
   }

   CheckWhyWanted(obj=$,who=$)
   {
      if IsClass(obj,&StatsResetToken)
      {
         Send(who,@SendStatChange);

         % We don't destroy the item, so return FALSE.
         return FALSE;
      }

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
