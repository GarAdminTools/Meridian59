% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
RadiusEnchantmentTotem is ActiveObject


% This is a class that should be used carefully - it hosts effects.
% It doesn't work with the modern RE system.

constants:

   include blakston.khd

resources:

   RadiusEnchantmentTotem_icon_rsc = blank.bgf
   
classvars:

   viObject_flags = OF_NOEXAMINE
   vrIcon = RadiusEnchantmentTotem_icon_rsc

properties:

   poSpell = $            %% The radius spell we're supporting
   poCaster = $           %% The caster of the original spell

   piSpellpower = $
   ptExpirationTimer = $

   piRow = 0
   piCol = 0

   % List of enchantments applied by radius spells.
   % Each element is [song object, spellpower, caster]
   % Support for players, monsters, and items
   plRadiusEnchantments = $

messages:

   Constructor(totem_spell=$,totem_caster=$,totem_power=0,totem_range=0)
   {
      local oRoom, iTime;
      
      poSpell = totem_spell;
      poCaster = totem_caster;
      piSpellpower = totem_power;

      oRoom = $;
      if IsClass(poCaster,&Player)
      {
         oRoom = Send(poCaster,@GetOwner);
      }

      If oRoom = $
         OR poCaster = $
         OR poSpell = $
         OR piSpellpower = 0
         OR NOT IsClass(oRoom,&Room)
      {
         Post(self,@Delete);
         return;
      }

      Send(SYS,@AddSpellTotemToServerList,#oTotem=self);
      
      piRow = Send(poCaster,@GetRow);
      piCol = Send(poCaster,@GetCol);

      Send(oRoom,@NewHold,#what=self,#new_row=piRow,#new_col=piCol);

      Send(poSpell,@InitiateNewRadiusEnchantment,#source=self,#iSpellPower=piSpellpower,#iRange=totem_range);

      iTime = Send(poSpell,@GetDuration,#iSpellPower=piSpellpower);
      if iTime <> $
      {
         ptExpirationTimer = CreateTimer(self,@TotemExpire,iTime);
      }

      propagate;
   }
   
   TotemExpire()
   {
      local i;

      ptExpirationTimer = $;
      
      Send(self,@Delete);
      return;
   }

   Delete()
   {
      local i;

      if ptExpirationTimer <> $
      {
         DeleteTimer(ptExpirationTimer);
         ptExpirationTimer = $;
      }

      foreach i in plRadiusEnchantments
      {
         Send(Nth(i,1),@BreakTrance,#who=self,#event=EVENT_STEER);
      }

      poCaster = $;
      poSpell = $;
      plRadiusEnchantments = $;

      Send(SYS,@DeleteSpellTotemFromMasterList,#oTotem=self);

      propagate;
   }
   
   GetCaster()
   {
      return poCaster;
   }
   
   GetSpell()
   {
      return poSpell;
   }

   GetName()
   {
      return Send(poCaster,@GetName);
   }
   
   GetTrueName()
   {
      return Send(poCaster,@GetTrueName);
   }
   
   GetGuild()
   {
      if IsClass(poCaster,&Monster)
      {
         return $;
      }

      return Send(poCaster,@GetGuild);
   }
   
   AllowPlayerAttack(victim=$,report=FALSE)
   {
      if IsClass(poCaster,&Monster)
      {
         return TRUE;
      }

      if victim = poCaster
      {
         return TRUE;
      }

      return Send(poCaster,@AllowPlayerAttack,#victim=victim,#report=FALSE,
                  #stroke_obj=poSpell);
   }
   
   CheckPlayerFlag(flag=$)
   {
      if IsClass(poCaster,&Monster)
      {
         return $;
      }

      return Send(poCaster,@CheckPlayerFlag,#flag=flag);
   }

   SomethingEntered(where = $,what = $)
   {
      return;
   }
   
   SomethingLeft(where = $,what = $)
   {
      return;
   }
   
   SomethingMoved(what = $,new_row = $,new_col = $)
   {
      propagate;
   }

   LastUserLeft()
   {
      propagate;
   }

   DestroyDisposable()
   {
      % These naturally time out. They are never actively deleted.
      return;
   }

   GetEnchantedState(what = $)
   "If enchanted by <what>, returns the state data (which MUST exist, or it's an error.  "
   "In other words, the caller must know that <what> adds state data).  Returns $ otherwise."
   {
      local i;

      foreach i in plRadiusEnchantments
      {
         if Nth(i,1) = what
         {
            return Nth(i,2);
         }
      }
      
      return $;
   }

   AddRadiusEnchantment(what=$,iPower=0,source=$)
   {
      local i;
      
      foreach i in plRadiusEnchantments
      {
         if Nth(i,1) = what
            AND Nth(i,2) = iPower
            AND Nth(i,3) = source
         {
            return;
         }
      }

      plRadiusEnchantments = Cons([what,iPower,source],plRadiusEnchantments);
      
      If IsClass(self,&User)
      {
         Send(self,@ShowAddEnchantment,#what=what,#type=2);
         
         If source = self
         {
            Send(self,@ShowAddEnchantment,#what=what,#type=1);
         }
      }
      
      return;
   }

   RemoveRadiusEnchantment(what=$,iPower=0,source=$)
   {
      local i, bFound;

      bFound = FALSE ;
      foreach i in plRadiusEnchantments
      {
         if Nth(i,1) = what
            AND Nth(i,2) = iPower
            AND Nth(i,3) = source
         {
            If IsClass(self,&User)
            {
               Send(self,@ShowRemoveEnchantment,#what=Nth(i,1),#type=2);

               If source = self
               {
                  Send(self,@ShowRemoveEnchantment,#what=Nth(i,1),#type=1);
               }
            }
         
            plRadiusEnchantments = DelListElem(plRadiusEnchantments,i);
            bFound = TRUE;
         }
      }

      if NOT bFound
      {
         Debug(self,"Tried to remove radius enchantment ",what," but not in list",
               plRadiusEnchantments);
      }

      return;
   }
   
   IsAffectedByRadiusEnchantment(what=$,caster=$,byClass=&RadiusEnchantment)
   "Returns whether or not currently enchanted by <what> radius enchantment."
   {
      local i;
      
      if plRadiusEnchantments = $
      {
         return FALSE;
      }

      if what = $
      {
         foreach i in plRadiusEnchantments
         {
            if IsClass(Nth(i,1),byClass)
            {
               if caster = $
               {
                  return TRUE;
               }
               else
               {
                  if Nth(i,3) = caster
                  {
                     return TRUE;
                  }
               }
            }
         }
      }
      else
      {
         foreach i in plRadiusEnchantments
         {
            if Nth(i,1) = what
            {
               if caster = $
               {
                  return TRUE;
               }
               else
               {
                  if Nth(i,3) = caster
                  {
                     return TRUE;
                  }
               }
            }
         }      
      }
      
      return FALSE;
   }
   
   GetMostPowerfulRadiusEnchantmentState(byClass=&RadiusEnchantment)
   {
      local i, oHighest;
   
      oHighest = $;
   
      foreach i in plRadiusEnchantments
      {
         if IsClass(Nth(i,1), byClass)
         {
            if oHighest = $
            {
               oHighest = i;
            }
            else
            {
               if Nth(i,2) > Nth(oHighest,2)
               {
                  oHighest = i;
               }
            }
         }
      }
      return oHighest;
   }
   
   GetRadiusEnchantments()
   {
      return plRadiusEnchantments;
   }
   
   IsInSameRoom(what = $)
   {
      if Send(self,@GetOwner) <> $
         AND IsClass(Send(self,@GetOwner),&Room)
         AND Send(what,@GetOwner) <> $
         AND IsClass(Send(what,@GetOwner),&Room)
         AND Send(self,@GetOwner) = Send(what,@GetOwner)
      {
         return 1;
      }
         
      return 0;
   }

   SquaredDistanceTo(what = $)
   "Computes squared distance to <what>. Returns $ for any object that is not within a room."
   {
      local iRow, iCol;
      
      If NOT Send(self,@IsInSameRoom,#what=what)
      {
         return $;
      }

      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);

      % Sanity checking
      if iRow = $ OR iCol = $ OR Send(self,@GetRow) = $ OR Send(self,@GetCol) = $
      {
         return $;
      }

      return send(self,@SquaredDistanceToLocation,#row=iRow,#col=iCol);
   }

   SquaredDistanceToLocation(row = $, col = $)
   "Computes squared distance to (row,col)"
   {
      local iRow_diff, iCol_diff;

      iRow_diff = Send(self,@GetRow) - row;
      iCol_diff = Send(self,@GetCol) - col;

      return  (iRow_diff * iRow_diff + iCol_diff * iCol_diff);
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%