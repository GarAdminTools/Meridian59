% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ActiveWaveElement is ActiveObject

% must handle:
% - an uninterrupted flow to termination point
% - a player or mob moves in the way
% - a new player enters after wave element has begun motion

constants:

   include blakston.khd
   
   % Room lengths don't generally go over 100
   MAX_WAVEELEM_DISTANCE = 6400
   
   WAVEELEM_PERIOD = 170

resources:

   ActiveWaveElement_name_rsc = "wave element"
   ActiveWaveElement_icon_rsc = poisoncl.bgf
   ActiveWaveElement_desc_rsc = "This is a wave spell element."
   
   ActiveWaveElement_dissipate_rsc = "The wave element dissipates."
   ActiveWaveElement_unaffected_rsc = "You are unaffected by the wave element."

classvars:

   vrName = ActiveWaveElement_name_rsc
   vrIcon = ActiveWaveElement_icon_rsc
   vrdesc = ActiveWaveElement_desc_rsc

   viObject_flags = OF_NOEXAMINE

   viMoveOn_type = MOVEON_NOTIFY

   vrDissipateMessage = ActiveWaveElement_dissipate_rsc
   vrUnaffectedMessage = ActiveWaveElement_unaffected_rsc

   % Flag to see if the wall element effect is harmful.
   vbIsHarmful = TRUE

   % Does this have a Periodic timer check?
   vbPeriodic = TRUE

   % Does the element affect the caster?
   vbCanAffectCaster = FALSE

properties:

   vbSummoned = FALSE

   poCaster = $

   % How much damage do we do?
   piMaxDamage = 0

   % This is the fine range that the element will affect.
   piRange = 128

   % This is a periodic timer that triggers periodic effects and
   %  clears the affected list.
   ptPeriodic = $
   
   % The casting spell tells us our angle.
   piAngle = 0

   % This is a list of objects already affected by the element
   %  this period.
   plAffected = $
   
   % This is where we started and where we're going.
   plStartLocation = $
   plEndLocation = $
   
   % This is where we really are. [row, col, fine row, fine col]
   plRealLocation = $

   % Damage in a radius around these points
   plSteps = $
   piCurrentStep = 1
   ptStepsTimer = $

messages:

   Constructor(caster=$,movement_angle=0)
   {
      poCaster = caster;
      piAngle = movement_angle;

      Post(self,@BeginMovement);

      propagate;
   }

   BeginMovement()
   {
      if poOwner = $
         OR NOT IsClass(poOwner,&Room)
      {
         Send(self,@Delete);
         return;
      }
      else
      {
         plStartLocation = Send(poOwner,@GetRoomPos,#what=self);
      }

      plSteps = Send(poOwner,@IntraTeleport,#what=self,#distance=MAX_WAVEELEM_DISTANCE,#type=INTRA_TELEPORT_FORWARD);
      
      if plSteps = $
      {
         Send(self,@Delete);
         return;
      }

      plStartLocation = Nth(plSteps,(Length(plSteps)));
      plRealLocation = plStartLocation;
      piCurrentStep = Length(plSteps);
      plEndLocation = Send(poOwner,@GetRoomPos,#what=self);
      ptStepsTimer = CreateTimer(self,@DoStep,WAVEELEM_PERIOD);
      
      return;
   }
   
   DoStep(timer=$)
   {  
      ptStepsTimer = $;
      
      plRealLocation = Nth(plSteps,piCurrentStep);
      
      Send(self,@PeriodicEffect);

      piCurrentStep--;
      if piCurrentStep = 0
      {
         Debug("going away");
         Send(self,@Explode);
      }
      else
      {
         ptStepsTimer = CreateTimer(self,@DoStep,WAVEELEM_PERIOD);
      }
      return;
   }

   Explode()
   {
      Send(poOwner,@SomethingExploded,#what=self);
      Send(self,@Delete);
      return;
   }
   
   GetSpeed()
   {
      return (0x80|60);
   }

   GetAngle()
   {
      return piAngle;
   }
   
   SomethingMoved(what = $,new_row = $,new_col = $,fine_row = $,fine_col = $)
   {
      local iRow, iCol, iFineRow, iFineCol;

      % Determine victim's row and column
      if new_row = $
      {
         iRow = Send(what,@GetRow);
      }
      else
      {
         iRow = new_row;
      }

      if new_col = $
      {
         iCol = Send(what,@GetCol);
      }
      else
      {
         iCol = new_col;
      }
      
      if fine_row = $
      {
         iFineRow = Send(what,@GetFineRow);
      }
      else
      {
         iFineRow = fine_row;
      }
      
      if fine_col = $
      {
         iFineCol = Send(what,@GetFineCol);
      }
      else
      {
         iFineCol = fine_col;
      }

      % Check for range
      if IsClass(what,&Battler)
         AND NOT (IsClass(what,&Player)
                  AND Send(what,@IsInCannotInteractMode))
         AND Send(self,@InRange,#what=what,#iRow=iRow,#iCol=iCol,#iFineRow=iFineRow,#iFineCol=iFineCol)
      {
         Send(self,@CheckForEffect,#what=what,#new_row=iRow,#new_col=iCol,#iFineRow=iFineRow,#iFineCol=iFineCol);
      }

      return;
   }

   PeriodicEffect()
   "Periodic check. Clears the affected list, does the effect "
   "if the wall is periodic."
   {
      local i, oObject;

      plAffected = $;
      if vbPeriodic
      {
         foreach i in Send(poOwner,@GetHolderActive)
         {
            oObject = Send(poOwner,@HolderExtractobject,#data=i);
            if IsClass(oObject,&Battler)
               AND NOT (IsClass(oObject,&Player)
                  AND Send(oObject,@IsInCannotInteractMode))
               AND Send(self,@InRange,#what=oObject,
                        #iRow=Send(oObject,@GetRow),
                        #iCol=Send(oObject,@GetCol),
                        #iFineRow=Send(oObject,@GetFineRow),
                        #iFineCol=Send(oObject,@GetFineCol))
            {
               Send(self,@CheckForEffect,#what=oObject);
            }
         }
      }

      return;
   }

   CheckForEffect(what = $,new_row = $,new_col = $, iFineRow=0, iFineCol=0)
   "Check for range to see if we apply the effect."
   {
      local oRoom;

      oRoom = Send(self,@GetOwner);

      % Might not affect caster.
      if (NOT IsClass(what,&Battler))
         OR ((NOT vbCanAffectCaster) AND what = poCaster)
      {
         return FALSE;
      }

      % Don't affect them again this cycle.
      if plAffected <> $
         AND FindListElem(plAffected,what) <> 0
      {
         return FALSE;
      }

      % Don't affect users that haven't moved yet.
      if IsClass(what,&Player)
      {
         if NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_MOVED_SINCE_ENTRY)
         {
            return FALSE;
         }
      }

      % If this is harmful, and both caster and victim are players, then
      % disallow damage if caster's safety is on or if cannot do attack.
      % AllowPlayerAttack also performs all the other required checks,
      % so they are no longer needed in this class.
      if vbIsHarmful
         AND IsClass(poCaster,&Player)
         AND NOT Send(poCaster,@AllowPlayerAttack,#victim=what,
                        #report=FALSE)
      {
         % We've been "affected" for this cycle.  This prevents super-spam.
         plAffected = Cons(what,plAffected);

         if IsClass(what,&Player)
            AND NOT Send(what,@IsInCannotInteractMode)
         {
            Send(what,@MsgSendUser,#message_rsc=vrUnaffectedMessage);
         }

         return FALSE;
      }

      Send(self,@DoEffect,#what=what);

      return TRUE;
   }

   DoEffect(what = $)
   "Apply the wall's effect to 'what'."
   {
      % Keep track that we've affected this object.
      plAffected = Cons(what,plAffected);

      return;
   }

   InRange(what = $,iRow = $,iCol = $,iFineRow=$,iFineCol=$)
   "Checks if we can see the target and if so if they are in range."
   {
      local iSquaredDist;
      
      if Send(poOwner,@LineOfSightBetweenLocations,#lLocationOne=[iRow,iCol,iFineRow,iFineCol],#lLocationTwo=plRealLocation)
      {
         iSquaredDist = Send(what,@SquaredFineDistanceBetweenLocations3D,#lLocationOne=[iRow,iCol,iFineRow,iFineCol],
                                                                         #row=Nth(plRealLocation,1),
                                                                         #col=Nth(plRealLocation,2),
                                                                         #fine_row=Nth(plRealLocation,3),
                                                                         #fine_col=Nth(plRealLocation,4));

         if iSquaredDist <= (piRange * piRange)
         {
           return TRUE;
         }
      }

      return FALSE;
   }

   Delete()
   {
      poCaster = $;
      plAffected = $;

      if ptStepsTimer <> $
      {
         DeleteTimer(ptStepsTimer);
         ptStepsTimer = $;
      }
      if ptPeriodic <> $
      {
         DeleteTimer(ptPeriodic);
         ptPeriodic = $;
      }

      propagate;
   }

   ReqNewOwner(what = $)
   {
      return IsClass(what,&Room);
   }

   NewOwner(what = $)
   {
      Post(self,@LocationCheck,#where=what);

      plAffected = $;

      propagate;
   }

   LocationCheck(where = $)
   {
      if (IsClass(where,&GuildHall)
            AND Send(where,@InFoyer,#who=poCaster)
            AND send(where,@FoyerDissipatesWallElements))
         OR (Send(where,@IsArena)
            AND NOT Send(where,@InPlay,#what=self,#bNonPlayerOkay=TRUE))
      {
         if IsClass(poCaster,&Player)
         {
            Send(poCaster,@MsgSendUser,#message_rsc=vrDissipateMessage);
         }

         Post(self,@Delete);
      }

      return;
   }

   GetCaster()
   {
      return poCaster;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
