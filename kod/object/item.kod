% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Item is Object

constants:

   include blakston.khd
   include protocol.khd

   ARMOR_TAKE_DAMAGE_PCT = 75

   APPLY_SUCCESS = 1
   THIS_SHARD_CANNOT_APPLY = 2
   NO_SPACE_FOR_MODS = 3
   NO_MODS_FOUND = 4
   UNKNOWN_ERROR = 5
   NO_ITEM = 6
   NO_PLAYER = 7
   WEIGHT_TEST_FAILED = 8
   MOD_NOT_FOUND = 9
   
   NO_MONSTER = 10
   
resources:

   include item.lkod

   item_this = "This "
   item_blank_template = "%q"

   % item_desc_template is vrDesc, item attributes, object attributes, magic mods,
   % variable item appends, item stats, item condition.
   item_desc_template = "%r%r%r%r%r%r%r%r"
   resource_blank = ""

   item_try_use_cursed_rsc = \
      "As you pick the item up, you feel a will greater than your own "
      "overwhelm your mind!  Not of your own volition, you try to put it on!"

   item_broken_battle = "Your %s shatters in the heat of battle!"
   item_broken_battle_plural = "Your %s shatter in the heat of battle!"
   item_broken_battle_clothing = "Your %s falls into useless tatters!"
   item_broken_battle_clothing_plural = "Your %s fall into useless tatters!"

   itematt_generic = \
      "  At first glance, it seems quite ordinary, but there is something odd "
      "about it you can't put your finger on."

   nakedleftarm_male = blg.bgf
   nakedrightarm_male = brg.bgf
   nakedleftarm_female = blh.bgf
   nakedrightarm_female = brh.bgf

   item_condition_exc = " is in immaculate condition."
   item_condition_exc_mended = \
      " is in excellent condition, but has been patched before."
   item_condition_good = " is scuffed and slightly worn."
   item_condition_med = " has a few unsightly rips."
   item_condition_poor = " is in tatters, and barely holding together."
   item_condition_broken = " is covered in filth and ripped beyond use."
   item_cond_master = "\n%s%s%s (%i/%i)"
   special_properties_header = \
      "\n\nThis item has the following overall properties:\n"
   item_stats_range = "%i range\n"
   item_stats_offense = "%i melee offense rating bonus\n"
   item_stats_ranged_offense = "%i ranged offense rating bonus\n"
   item_stats_armor = "%i armor\n"
   item_stats_defense = "%i defense rating bonus\n"
   item_stats_melee = "%i melee weapon damage bonus\n"
   item_stats_min_dmg = "%i-"
   item_stats_base_dmg = "%r%i base damage\n"
   item_stats_owner_dmg = "%r%i damage in owner's hands\n"
   item_stats_cond_dmg = "%r%i conditional base damage\n"
   item_stats_cond_owner_dmg = "%r%i conditional damage in owner's hands\n"
   item_stats_dmg_bonus = "%i damage bonus\n"
   item_stats_gen_sp = "%i general spellpower\n"
   item_stats_faren_sp = "%i Faren spellpower\n"
   item_stats_riija_sp = "%i Riija spellpower\n"
   item_stats_kran_sp = "%i Kraanan spellpower\n"
   item_stats_jala_sp = "%i Jala spellpower\n"
   item_stats_shal_sp = "%i Shal'ille spellpower\n"
   item_stats_qor_sp = "%i Qor spellpower\n"
   item_stats_jala_instrument_sp = "%i Jala instrument power\n"
   item_stats_resistance = "%i%% %s\n"
   item_stats_dmg_type = "Deals %s damage\n"
   item_stats_proc_hold = "15%% chance to cast Hold on hit\n"
   item_stats_proc_blind = "15%% chance to cast Blind on hit\n"
   item_stats_proc_bonk = "8%% chance to cast Bonk on hit\n"
   item_stats_proc_purge = "15%% chance to cast Purge on hit\n"
   item_stats_proc_corrode = "30%% chance to corrode on hit\n"
   item_stats_proc_twister = "8%% chance to disorient victim on hit\n"
   item_stats_proc_vamp = "10%% chance to gain up to 8 health on hit\n"
   item_stats_leadership_add = "%i Leadership bonus\n"
   item_stats_might_add = "%i Might bonus\n"
   item_stats_intellect_add = "%i Intellect bonus\n"
   item_stats_stamina_add = "%i Stamina bonus\n"
   item_stats_agility_add = "%i Agility bonus\n"
   item_stats_mysticism_add = "%i Mysticism bonus\n"
   item_stats_aim_add = "%i Aim bonus\n"
   item_stats_health_add = "%i max health\n"
   item_stats_mana_add = "%i max mana\n"
   item_stats_vigor_add = "%i max vigor\n"
   item_stats_empowerment_add = "%i%% %s\n"
   item_stats_slayer_add = "%i%% %s\n"
   item_stats_hex_inc_effect_add = "%i%% increased hex effectiveness\n"
   item_stats_hex_resistance_add = "%i%% hex resistance\n"
   item_stats_minion_attack_speed = "%i%% increased minion attack speed\n"
   item_thrust_rend_mod = "\n%i%% thrust resistance rending\n"
   item_pierce_rend_mod = "\n%i%% pierce resistance rending\n"
   item_slash_rend_mod = "\n%i%% slash resistance rending\n"
   item_bludgeon_rend_mod = "\n%i%% bludgeon resistance rending\n"
   item_fire_rend_mod = "\n%i%% fire resistance rending\n"
   item_cold_rend_mod = "\n%i%% cold resistance rending\n"
   item_shock_rend_mod = "\n%i%% shock resistance rending\n"
   item_acid_rend_mod = "\n%i%% acid resistance rending\n"
   item_holy_rend_mod = "\n%i%% holy resistance rending\n"
   item_unholy_rend_mod = "\n%i%% unholy resistance rending\n"
   item_illusion_rend_mod = "\n%i%% illusion resistance rending\n"
   item_weapon_rend_mod = "\n%i%% weapon resistance rending\n"
   item_magic_rend_mod = "\n%i%% magic resistance rending\n"
   enchanted_gear_indestructible = "\nThis enchanted %s is indestructible."
   enchanted_gear_plural_indestructible = "\nThese enchanted %s are indestructible."
   
   indestructible_mod = "\nMark of Indestructibility"

   weapon_thrust_rend_mod = "\n%i%% thrust resistance rending"
   weapon_pierce_rend_mod = "\n%i%% pierce resistance rending"
   weapon_slash_rend_mod = "\n%i%% slash resistance rending"
   weapon_bludgeon_rend_mod = "\n%i%% bludgeon resistance rending"
   weapon_fire_rend_mod = "\n%i%% fire resistance rending"
   weapon_cold_rend_mod = "\n%i%% cold resistance rending"
   weapon_shock_rend_mod = "\n%i%% shock resistance rending"
   weapon_acid_rend_mod = "\n%i%% acid resistance rending"
   weapon_holy_rend_mod = "\n%i%% holy resistance rending"
   weapon_unholy_rend_mod = "\n%i%% unholy resistance rending"
   weapon_illusion_rend_mod = "\n%i%% illusion resistance rending"
   weapon_weapon_rend_mod = "\n%i%% weapon resistance rending"
   weapon_magic_rend_mod = "\n%i%% magic resistance rending"
   magical_slayer_mod = "\n%i%% increased damage to magical creatures"
   air_slayer_mod = "\n%i%% increased damage to air creatures"
   kriipa_slayer_mod = "\n%i%% increased damage to kriipas"
   unholy_slayer_mod = "\n%i%% increased damage to unholy creatures"
   zombie_slayer_mod = "\n%i%% increased damage to zombies"
   skeleton_slayer_mod = "\n%i%% increased damage to skeletons"
   insect_slayer_mod = "\n%i%% increased damage to insects"
   minion_attack_speed_mod = "\n+%i%% minion attack speed"
   leadership_mod = "\n+%i Leadership"
   weapon_agility_mod = "\n+%i Agility"
   weapon_might_mod = "\n+%i Might"
   weapon_aim_mod = "\n+%i Aim"
   caster_int_mod_desc = "\n+%i Intellect"
   caster_myst_mod_desc = "\n+%i Mysticism"
   caster_stam_mod_desc = "\n+%i Stamina"
   health_mod_desc = "\n+%i Health"
   mana_mod_desc = "\n+%i Mana"
   vigor_mod_desc = "\n+%i Vigor"
   offense_mod_desc = "\n+%i offense rating"
   ranged_offense_mod_desc = "\n+%i ranged offense rating"
   melee_weapon_damage_mod_desc = "\n+%i melee weapon base damage"
   fire_resist_mod_desc = "\n+%i\% fire resistance"
   cold_resist_mod_desc = "\n+%i\% cold resistance"
   acid_resist_mod_desc = "\n+%i\% acid resistance"
   shock_resist_mod_desc = "\n+%i\% shock resistance"
   holy_resist_mod_desc = "\n+%i\% holy resistance"
   unholy_resist_mod_desc = "\n+%i\% unholy resistance"
   quake_resist_mod_desc = "\n+%i\% quake resistance"
   slash_resist_mod_desc = "\n+%i\% slash resistance"
   thrust_resist_mod_desc = "\n+%i\% thrust resistance"
   pierce_resist_mod_desc = "\n+%i\% pierce resistance"
   bludgeon_resist_mod_desc = "\n+%i\% bludgeon resistance"
   armor_mod_desc = "\n+%i\% weapon resistance"
   defense_mod_desc = "\n+%i defense rating"
   fire_empowerment_mod_desc = "\n+%i\% fire damage"
   cold_empowerment_mod_desc = "\n+%i\% cold damage"
   shock_empowerment_mod_desc = "\n+%i\% shock damage"
   acid_empowerment_mod_desc = "\n+%i\% acid damage"
   holy_empowerment_mod_desc = "\n+%i\% holy damage"
   unholy_empowerment_mod_desc = "\n+%i\% unholy damage"
   pierce_empowerment_mod_desc = "\n+%i\% pierce damage"
   thrust_empowerment_mod_desc = "\n+%i\% thrust damage"
   slash_empowerment_mod_desc = "\n+%i\% slash damage"
   bludgeon_empowerment_mod_desc = "\n+%i\% bludgeon damage"
   punch_empowerment_mod_desc = "\n+%i\% punch damage"
   weapon_empowerment_mod_desc = "\n+%i\% weapon damage"
   magic_empowerment_mod_desc = "\n+%i\% magic damage"
   illusion_empowerment_mod_desc = "\n+%i\% illusion damage"
   charm_empowerment_mod_desc = "\n+%i\% charm damage"
   mob_fire_damage_desc = "\n+%i%% monster damage as fire"
   mob_cold_damage_desc = "\n+%i%% monster damage as cold"
   mob_shock_damage_desc = "\n+%i%% monster damage as shock"
   mob_attack_speed_desc = "\n+%i%% monster attack speed"
   mob_move_speed_desc = "\n+%i%% monster move speed"
   mob_health_mod_desc = "\nMonsters have +%i%% health"
   mob_resists_mod_desc = "\nMonsters have +%i%% resistances"
 
   enchantment_mods_attribute_rsc = \
      "\n\nThis %s has %i %s."
   enchantment_mods_sing = "enchantment"
   enchantment_mods_plur = "enchantments"

   item_level_master = \
      "\n\nIt has an item level of %i."
   item_level_gauntlets = \
      "\n\nThey have an item level of %i."
   shard_applying = \
      "The %s acquires a magical bonus of %i %s!"
   shard_armor_mod_percentage = \
      "The %s acquires a magical bonus of %i weapon resistance!"

   item_out_of_ladder = \
      "That item is outside of your ladder competition."
   item_in_ladder_desc = \
      "This item is part of the ladder competition."

   not_enough_leadership_to_remove = \
      "You can't remove %s%s! You would be short %i Leadership due to your current minions!"

classvars:

   vrItem_broken = item_broken_battle

   vrPoss_article = item_this
   viUse_type = ITEM_CANT_USE
   viItem_type = ITEMTYPE_MISC

   viUse_amount = 1

   viHits_init_min = 1
   viHits_init_max = 1

   viBulk = 10
   viWeight = 10

   viValue_average = 10

   viGround_group = 1
   viInventory_group = 1
   viBroken_group = $    % if set to nil, no group exists

   % How much this item will help or hinder spell usage.
   viSpell_modifier = 0

   vrIcon_male       = $
   vrIcon_female     = $
   vrLeftArm_male    = $
   vrLeftArm_female  = $
   vrRightArm_male   = $
   vrRightArm_female = $
   vrLegs_male       = $
   vrLegs_female     = $

   vbShow_condition =  FALSE
   vrCondition_exc =   item_condition_exc
   vrCondition_exc_mended = item_condition_exc_mended
   vrCondition_good =  item_condition_good
   vrCondition_med =   item_condition_med
   vrCondition_poor =  item_condition_poor
   vrCondition_broken = item_condition_broken
   
   % Items may have a different appearance once revealed. Values are zero if not applicable.
   viUnrevealedColor = 0
   viRevealedColor = 0
   
   vbUniqueItem = FALSE
   
   viLeadershipBonus = 0
   
   viMinionAttackSpeedBonus = 0

properties:

   viObject_flags = OF_GETTABLE
   piHits_init = 0
   piHits = 0
      
   plItem_attributes = $

   piItem_flags = 0

   % List of enchantments applied by radius spells.
   % Each element is [song object, spellpower, caster]
   % Support for players, monsters, and items
   plRadiusEnchantments = $

   % Traditional magic mods
   plEnchantmentMods = $
   
   % item level for magic mods and other effects
   % depends on the mob that dropped it
   piItemLevel = 20
   
   % What ladder are we a part of?
   % Base game is 0
   % Challenge ladders will typically be 1
   piLadderID = 0
   
   % Was this item used in the forge?
   pbForgedItem = FALSE

messages:

   Constructor(corpse=$,level=20, ladderID=0, mob=$)
   {
      local iHits_average, oItemAtt;

      piHits_init = Random(viHits_init_min,viHits_init_max);
      piHits = piHits_init;
      if corpse <> $
         AND IsClass(corpse,&DeadBody)
      {
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=IA_CORPSEPOINTER);
         if Send(oItemAtt,@ReqAddToItem,#oItem=self)
         {
            Send(oItemAtt,@AddToItem,#oItem=self,#state1=corpse);
         }            
      }
      
      if viUnrevealedColor <> 0
         AND Send(self,@GetPaletteTranslation) = 0
      {
         Send(self,@SetPaletteTranslation,#translation=viUnrevealedColor);
      }

      piItemLevel = level;
      if ladderID <> $
      {
         piLadderID = ladderID;
      }
      
      Post(self,@RollLootMods,#oMonster=mob);

      propagate;
   }

   SetItemPlayerFlag(who=$)
   {
      return;
   }

   AppendStatsDesc()
   "This is the statistics for the weapon, such as damage, armor, "
   "resists and spellpower added."
   {
      local i, bFoundProperties, iHigh_level, n, iFarenPower, iRiijaPower,
            iKraananPower, iJalaPower, iShalPower, iQorPower, iInstrumentPower,
            iNum, bID, iMinDamage, iMinDamageOwner, iAttackType,
            iMightChange, iIntellectChange, iStaminaChange, iAgilityChange,
            iMysticismChange, iAimChange, iHealthChange, iManaChange, iVigorChange,
            iLeadershipChange;

      % This message 'telescopes' resources into the 5th %r of
      % item_desc_template. There are 18 different stats we can add;
      % when we first add a stat to be displayed we add a template with
      % the correct number of %r formatters to match the number of stats
      % remaining (plus one for the special_properties_header). If a stat
      % is missing after we have already added the headers, add a blank
      % resource ("") in its place. If new stats are added to this message,
      % the system_rsc_template_<number> resources should be updated
      % accordingly.

      % bFoundProperties is TRUE if we've already added a property. Use this
      % to lower the amount of resources we send to only those necessary.
      bFoundProperties = FALSE;

      if Send(self,@GetMinionAttackSpeedMultiplier) <> 0
      {
         AddPacket(4,system_rsc_template_24, 4,special_properties_header,
                   4,item_stats_minion_attack_speed, 4,Send(self,@GetMinionAttackSpeedMultiplier));
         bFoundProperties = TRUE;
      }

      if Nth(Send(self,@GetRend),2) <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_23, 4,special_properties_header);
            bFoundProperties = TRUE;
         }

         switch(Nth(Send(self,@GetRend),1))
         {
            case ATCK_WEAP_THRUST:
               AddPacket(4,item_thrust_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case ATCK_WEAP_SLASH:
               AddPacket(4,item_slash_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case ATCK_WEAP_PIERCE:
               AddPacket(4,item_pierce_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case ATCK_WEAP_BLUDGEON:
               AddPacket(4,item_bludgeon_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case ATCK_WEAP_ALL:
               AddPacket(4,item_weapon_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_FIRE:
               AddPacket(4,item_fire_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_COLD:
               AddPacket(4,item_cold_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_SHOCK:
               AddPacket(4,item_shock_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_ACID:
               AddPacket(4,item_acid_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_HOLY:
               AddPacket(4,item_holy_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_UNHOLY:
               AddPacket(4,item_unholy_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_ILLUSION:
               AddPacket(4,item_illusion_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
            case -ATCK_SPELL_ALL:
               AddPacket(4,item_magic_rend_mod, 4,Nth(Send(self,@GetRend),2));
               break;
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetCurrentSlayers) <> $
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_22, 4,special_properties_header);
            bFoundProperties = TRUE;
         }

         if Length(Send(self,@GetCurrentSlayers)) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                           #iNum=Length(Send(self,@GetCurrentSlayers))));
         }

         foreach i in Send(self,@GetCurrentSlayers)
         {
            AddPacket(4,item_stats_slayer_add, 4,Nth(i,2),
                      4,Send(SYS,@GetSlayerName,#type=Nth(i,1)));
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetRange) <> 0
      {
         if bFoundProperties
         {
            AddPacket(4,item_stats_range, 4,Send(self,@GetRange)/FINENESS);
         }
         else
         {
            AddPacket(4,system_rsc_template_21, 4,special_properties_header,
                      4,item_stats_range, 4,Send(self,@GetRange)/FINENESS);
            bFoundProperties = TRUE;
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetHitBonus) <> 0
      {
         if IsClass(self,&RangedWeapon)
         {
            if bFoundProperties
            {
               % bFoundProperties TRUE, already added headers.
               AddPacket(4,item_stats_ranged_offense, 4,Send(self,@GetHitBonus));
            }
            else
            {
               % bFoundProperties FALSE, add headers.
               AddPacket(4,system_rsc_template_20, 4,special_properties_header,
                         4,item_stats_ranged_offense, 4,Send(self,@GetHitBonus));
               bFoundProperties = TRUE;
            }
         }
         else
         {
            if bFoundProperties
            {
               % bFoundProperties TRUE, already added headers.
               AddPacket(4,item_stats_offense, 4,Send(self,@GetHitBonus));
            }
            else
            {
               % bFoundProperties FALSE, add headers.
               AddPacket(4,system_rsc_template_20, 4,special_properties_header,
                         4,item_stats_offense, 4,Send(self,@GetHitBonus));
               bFoundProperties = TRUE;
            }
         }
      }
      else if bFoundProperties
      {
         % bFoundProperties TRUE and didn't add this particular stat,
         % so add a blank resource in its place.
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetDamageReduction) <> 0
      {
         if bFoundProperties
         {
            AddPacket(4,item_stats_armor, 4,Send(self,@GetDamageReduction));
         }
         else
         {
            AddPacket(4,system_rsc_template_19, 4,special_properties_header,
                      4,item_stats_armor, 4,Send(self,@GetDamageReduction));
            bFoundProperties = TRUE;
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetDefenseBonus) <> 0
      {
         if bFoundProperties
         {
            AddPacket(4,item_stats_defense, 4,Send(self,@GetDefenseBonus));
         }
         else
         {
            AddPacket(4,system_rsc_template_18,4,special_properties_header,
                      4,item_stats_defense, 4,Send(self,@GetDefenseBonus));
            bFoundProperties = TRUE;
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetMeleeDamageBonus) <> 0
      {
         if bFoundProperties
         {
            AddPacket(4,item_stats_melee, 4,Send(self,@GetMeleeDamageBonus));
         }
         else
         {
            AddPacket(4,system_rsc_template_17, 4,special_properties_header,
                      4,item_stats_melee, 4,Send(self,@GetMeleeDamageBonus));
            bFoundProperties = TRUE;
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      iMinDamage = Send(self,@GetMinDamage);
      if iMinDamage <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_16, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         if Send(self,@GetMaxDamage) <> iMinDamage
         {
            AddPacket(4,item_stats_base_dmg,4,item_stats_min_dmg,
                      4,iMinDamage,4,Send(self,@GetMaxDamage));
         }
         else
         {
            AddPacket(4,item_stats_base_dmg,4,system_blank_resource,
                      4,iMinDamage);
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      iMinDamageOwner = Send(self,@GetMinDamageWithOwnerStats);
      if iMinDamageOwner <> 0
         AND iMinDamageOwner <> iMinDamage
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_15, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         if Send(self,@GetMaxDamageWithOwnerStats)
            <> iMinDamageOwner
         {
            AddPacket(4,item_stats_owner_dmg, 4,item_stats_min_dmg,
                      4,iMinDamageOwner,4,Send(self,@GetMaxDamageWithOwnerStats));
         }
         else
         {
            AddPacket(4,item_stats_owner_dmg, 4,system_blank_resource,
                      4,iMinDamageOwner);
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetMinSpecialDamage) <> 0
         AND Send(self,@GetMinSpecialDamage) <> iMinDamage
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_14, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         if Send(self,@GetMaxSpecialDamage) <> Send(self,@GetMinSpecialDamage)
         {
            AddPacket(4,item_stats_cond_dmg, 4,item_stats_min_dmg,
                      4,Send(self,@GetMinSpecialDamage),
                      4,Send(self,@GetMaxSpecialDamage));
         }
         else
         {
            AddPacket(4,item_stats_cond_dmg, 4,system_blank_resource,
                      4,Send(self,@GetMinSpecialDamage));
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetMinSpecialDamageWithOwnerStats) <> 0
         AND Send(self,@GetMinSpecialDamageWithOwnerStats)
            <> Send(self,@GetMinSpecialDamage)
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_13, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         if Send(self,@GetMaxSpecialDamageWithOwnerStats)
            <> Send(self,@GetMinSpecialDamageWithOwnerStats)
         {
            AddPacket(4,item_stats_cond_owner_dmg, 4,item_stats_min_dmg,
                      4,Send(self,@GetMinSpecialDamageWithOwnerStats),
                      4,Send(self,@GetMaxSpecialDamageWithOwnerStats));
         }
         else
         {
            AddPacket(4,item_stats_cond_owner_dmg,4,system_blank_resource,
                      4,Send(self,@GetMinSpecialDamageWithOwnerStats));
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetDamageBonus) <> 0
      {
         if bFoundProperties
         {
            AddPacket(4,item_stats_dmg_bonus, 4,Send(self,@GetDamageBonus));
         }
         else
         {
            AddPacket(4,system_rsc_template_12, 4,special_properties_header,
                      4,item_stats_dmg_bonus, 4,Send(self,@GetDamageBonus));
            bFoundProperties = TRUE;
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      iFarenPower = Send(self,@GetSpellModifier,
                        #oSpell=Send(SYS,@FindSpellByNum,#num=SID_LIGHT));
      iRiijaPower = Send(self,@GetSpellModifier,
                        #oSpell=Send(SYS,@FindSpellByNum,#num=SID_BLINK));
      iKraananPower = Send(self,@GetSpellModifier,
                           #oSpell=Send(SYS,@FindSpellByNum,#num=SID_BLESS));
      iJalaPower = Send(self,@GetSpellModifier,
                        #oSpell=Send(SYS,@FindSpellByNum,#num=SID_MIRTH));
      iShalPower = Send(self,@GetSpellModifier,
                        #oSpell=Send(SYS,@FindSpellByNum,#num=SID_SEANCE));
      iQorPower = Send(self,@GetSpellModifier,
                        #oSpell=Send(SYS,@FindSpellByNum,#num=SID_DARKNESS));

      iInstrumentPower = 0;
      if IsClass(self,&Instrument)
      {
         iInstrumentPower = Send(self,@GetInstrumentLevel);
      }

      if iFarenPower <> 0
         OR iRiijaPower <> 0
         OR iKraananPower <> 0
         OR iJalaPower <> 0
         OR iShalPower <> 0
         OR iQorPower <> 0
         OR iInstrumentPower <> 0
      {
         if iFarenPower = iRiijaPower
            AND iRiijaPower = iKraananPower
            AND iKraananPower = iJalaPower
            AND iJalaPower = iShalPower
            AND iShalPower = iQorPower
            AND iFarenPower <> 0
         {
            if NOT bFoundProperties
            {
               AddPacket(4,system_rsc_template_11, 4,special_properties_header);
               bFoundProperties = TRUE;
            }
            AddPacket(4,item_stats_gen_sp, 4,iFarenPower);
         }
         else
         {
            if NOT bFoundProperties
            {
               AddPacket(4,system_rsc_template_11, 4,special_properties_header);
               bFoundProperties = TRUE;
            }

            AddPacket(4,system_rsc_template_7);

            if iFarenPower <> 0
            {
               AddPacket(4,item_stats_faren_sp, 4,iFarenPower);
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
            if iRiijaPower <> 0
            {
               AddPacket(4,item_stats_riija_sp, 4,iRiijaPower);
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
            if iKraananPower <> 0
            {
               AddPacket(4,item_stats_kran_sp, 4,iKraananPower);
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
            if iJalaPower <> 0
            {
               AddPacket(4,item_stats_jala_sp, 4,iJalaPower);
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
            if iShalPower <> 0
            {
               AddPacket(4,item_stats_shal_sp, 4,iShalPower);
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
            if iQorPower <> 0
            {
               AddPacket(4,item_stats_qor_sp, 4,iQorPower);
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
            if iInstrumentPower <> 0
            {
               AddPacket(4,item_stats_jala_instrument_sp, 4,iInstrumentPower);
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetCurrentResistances) <> $
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_10, 4,special_properties_header);
            bFoundProperties = TRUE;
         }

         if Length(Send(self,@GetCurrentResistances)) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                           #iNum=Length(Send(self,@GetCurrentResistances))));
         }

         foreach i in Send(self,@GetCurrentResistances)
         {
            AddPacket(4,item_stats_resistance, 4,Nth(i,2),
                      4,Send(SYS,@GetResistanceName,#type=Nth(i,1)));
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      iAttackType = Send(self,@GetAttackType);
      if iAttackType <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_9, 4,special_properties_header);
            bFoundProperties = TRUE;
         }

         if Length(Send(SYS,@GetAttackTypeList)) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                           #iNum=Length(Send(SYS,@GetAttackTypeList))));
         }

         foreach i in Send(SYS,@GetAttackTypeList)
         {
            if (iAttackType & i)
            {
               AddPacket(4,item_stats_dmg_type,
                         4,Send(SYS,@GetAttackDamageTypeName,#type=i));
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      iAttackType = Send(self,@GetAttackSpell);
      if iAttackType <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_8, 4,special_properties_header);
            bFoundProperties = TRUE;
         }

         if Length(Send(SYS,@GetSpellTypeList)) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                        #iNum=Length(Send(SYS,@GetSpellTypeList))));
         }

         foreach i in Send(SYS,@GetSpellTypeList)
         {
            if (iAttackType & i)
            {
               AddPacket(4,item_stats_dmg_type,
                         4,Send(SYS,@GetSpellDamageTypeName,#type=i));
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if plItem_attributes <> $
      {
         if Length(plItem_attributes) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                           #iNum=Length(plItem_attributes)));
         }

         % TODO: Item attributes should handle this.
         foreach i in plItem_attributes
         {
            iNum = Send(self,@GetNumFromCompound,#compound=First(i));
            bID = Send(self,@GetIDStatusFromCompound,#compound=First(i));
            if bID
            {
               if iNum = WA_PARALYZER
               {
                  if NOT bFoundProperties
                  {
                     AddPacket(4,system_rsc_template_7,
                               4,special_properties_header);
                     bFoundProperties = TRUE;
                  }
                  AddPacket(4,item_stats_proc_hold);
               }
               else if iNum = WA_BLINDER
               {
                  if NOT bFoundProperties
                  {
                     AddPacket(4,system_rsc_template_7,
                               4,special_properties_header);
                     bFoundProperties = TRUE;
                  }
                  AddPacket(4,item_stats_proc_blind);
               }
               else if iNum = WA_BONKER
               {
                  if NOT bFoundProperties
                  {
                     AddPacket(4,system_rsc_template_7,
                               4,special_properties_header);
                     bFoundProperties = TRUE;
                  }
                  AddPacket(4,item_stats_proc_bonk);
               }
               else if iNum = WA_PURGER
               {
                  if NOT bFoundProperties
                  {
                     AddPacket(4,system_rsc_template_7,
                               4,special_properties_header);
                     bFoundProperties = TRUE;
                  }
                  AddPacket(4,item_stats_proc_purge);
               }
               else if iNum = WA_CORRODE
               {
                  if NOT bFoundProperties
                  {
                     AddPacket(4,system_rsc_template_7,
                               4,special_properties_header);
                     bFoundProperties = TRUE;
                  }
                  AddPacket(4,item_stats_proc_corrode);
               }
               else if iNum = WA_TWISTER
               {
                  if NOT bFoundProperties
                  {
                     AddPacket(4,system_rsc_template_7,
                               4,special_properties_header);
                     bFoundProperties = TRUE;
                  }
                  AddPacket(4,item_stats_proc_twister);
               }
               else if iNum = WA_VAMPER
               {
                  if NOT bFoundProperties
                  {
                     AddPacket(4,system_rsc_template_7,
                               4,special_properties_header);
                     bFoundProperties = TRUE;
                  }
                  AddPacket(4,item_stats_proc_vamp);
               }
               else
               {
                  AddPacket(4,system_blank_resource);
               }
            }
            else
            {
               AddPacket(4,system_blank_resource);
            }
         }
      }
      else
      {
         AddPacket(4,system_blank_resource);
      }

      iMightChange = Send(self,@GetMightChange);
      iIntellectChange = Send(self,@GetIntellectChange);
      iStaminaChange = Send(self,@GetStaminaChange);
      iAgilityChange = Send(self,@GetAgilityChange);
      iMysticismChange = Send(self,@GetMysticismChange);
      iAimChange = Send(self,@GetAimChange);
      iLeadershipChange = Send(self,@GetLeadershipBonus);

      if iMightChange <> 0
         OR iIntellectChange <> 0
         OR iStaminaChange <> 0
         OR iAgilityChange <> 0
         OR iMysticismChange <> 0
         OR iAimChange <> 0
         OR iLeadershipChange <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_7, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         AddPacket(4,system_rsc_template_7);
         
         if iMightChange <> 0
         {
            AddPacket(4,item_stats_might_add, 4,iMightChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iIntellectChange <> 0
         {
            AddPacket(4,item_stats_intellect_add, 4,iIntellectChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iStaminaChange <> 0
         {
            AddPacket(4,item_stats_stamina_add, 4,iStaminaChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iAgilityChange <> 0
         {
            AddPacket(4,item_stats_agility_add, 4,iAgilityChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iMysticismChange <> 0
         {
            AddPacket(4,item_stats_mysticism_add, 4,iMysticismChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iAimChange <> 0
         {
            AddPacket(4,item_stats_aim_add, 4,iAimChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iLeadershipChange <> 0
         {
            AddPacket(4,item_stats_leadership_add, 4,iLeadershipChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
      }
      else
      {
         AddPacket(4,system_blank_resource);
      }
      
      iHealthChange = Send(self,@GetHealthChange);
      iManaChange = Send(self,@GetManaChange);
      iVigorChange = Send(self,@GetVigorChange);
      
      if iHealthChange <> 0
         OR iManaChange <> 0
         OR iVigorChange <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_5, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         AddPacket(4,system_rsc_template_3);
         
         if iHealthChange <> 0
         {
            AddPacket(4,item_stats_health_add, 4,iHealthChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iManaChange <> 0
         {
            AddPacket(4,item_stats_mana_add, 4,iManaChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
         
         if iVigorChange <> 0
         {
            AddPacket(4,item_stats_vigor_add, 4,iVigorChange);
         }
         else
         {
            AddPacket(4,system_blank_resource);
         }
      }
      else
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetCurrentEmpowerments) <> $
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_4, 4,special_properties_header);
            bFoundProperties = TRUE;
         }

         if Length(Send(self,@GetCurrentEmpowerments)) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                           #iNum=Length(Send(self,@GetCurrentEmpowerments))));
         }

         foreach i in Send(self,@GetCurrentEmpowerments)
         {
            AddPacket(4,item_stats_empowerment_add, 4,Nth(i,2),
                      4,Send(SYS,@GetEmpowermentName,#type=Nth(i,1)));
         }
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetHexIncEffect) <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_3, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         
         AddPacket(4,item_stats_hex_inc_effect_add, 4,Send(self,@GetHexIncEffect));
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      if Send(self,@GetHexResistance) <> 0
      {
         if NOT bFoundProperties
         {
            AddPacket(4,system_rsc_template_2, 4,special_properties_header);
            bFoundProperties = TRUE;
         }
         
         AddPacket(4,item_stats_hex_resistance_add, 4,Send(self,@GetHexResistance));
      }
      else if bFoundProperties
      {
         AddPacket(4,system_blank_resource);
      }

      return;
   }

   GetBaseMightChange()
   {
      return 0;
   }

   GetMightChange()
   {
      local i, iSum;

      iSum = 0;
      foreach i in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(i,1)) = GROUP_MIGHT
         {
            iSum = iSum + Nth(i,2);
         }
      }
      
      return iSum + Send(self,@GetBaseMightChange);
   }

   GetBaseIntellectChange()
   {
      return 0;
   }

   GetIntellectChange()
   {
      local i, iSum;

      iSum = 0;
      foreach i in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(i,1)) = GROUP_INTELLECT
         {
            iSum = iSum + Nth(i,2);
         }
      }
      
      return iSum + Send(self,@GetBaseIntellectChange);
   }

   GetBaseStaminaChange()
   {
      return 0;
   }

   GetStaminaChange()
   {
      local i, iSum;

      iSum = 0;
      foreach i in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(i,1)) = GROUP_STAMINA
         {
            iSum = iSum + Nth(i,2);
         }
      }
      
      return iSum + Send(self,@GetBaseStaminaChange);
   }

   GetBaseAgilityChange()
   {
      return 0;
   }

   GetAgilityChange()
   {
      local i, iSum;

      iSum = 0;
      foreach i in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(i,1)) = GROUP_AGILITY
         {
            iSum = iSum + Nth(i,2);
         }
      }
      
      return iSum + Send(self,@GetBaseAgilityChange);
   }

   GetBaseMysticismChange()
   {
      return 0;
   }

   GetMysticismChange()
   {
      local i, iSum;

      iSum = 0;
      foreach i in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(i,1)) = GROUP_MYSTICISM
         {
            iSum = iSum + Nth(i,2);
         }
      }
      
      return iSum + Send(self,@GetBaseMysticismChange);
   }

   GetBaseAimChange()
   {
      return 0;
   }

   GetAimChange()
   {
      local i, iSum;

      iSum = 0;
      foreach i in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(i,1)) = GROUP_AIM
         {
            iSum = iSum + Nth(i,2);
         }
      }
      
      return iSum + Send(self,@GetBaseAimChange);
   }

   GetMinDamageWithOwnerStats()
   {
      return 0;
   }

   GetMaxDamageWithOwnerStats()
   {
      return 0;
   }

   GetMinSpecialDamageWithOwnerStats()
   {
      return 0;
   }

   GetMaxSpecialDamageWithOwnerStats()
   {
      return 0;
   }

   GetAttackType()
   {
      return 0;
   }

   GetAttackSpell()
   {
      return 0;
   }

   GetMinDamage()
   {
      return 0;
   }

   GetMaxDamage()
   {
      return 0;
   }

   % Some weapons and spells have special conditions, like nerudite arrows that can shatter
   GetMinSpecialDamage()
   {
      return 0;
   }

   GetMaxSpecialDamage()
   {
      return 0;
   }

   GetRange()
   {
      return 0;
   }

   GetHitBonus()
   {
      return 0;
   }

   GetDefenseBonus()
   {
      return 0;
   }

   GetEmpowermentModifiers()
   {
      return $;
   }
   
   GetSlayerModifiers()
   {
      return $;
   }

   GetMeleeDamageBonus()
   {
      return 0;
   }

   GetDamageBonus()
   {
      return 0;
   }

   GetDamageReduction()
   {
      return 0;
   }

   GetAttributes()
   {
      return plItem_Attributes;
   }

   GetResistanceModifiers()
   {
      return $;
   }

   DoBaseDesc()
   "Items can override this to provide a more detailed base description."
   {
      AddPacket(4,vrDesc);

      return;
   }

   ShowDesc(bShowAll = FALSE)
   {
      local bAlreadyBlind, bIdentified, oItemAtt, i, iNum;

      bAlreadyBlind = FALSE;

      AddPacket(4,item_desc_template);

      Send(self,@DoBaseDesc);

      if Send(self,@HasAttribute,#ItemAtt=IA_MISDIRECTION)
         AND NOT bShowAll
      {
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=IA_MISDIRECTION);
         Send(oItemAtt,@AppendMisdirectedDesc,#oItem=self,
               #lData=Send(self,@GetAttributeData,#ItemAtt=IA_MISDIRECTION));
      }
      else if plItem_Attributes <> $
      {
         % Support for displaying up to 12 itematts.
         if Length(plItem_Attributes) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                              #iNum=Length(plItem_Attributes)));
         }

         foreach i in plItem_Attributes
         {
            iNum = Send(self,@GetNumFromCompound,#compound=First(i));
            oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
            bIdentified = Send(self,@GetIDStatusFromCompound,
                              #compound=First(i));

            if NOT (bIdentified OR bShowAll)
            {
               if bAlreadyBlind
               {
                  AddPacket(4,system_blank_resource);
               }
               else
               {
                  AddPacket(4,itematt_generic);
                  bAlreadyBlind = TRUE;
               }
            }
            else
            {
               Send(oItemAtt,@AppendDesc,#oItem=self,#lData=i);
            }
         }
      }
      else
      {
         AddPacket(4,system_blank_resource);
      }

      if plObject_attributes = $
      {
         AddPacket(4,system_blank_resource);
      }
      else
      {
         % Support for displaying up to 12 objectatts.
         if Length(plObject_attributes) > 1
         {
            AddPacket(4,Send(SYS,@AddResourceTemplate,
                              #iNum=Length(plObject_attributes)));
         }

         foreach i in plObject_attributes
         {
            Send(i,@AttributeDesc);
         }
      }
      
      if plEnchantmentMods = $
      {
         AddPacket(4,system_blank_resource);
      }
      else
      {
         % Support for displaying up to 6 magic mods.
         
         AddPacket(4,Send(SYS,@AddResourceTemplate,#iNum=Length(plEnchantmentMods)+1));
         Send(self,@EnchantmentModsDesc,#lEnchantmentMods=plEnchantmentMods);
      }

      % Special things for number items, etc.
      Send(self,@AppendDesc);
      Send(self,@AppendStatsDesc);
      Send(self,@AppendItemCondition);
      Send(self,@AppendItemLevel);

      return;
   }

   AppendDesc()
   {
      AddPacket(4,system_blank_resource);

      return;
   }

   AppendItemCondition()
   {
      local iHit_Percent, rItem_condition;

      if NOT IsClass(self,&Ring)
         AND plEnchantmentMods <> $
         AND (NOT Send(SETTINGS_OBJECT,@GetLoseDurabilityMagicMods)
            OR Send(self,@HasMagicModOfClass,#class=&IndestructibleMod))
      {
         if Send(self,@IsPlural)
         {
            AddPacket(4,enchanted_gear_plural_indestructible,4,Send(self,@GetName));
         }
         else
         {
            AddPacket(4,enchanted_gear_indestructible,4,Send(self,@GetName));
         }
         return;
      }

      if vbShow_Condition
         AND piHits_init > 0
      {
         rItem_condition = vrCondition_exc;
         iHit_Percent = (100 * piHits) / piHits_init;
         if iHit_Percent > 90
         {
            % If item is worse than what can be found in the wild, describe it
            %  as being "patched".
            if piHits_init >= viHits_init_min
            {
               rItem_condition = vrCondition_exc;
            }
            else
            {
               rItem_condition = vrCondition_exc_mended;
            }
         }
         else if iHit_Percent > 65
         {
            ritem_condition = vrCondition_good;
         }
         else if iHit_Percent > 30
         {
            ritem_condition = vrCondition_med;
         }
         else if piHits > 0
         {
            ritem_condition = vrCondition_poor;
         }
         else
         {
            ritem_condition = vrCondition_broken;
         }

         AddPacket(4,item_cond_master, 4,vrPoss_Article, 4,Send(self,@GetName),
                   4,rItem_condition,4,piHits,4,piHits_init);
      }
      else
      {
         AddPacket(4,system_blank_resource);
      }

      return;
   }

   AppendItemLevel()
   {
      if IsClass(self,&Weapon)
         OR IsClass(self,&DefenseModifier)
         OR IsClass(self,&Ring)
      {
         AddPacket(4,item_level_master, 4,piItemLevel);
      }
      else if IsClass(self,&Gauntlet)
         OR IsClass(self,&Glove)
      {
         AddPacket(4,item_level_gauntlets, 4,piItemLevel);
      }
      else
      {
         AddPacket(4,system_blank_resource);
      }

      return;
   }

   ReqRepair()
   {
      return FALSE;
   }

   DestroyDisposable()
   {
      if Send(self,@HasAttribute,#ItemAtt=IA_BONDED)
      {
         return FALSE;
      }
      
      Send(self,@Delete);
      
      return TRUE;
   }

   GetItemUseType()
   {
      if piHits <= 0
      {
         return ITEM_BROKEN;
      }
      
      return viUse_type;
   }

   GetItemUseAmount()
   {
      return viUse_amount;
   }

   GetInitValue()
   {
      return viValue_average;
   }

   GetValue()
   {
      local iPercent, iValue, iFinal, i, oItemAtt, iNum;

      % Okay, new way of figuring value, considering 
      % max_hits, current_max_hits, and hits.
      % The basic formula follows this curve:
      %
      %              Hits
      %             Y   .8Y   .6Y   .4Y   .2Y
      % Max_hits  -----------------------------            
      %    Y        X   .80X  .60X  .40X  .20X
      %   .8Y           .64X  .48X  .32X  .16X
      %   .6Y                 .36X  .24X  .12X
      %   .4Y                       .16X  .08X
      %   .2Y                             .04X
      %
      %    Y = viHits_init_max (max_hits before casting 'mend')
      %    X = viAverage_value
      %
      % Translated:  An item whose piInit_hits is 80% of viHits_init_max
      %              and whose piHits is equal to that amount has a value equal
      %              to 64% of its standard value.

      iPercent = (100*piHits_init*piHits)/(viHits_init_max*viHits_init_max);
      iValue = Send(self,@GetInitValue);
      
      iFinal = (iValue * iPercent)/100;
      iFinal = bound(iFinal,10,iValue);      
      
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         iFinal = Send(oItemAtt,@AdjustPrice,#value=iFinal,
                       #iCompound=First(i));
      }
      
      return iFinal;
   }

   GetMaxHits()
   {
      return piHits_init;
   }

   GetHits()
   {
      return piHits;
   }

   SetMaxHits(number = $)
   {
      if number = $
      {  
         return;
      }

      piHits_init = number;

      return;   
   }

   SetHits(number = $)
   {
      if number = $
      {
         return;
      }

      piHits = number;

      return;
   }

   NewOwner(what = $)
   {
      local lData;

      % If the person who is supposed to pick up an item picks up 
      %  the item, then remove the corpsepointer.
          
      if poOwner <> $ AND Send(self,@HasAttribute,#ItemAtt=IA_CORPSEPOINTER)
      {  
         Send(self,@RemoveAttribute,#ItemAtt=IA_CORPSEPOINTER);
      }      

      if poOwner <> $ AND Send(self,@HasAttribute,#ItemAtt=IA_BONDED)
      {
         lData = Send(self,@GetAttributeData,#ItemAtt=IA_BONDED);
         Send(Send(SYS,@FindSpellByNum,#num=SID_BOND),@BondedItemReport,
              #BondedItem=self,#BondedPlayer=Nth(lData,2),
              #BondedItemOwner=what);
      }      

      if what <> $ 
         AND (IsClass(what,&User)) 
         AND (Send(self,@IsCursed)) 
         AND (NOT Send(what,@PlayerIsImmortal))
      {
         Send(what,@MsgSendUser,#message_rsc=item_try_use_cursed_rsc);
         Post(what,@TryUseItem,#what=self);
      }
      
      if what <> $
         AND IsClass(what,&Player)
         AND Send(what,@GetLadderID) <> Send(self,@GetLadderID)
      {
         % Something has directly put an item in our inventory. Let's set our ladder id to owner.
         Send(self,@SetLadderID,#value=Send(what,@GetLadderID));
      }

      propagate;
   }

   ReqUseSomething(what = $)
   {
      return TRUE;
   }

   NewUsed()
   {
      local i, oMod;
      
      foreach i in plEnchantmentMods
      {
         oMod = Send(SYS,@GetMagicMod,#class=Nth(i,1));
         Send(oMod,@NewUsed,#who=poOwner,#iState=Nth(i,2));
      }
      
      if poOwner <> $
         AND IsClass(poOwner,&Player)
         AND Send(self,@GetLeadershipBonus) <> 0
      {
         Post(poOwner,@DrawLeadership);
      }
      
      Send(self,@DoPlayerArt);
      If IsClass(poOwner,&Player)
      {
         Post(poOwner,@RefreshPlayerVisualGear);
      }

      return;
   }

   UserLogoff()
   "Called when we're used by someone, and they logoff."
   {
      return;
   }

   UserLogon()
   "Called when we're used by someone, and they logon."
   {
      return;
   }

   ReqUse()
   "Called when the player tries to use the item"
   {
      local i, oItemAtt, iNum;
          
      %% check to be sure nothing in ItemAtts disallows this
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         if NOT Send(oItemAtt,@ItemReqUse,#oItem=self,#oPlayer=poOwner)
         {
            return FALSE;
         }
      }

      foreach i in plObject_attributes
      {
         if NOT Send(i,@ItemReqUse,#oItem=self,#oPlayer=poOwner)
         {
            return FALSE;
         }
      }
      return TRUE;
   }

   ReqUnuse()
   "Called when the player tries to unuse the item"
   {
      local i, oItemAtt, iNum;
          
      % Check to be sure nothing in ItemAtts disallows this
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         if NOT Send(oItemAtt,@ItemReqUnuse,#oItem=self,#oPlayer=poOwner)
         {
            return FALSE;
         }
      }
      
      % Check to make sure our leadership costs work
      if poOwner <> $
         AND IsClass(poOwner,&Player)
      {
         if Send(poOwner,@GetFreeLeadership) < Send(self,@GetLeadershipBonus)
         {
            if Send(poOwner,@IsLoggedOn)
            {
               Send(poOwner,@MsgSendUser,#message_rsc=not_enough_leadership_to_remove,
                                         #parm1=Send(self,@GetDef),
                                         #parm2=Send(self,@GetName),
                                         #parm3=Send(self,@GetLeadershipBonus)-Send(poOwner,@GetFreeLeadership));
            }
            return FALSE;
         }
      }
      
      return TRUE;
   }

   NewUnused()
   {
      local i, oMod;
      
      foreach i in plEnchantmentMods
      {
         oMod = Send(SYS,@GetMagicMod,#class=Nth(i,1));
         Send(oMod,@NewUnused,#who=poOwner,#iState=Nth(i,2));
      }
      
      if poOwner <> $
         AND IsClass(poOwner,&Player)
         AND Send(self,@GetLeadershipBonus) <> 0
      {
         Post(poOwner,@DrawLeadership);
      }

      Send(self,@UndoPlayerArt);

      return;
   }

   ReqNewOwner(what=$)
   {
      if what <> $
         AND poOwner <> $
         AND IsClass(what,&Player)
      {
         if Send(what,@GetLadderID) <> Send(self,@GetLadderID)
            AND NOT IsClass(poOwner,&SafetyDepositBox)
         {
            Send(what,@MsgSendUser,#message_rsc=item_out_of_ladder);
            return FALSE;
         }
      }
      return ((poOwner = $) OR Send(poOwner,@ReqLeaveHold,#what=self));
   }

   ReqLeaveOwner()
   {
      local i, oItemAtt, iNum;

      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         if NOT Send(oItemAtt,@ItemReqLeaveOwner,#oItem=self)
         {
            return FALSE;
         }
      }
      
      propagate;
   }

   ReqNewOwnerAttributes(who=$,type = 0)
   "This checks to see if there is anything that prevents a player from "
   "picking up an item due to that item's attributes alone.  Note: these "
   "attributes are responsible for providing error code."
   {
      local i, oItemAtt, iNum;

      % Type 0 is get
      % Type 1 is offer

      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         if NOT Send(oItemAtt,@CanGetAffectedItem,#who=who,#lData=i,
                     #oItem=self,#type=type)
         {
            return FALSE;
         }         
      }
      
      return TRUE;
   }
   
   SendAnimation()
   {
      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piItem_flags&ITEM_PALETTE_MASK);
      }

      if piHits > 0 OR viBroken_group = $
      {
         AddPacket(1,ANIMATE_NONE, 2,viGround_group);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,viBroken_group);
      }
      
      return;
   }

   SendLookAnimation()
   {
      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piItem_flags&ITEM_PALETTE_MASK);
      }

      if piHits > 0 OR viBroken_group = $
      {
         AddPacket(1,ANIMATE_NONE, 2,viInventory_group);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,viBroken_group);
      }
      
      return;
   }

   SendInventoryAnimation()
   {
      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piItem_flags&ITEM_PALETTE_MASK);
      }
      
      if piHits > 0 OR viBroken_group = $
      {
         AddPacket(1,ANIMATE_NONE, 2,viInventory_group);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,viBroken_group);
      }
      
      return;
   }

   SendInventoryOverlays()
   {
      AddPacket(1, 0);
      
      return;
   }

   SendOverlayInformation()
   {
      AddPacket(4,Send(self,@GetOverlay));
      AddPacket(1,Send(self,@GetOverlayHotspot));
      Send(self,@SendOverlayAnimation);
      
      return;
   }

   GetNumberOverlays()
   {
      % Most overlay items only offer one overlay.
      %  Some items like weapons and bows may offer two.
      return 1;
   }

   IsCursed()
   "This returns TRUE if a RemoveCurse spell should unuse the item."
   "Since an ItemAtt can curse an item, go through those to check."
   {
      local i, oItemAtt, iNum;
                
      % Check to be sure nothing in ItemAtts disallows this
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         if Send(oItemAtt,@ItemIsCursed,#oItem=self)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   ModifyDefensePower(defense_power = 0)
   "Gives the defensive bonus"
   {
      return defense_power;            
   }

   DefendingHit(who = $,what = $)
   {
      if plEnchantmentMods <> $
         AND NOT Send(SETTINGS_OBJECT,@GetLoseDurabilityMagicMods)
      {
         return;
      }

      % Set to 75% currently
      if random(1,100) < ARMOR_TAKE_DAMAGE_PCT   
      {
         if who <> $
            AND IsClass(who,&Player)
            AND Send(who,@HasSkill,#num=SKID_MAINTENANCE)
            AND Send(Send(SYS,@FindSkillByNum,#num=SKID_MAINTENANCE),@DoSkill,#who=who,#oEquipment=self)
         {
            return;
         }
         else
         {
            piHits = piHits - 1;
         }
      }
      
      if piHits <= 0
      {
         Send(self,@ItemBrokenInBattle);
      }
      
      return;
   }

   ItemBrokenInBattle()
   {
      local i, oItemAtt, iNum;

      % Remove curse attribute so players aren't forced to keep a broken weapon
      foreach i in plItem_Attributes
      {
         oItemAtt = Send(SYS,@FindItemAttByNum,
                         #num=Send(self,@GetNumFromCompound,#compound=First(i)));
         if IsClass(oItemAtt,&WeapAttCursed)
         {
            Send(oItemAtt,@RemoveFromItem,#oItem=self);
         }
      }
   
      Send(poOwner,@SomethingChanged,#what=self);        
      Send(poOwner,@MsgSendUser,#message_rsc=vrItem_broken,
           #parm1=Send(self,@GetName));
      Send(poOwner,@TryUnuseItem,#what=self);
      
      return;
   }

   AdjustsMaxHealth()
   {
      if plEnchantmentMods <> $
      {
         if Send(self,@HasMagicModOfClass,#class=&HealthMod)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   AdjustsMaxMana()
   {
      if plEnchantmentMods <> $
      {
         if Send(self,@HasMagicModOfClass,#class=&ManaMod)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   AdjustsMaxVigor()
   {
      if plEnchantmentMods <> $
      {
         if Send(self,@HasMagicModOfClass,#class=&VigorMod)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   GetHealthChange()
   {
      if plEnchantmentMods <> $
      {
         if Send(self,@HasMagicModOfClass,#class=&HealthMod)
         {
            return Send(self,@GetStateMagicModOfClass,#class=&HealthMod);
         }
      }

      return 0;
   }

   GetManaChange()
   {
      if plEnchantmentMods <> $
      {
         if Send(self,@HasMagicModOfClass,#class=&ManaMod)
         {
            return Send(self,@GetStateMagicModOfClass,#class=&ManaMod);
         }
      }

      return 0;
   }
   
   GetVigorChange()
   {
      if plEnchantmentMods <> $
      {
         if Send(self,@HasMagicModOfClass,#class=&VigorMod)
         {
            return Send(self,@GetStateMagicModOfClass,#class=&VigorMod);
         }
      }

      return 0;
   }

   IsItemType(type = ITEMTYPE_MISC)
   {
      % Check for misc items (type 0)
      if type = viItem_type            
      {
         return TRUE;
      }               

      return (viItem_type & type);
   }

   DoShatter()
   "Shatters the item.  Include any special functions here."
   {
      Send(self,@Delete);

      return;
   }
   
   Delete()
   {
      Send(self,@ClearAllItemAttributes);
      
      propagate;
   }

   ObjectCorpseFading(corpse=$)
   {
      local lData;
          
      if NOT Send(self,@HasAttribute,#ItemAtt=IA_CORPSEPOINTER)
      {
         return;
      }
          
      lData = Send(self,@GetAttributeData,#ItemAtt=IA_CORPSEPOINTER);

      if lData = $
      {
         return;
      }

      if Nth(lData,3) = corpse
      {
         Send(self,@RemoveAttribute,#ItemAtt=IA_CORPSEPOINTER);
      }
      
      return;
   }

   GetPaletteTranslation()
   {
      return piItem_flags & ITEM_PALETTE_MASK;
   }

   SetPaletteTranslation(translation = $)
   {
      piItem_flags = (piItem_flags & ~ITEM_PALETTE_MASK) | translation;
      
      return;
   }

   CanIdentify()
   {
      local i, oItemAtt, iNum;

      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
            
         if oItemAtt = $
         {
            Debug("Illegal ItemAtt in list!");

            continue;
         }
         
         if NOT Send(oItemAtt,@ItemCanIdentify,#oItem=self)
         {
            return FALSE;
         }
      }
      
      return TRUE;
   }
   
   CanShatter()
   "Called by the shatter spell.  If this is false, the spell fails."
   { 
      local i, oItemAtt, iNum;
      
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
                         
         if oItemAtt = $
         {
            Debug("Illegal ItemAtt in list!");

            continue;
         }
         
         if NOT Send(oItemAtt,@ItemCanShatter,#oItem=self)
         {
            return FALSE;
         }
      }

      return TRUE;  
   }

   CanSwap()
   "Called by the swap spell.  If this is false, the spell fails."
   {  
      local i, oItemAtt, iNum;
      
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
                         
         if oItemAtt = $
         {
            Debug("Illegal ItemAtt in list!"); continue;
         }
         
         if NOT Send(oItemAtt,@ItemCanSwap,#oItem=self)
         {
            return FALSE;
         }
      }
      
      return TRUE; 
   }

   CanWeaken()
   "Called by the Brittle spell, among other thing."
   {  
      local i, oItemAtt, iNum;

      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
            
         if oItemAtt = $
         {
            Debug("Illegal ItemAtt in list!");
            
            continue;
         }
         
         if NOT Send(oItemAtt,@ItemCanWeaken,#oItem=self)
         {
            return FALSE;
         }
      }
      
      return TRUE; 
   }

   CanMend()
   "Called by the Mend spell.  If this returns false, the spell fails."
   "Most things are not mendable."
   {  
      return FALSE; 
   }

   CanEnchant(oSpell = $)
   "Can a particular spell enchantment target this item.  Note that for "
   "artifice and shroud, this is true, but for curse and the three "
   "enchantments, this is false."
   {
      local i, oItemAtt, iSpell, iNum;

      iSpell = Send(oSpell,@GetSpellNum);
      if iSpell = SID_HOLY_WEAPON
         OR iSpell = SID_UNHOLY_WEAPON
         OR iSpell = SID_ENCHANT_WEAPON
         OR iSpell = SID_CURSE_WEAPON
      {
         return FALSE;
      }

      if iSpell = SID_SHROUD
      AND (IsClass(self,&Weapon)
         OR IsClass(self,&DefenseModifier)
         OR IsClass(self,&Necklace)
         OR IsClass(self,&Instrument)
         OR IsClass(self,&AttackModifier))
      {
         foreach i in plItem_Attributes
         {
            iNum = Send(self,@GetNumFromCompound,#compound=First(i));
            oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
                            
            if oItemAtt = $
            {
               Debug("Illegal ItemAtt in list!");
               
               continue;
            }
            
            if NOT Send(oItemAtt,@ItemCanEnchant,#oItem=self)
            {
               return FALSE;
            }
         }

         return TRUE;
      }

      return FALSE;
   }

   OwnerKilled(what = $)
   "Called when our owner dies. Killer is passed as 'what' parameter."
   {
      local i, iNum, oItemAtt;

      % Check itematts.
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);

         Send(oItemAtt,@OwnerKilled);
      }

      return;
   }

   DropOnDeath()
   "Most items are dropped on death.  But, assassin's blades and a few other "
   "things are not."
   {
      local i, oItemAtt, iNum;
      
      % Check ItemAtts to be sure nothing funky is there
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         if NOT Send(oItemAtt,@ItemDropOnDeath)
         {
            return FALSE;
         }
      }

      return TRUE;
   }

   CanBeGivenToNPC()
   "For most things this is TRUE.  However, objects like black daggers cannot "
   "be given to NPCs for any reason."
   {
      local i;
      
      foreach i in plItem_Attributes
      {
         % KLUDGE: We specifically prevent made items from being given to NPCs.
         %  Should be more general.
         if Send(self,@GetNumFromCompound,#compound=First(i)) = IA_MADE
         {
            return FALSE;
         }
      }
      
      return TRUE;
   }   

   CanBeStoredInVault()
   "Black daggers and tokens, especially, cannot be stored in vaults."
   {
      return TRUE;
   }

   ReqDMDelete()
   "Will this item be deleted by a DM Clear Inventory command?"
   {
      return TRUE;
   }

   % An item can format a text effect for players in the room to see,
   %  whether held by a player or not.  If range is specified,
   %  only players within that range will see the effect.
   % Also, one player can be specified (in except) to treat that player
   %  separately.
   RoomMessage(range = $, except = $, except_rsc = $, message_rsc = $,
               parm1 = $, parm2 = $, parm3 = $, parm4 = $,
               parm5 = $, parm6 = $, parm7 = $, parm8 = $)
   {
      local oRoom, oSource, i, range_squared, oPlayer;

      if range <> $
      {
         range_squared = range * range;
      }

      oSource = self;
      oRoom = poOwner;
      if oRoom = $
      {
         return FALSE;
      }
      
      if isClass(oRoom,&Player)
      {
         oSource = poOwner;
         oRoom = Send(oRoom, @GetOwner);
      }
      
      if oRoom = $ OR NOT isClass(oRoom,&Room)
      {
         return FALSE;
      }

      foreach i in Send(oRoom,@GetHolderActive)
      {
         oPlayer = Send(oRoom,@HolderExtractObject,#data=i);
         if NOT IsClass(oPlayer,&Player)
         {
            continue;
         }

         if range <> $
            AND Send(oPlayer,@SquaredDistanceTo,#what=oSource) >= range_squared
         {
            continue;
         }

         if oPlayer = except
         {
            if except_rsc = $
            {
               continue;
            }

            % message comes from except_rsc, with parm1 missing.
            Send(oPlayer,@MsgSendUser,#message_rsc=except_rsc,
                 #parm1=parm3,#parm2=parm4,#parm3=parm5,#parm4=parm6,
                 #parm5=parm7,#parm6=parm8);
         }
         else
         {
            Send(oPlayer,@MsgSendUser,#message_rsc=message_rsc,
                 #parm1=parm1,#parm2=parm2,#parm3=parm3,#parm4=parm4,
                 #parm5=parm5,#parm6=parm6,#parm7=parm7,#parm8=parm8);
         }
      }

      return;
   }

   %  Item Attributes, added 4 March 97 by Damion Schubert
   % 
   %  ItemAtts are any special attributes that an item might have.  
   %  Examples include training weapons, poisoned weapons and 
   %  enchanted weapons.  These have been generalized so the same 
   %  ItemAtt may be applied to any item.
   %
   %  The ItemAtt Struct (plItem_attributes) is as follows
   %
   %    plItem_attributes = \
   %       [ [WA_const_name, timer, primary_state, secondary_state],
   %         [WA_const_name2, timer, primary_state, secondary_state],
   %         etc.
   %       ]
   %
   %  WA_const_name : a unique constant name as found in blakston.khd
   %  timer : a timer, most often counting down to the enchantment's
   %    extinction.  However, since Item enchantments may last for days, 
   %    the timer may just count down hours, with an additional (usually 
   %    secondary) state value counting days.  If this timer doesn't exist,
   %    the ItemAtt is permanent.
   %  states : any value that the ItemAtt needs to know.  For example, the
   %    strength of attributes such as the strength of poison or the damage
   %    bonus might be stored. Individual ItemAtt code should be examined to
   %    see what this is.
   %
   %  Note, there are thousands of items in a live server.  As a
   %    result, I've taken actions to ensure that as few list nodes are used as
   %    possible for each ItemAtt, so rather than store blank fields which are 
   %    never used, I make it easy for the individual ItemAtts to decide to 
   %    store what information they deem necessary. 
   %    I check to see if those fields exist when using them, allowing me to
   %    collapse the ItemAtt struct as much as possible.  For example, a 
   %    training attribute struct only has one argument, the ItemAtt ID:
   %
   %    plItem_Attributes = [[WA_TRAINING]];
   %
   %  By comparison, you may have a fiery sword, which is only fiery
   %    for a short time (as determined by a timer).  That list looks
   %    like:
   %
   %    plItem_Attributes = [[WA_ATCKTYPE, DurationTimer, ATCK_FIRE]];
   %
   %  This 'telescoping' saves memory.

   %%% Item Attribute Functions
   
   HasAttribute(ItemAtt = $)
   {
      local i;

      foreach i in plItem_attributes
      { 
         if Send(self,@GetNumFromCompound,#compound=First(i)) = ItemAtt  
         {
            return TRUE;
         }  
      }
      
      return FALSE;
   }

   HasAnyAttribute()
   {
      if plItem_attributes = $
      {
         return FALSE;
      }

      return TRUE;
   }

   GetAttributeData(ItemAtt = $, index = 1)
   {
      local i, n;

      n = 0;
      foreach i in plItem_attributes
      { 
         if Send(self,@GetNumFromCompound,#compound=First(i)) = ItemAtt
         {
            n = n + 1;
            if n = index
            {
               return i;
            }
         }  
      }
      
      return $;
   }   

   GetNumFromCompound(compound = $)
   {
      if compound = $
      {
         return $;
      }

      return compound / 100;
   }

   GetIDStatusFromCompound(compound = $)
   {
      if compound = $
      {
         return $;
      }

      % If compound is odd, it is IDed. If even, it is not.

      if (compound mod 2) = 1
      {
         return TRUE;
      }

      return FALSE;
   }

   RevealHiddenAttributes()
   {
      local i, bDone;

      bDone = FALSE;
      foreach i in plItem_Attributes
      {
         if NOT Send(self,@GetIDStatusFromCompound,#compound=First(i))
         {
            setNth(i,1,(First(i)+1));
            bDone = TRUE;
         }
      }
      
      return bDone;
   }

   AddAttributeSpecifics(litemAtt=$)
   "Don't call this directly!  Call this from itematt.kod!"
   {
      if lItemAtt = $ 
      {
         Debug("lItemAtt = $!  Most likely, lItemAtt called directly instead "
               "of from itematt.kod");
      }

      plItem_attributes = Cons(lItemAtt,plItem_attributes);

      return;
   }

   RemoveItemAttIfPresent(iNum=0)
   "Attempts to removes a specific item attribute if present.  Used to "
   "remove an attribute from all items without generating debug messages "
   "if the item does not have that attribute."
   {
      local oItemAtt;

      if iNum = 0
      {
         return;
      }

      oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);

      if oItemAtt = $
      {
         return;
      }

      if Send(self,@HasAttribute,#ItemAtt=iNum)
      {
         Send(oItemAtt,@RemoveFromItem,#oItem=self);
      }

      return;
   }

   RemoveAttribute(ItemAtt=$)
   "All this does is calls the itematt.kod version of the same thing. "
   "This function is largely unnecessary, and is here only for convenience."
   {
      local oItemAtt;
      
      if ItemAtt = $
      {
         return;
      }
 
      oItemAtt = Send(SYS,@FindItemAttByNum,#num=ItemAtt);
      
      if oItemAtt = $
      {
         Debug("Illegal data sent to RemoveAttribute");

         return;
      }

      Send(oitemAtt,@RemoveFromItem,#oItem=self);
      
      return;
   }

   RemoveAttributeSpecifics(oItemAtt=$, ItemAtt = 0, index = 1)
   "Don't call this directly!  Call this from itematt.kod!"
   {
      local lData;

      if oItemAtt = $ OR ItemAtt = 0
      {
         Debug("Illegal data sent to RemoveAttributeSpecific");
         
         return;
      }

      lData = Send(self,@GetAttributeData,#ItemAtt=ItemAtt,#index=index);
      if lData = $
      {
         Debug("Can't remove a node that isn't there!"); return;
      }

      % First kill the timer if it has one
      if Send(oItemAtt,@HasTimer,#lData=lData)
      {
            if Nth(lData,2) <> $
      	    {
	             DeleteTimer(Nth(lData,2));
		     SetNth(lData,2,$);
	    }
      }
      % now free the nodes
      plItem_Attributes = DelListElem(plItem_Attributes,lData);
      
      return;
   }

   AttributeTimer(timer=$)
   {
      local i, oItemAtt, iNum;

      if timer = $
      {
         Debug("Timer = $!");
         return;
      }

      foreach i in plItem_Attributes
      {
         if Length(i) >= 2 AND Nth(i,2) = timer
         {  
            % This is the timer that just expired.
            SetNth(i,2,$); % clear it in the data structure first
            iNum = Send(self,@GetNumFromCompound,#compound=First(i));
            oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
            Send(oItemAtt,@TimerExpired,#oItem=self,#lData=i);
            
            return;
         }
      }
      
      Debug("AttributeTimer didn't find enchantment to get rid of!");
      
      return;
   }

   ClearAllItemAttributes()
   "Most likely called if the Item is deleted."   
   {
      local i, oItemAtt, iNum;

      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         if oItemAtt = $
         {
            Debug("Illegal ItemAtt in list!");
            
            continue;
         }
         
         Send(oItemAtt,@RemoveFromItem,#oItem=self);
      }
          
      % All items should have cleared fine.  If not, something went wrong.
      if plItem_Attributes <> $
      {
         Debug("Clearing all Item Attributes failed!");
         plItem_Attributes = $;
      }

      plEnchantmentMods = $;

      return;
   }

   BuildDescName()
   {
      local i, iHigh_index, oHigh_obj, oItemAtt, iPriority, iNum;
      
      if plItem_Attributes = $
      {
         propagate;
      }
      
      iHigh_index = 0;  oHigh_obj = $;
      foreach i in plItem_Attributes
      {
         if NOT Send(self,@GetIDStatusFromCompound,#compound=First(i))
         {
            % If not identified, keep on marching.
            continue;
         }   

         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         
         iPriority = Send(oItemAtt,@GetNamePriority);
         if iPriority > iHigh_index
         
         {
            iHigh_index = iPriority;
            oHigh_obj = oItemAtt;
         }
      }

      if oHigh_obj = $
      {
         propagate;
      }

      Send(oHigh_obj,@ItemBuildDescName,#oItem=self);      

      return;
   }

   SetTimer(timer_duration=$)
   {
      local tTimer;
      
      if timer_duration = $
      {
         return $;
      }

      tTimer = CreateTimer(self,@AttributeTimer,timer_duration);

      return tTimer;
   }

   GetBaseSpellModifier(oSpell=$,bActual=FALSE)
   {
      % Doing it this way, we can have different items give different bonuses
      %  in different situations, while still giving itematt bonuses.
      return viSpell_modifier;
   }

   GetSpellModifier(oSpell=$,lTargets=$,bActual=FALSE)
   {
      local oItemAtt, iModifier, i, iNum, oObjectAttribute;

      iModifier = Send(self,@GetBaseSpellModifier,#oSpell=oSpell,
                        #lTargets=lTargets,#bActual=bActual);
      foreach i in plItem_Attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         iModifier = iModifier + Send(oItemAtt,@ItemGetSpellModifier,
                                      #oSpell=oSpell,#oCaster=poOwner);
      }

      foreach oObjectAttribute in plObject_attributes
      {
         iModifier = Send(oObjectAttribute,@ModifySpellPower,
                           #iModifier=iModifier,#oSpell=oSpell,
                           #oCaster=poOwner);
      }

      return iModifier;
   }

   GetHeatDamage()
   "Only things worn at the armor position will be asked this, but "
   "just in case, default is 0."
   {
      return 0;
   }

   GetShirtIcon(who=$)
   {
      if Send(who,@GetGender) = GENDER_MALE
      {
         return vrIcon_male;
      }
      
      return vrIcon_female;
   }

   GetLeftArm(who=$)
   {
      local i;

      if Send(self,@OverrideArmsForGauntlets)
      {
         foreach i in Send(who,@GetPlayerUsing)
         {
            if Send(i,@OverRideArms)
            {
               return Send(i,@GetOverrideLeftArm,#who=who);
            }
         }
      }
      
      if Send(who,@GetGender) = GENDER_MALE
      {
         return vrLeftarm_male;
      }
      
      return vrLeftarm_female;
   }

   OverrideArmsForGauntlets()
   {
      return FALSE;
   }
   
   OverrideArms()
   {
      return FALSE;
   }
   
   GetOverrideRightArm()
   {
      return $;
   }
   
   GetOverrideLeftArm()
   {
      return $;
   }

   GetRightArm(who=$)
   {
      local i;

      if Send(self,@OverrideArmsForGauntlets)
      {
         foreach i in Send(who,@GetPlayerUsing)
         {
            if Send(i,@OverRideArms)
            {
               return Send(i,@GetOverrideRightArm,#who=who);
            }
         }
      }

      if Send(who,@GetGender) = GENDER_MALE
      {
         return vrRightarm_male;
      }
      
      return vrRightarm_female;
   }   

   GetNakedLeftArm(who=$)
   {
      local i;

      foreach i in Send(who,@GetPlayerUsing)
      {
         if Send(i,@OverRideArms)
         {
            return Send(i,@GetOverrideLeftArm,#who=who);
         }
      }

      if Send(who,@GetGender) = GENDER_MALE
      {
         return nakedleftarm_male;
      }

      return nakedleftarm_female;
   }

   GetNakedRightArm(who=$)
   {
      local i;

      foreach i in Send(who,@GetPlayerUsing)
      {
         if Send(i,@OverRideArms)
         {
            return Send(i,@GetOverrideRightArm,#who=who);
         }
      }

      if Send(who,@GetGender) = GENDER_MALE
      {
         return NakedRightarm_male;
      }

      return NakedRightarm_female;
   }   

   GetLegs(who=$)
   {
      if Send(who,@GetGender) = GENDER_MALE
      {
         return vrLegs_male;
      }
      
      return vrLegs_female;
   }   

   HasSkinTones()
   {
      return FALSE;
   }

   ShowShirt()
   {
      return FALSE;
   }

   ResetSkinColor()
   {
      local iSkin_color, iColor, iXlat;
      
      if not Send(self,@HasSkinTones)
      {
         return;
      }

      iSkin_Color = Send(SYS,@DecodeSecondaryColor,
                         #xlat=Send(self,@GetPaletteTranslation));
      if iSkin_Color <> Send(poOwner,@GetSkinColor)
      {
         iSkin_Color = Send(poOwner,@GetSkinColor);
         iSkin_color = Send(poOwner,@ConvertSkinColorToXLAT,
                            #skin_color=iSkin_color);
         iColor = Send(SYS,@DecodePrimaryColor,
                       #xlat=Send(self,@GetPaletteTranslation));
      
         iXlat = Send(SYS,@EncodeTwoColorXLAT,#color1=iColor,
                      #Color2=iSkin_color);
         Send(self,@SetPaletteTranslation,#translation=iXlat);
      }

      return;
   }

   ResetXLATsToShirt()
   {
      local iSkin_color, iColor, iXlat, iShirt_XLAT;
      
      if not Send(self,@ShowShirt)  { return; }
      iShirt_XLAT = Send(poOwner,@GetCurrentShirtColor);

      if (iShirt_XLAT <> Send(self,@GetPaletteTranslation))
      {
         Send(self,@SetPaletteTranslation,#translation=iShirt_Xlat);
      }
      
      return;
   }

   UndoPlayerArt()
   {
      local oRoom, oShirt;

      if (poOwner <> $)
      {
         if vrIcon_male <> $
         {
            Send(poOwner,@ResetPlayerIcon,#alldone=FALSE);
         }
         
         if vrLeftArm_male <> $
         {
            Send(poOwner,@ResetPlayerArms,#alldone=FALSE);
         }
         
         if  vrLegs_male <> $
         {
            Send(poOwner,@ResetPlayerLegs,#alldone=FALSE);
         }
         
         Post(poOwner,@RefreshPlayerVisualGear);
         
         oRoom = Send(poOwner,@GetOwner);
         if oRoom <> $
         {         
            Post(oRoom,@SomethingChanged,#what=poOwner);
         }
      }
      
      return;
   }

   DoPlayerArt()
   {
      local oRoom;

      % make the player's hands match his sleeves.            
      Send(self,@ResetSkinColor);   

      if Send(self,@ShowShirt)
      {
         Send(self,@ResetXLATsToShirt);
      }

      if vrLeftArm_male <> $
      {
         Send(self,@SetArms,#alldone=FALSE);
      }

      if vrIcon_male <> $
      {
         Send(self,@SetIcon,#alldone=FALSE);
      }

      if  vrLegs_male <> $
      {
         Send(self,@SetLegs,#alldone=FALSE);
      }
      
      oRoom = Send(poOwner,@GetOwner);
      if oRoom <> $
      {         
         Send(oRoom,@SomethingChanged,#what=poOwner);
      }
      
      return;
   }
   
   ItemChangesArms()
   {
      if vrLeftArm_male <> $
      {
         return TRUE;
      }
       
      return FALSE;
   }

   SetNakedArms()
   {
      local iSkin_xlat;
      
      iSkin_Xlat = Send(poOwner,@GetSkinColor);      
      iSkin_Xlat = Send(poOwner,@ConvertSkinColorToXLAT,
                        #skin_color=iSkin_Xlat);
      iSkin_Xlat = Send(SYS,@EncodeTwoColorXLAT,#color1=iSkin_XLAT,
                        #color2=iSkin_XLAT);      
      Send(poOwner,@SetPlayerArms,#what=self,
           #new_left_arm=Send(self,@GetNakedLeftArm,#who=poOwner),
           #new_right_arm=Send(self,@GetNakedRightArm,#who=poOwner),
           #translation=iSkin_Xlat,#alldone=FALSE);
           
      return;
   }

   SetArms()
   {
      Send(poOwner,@SetPlayerArms,#what=self,
           #new_left_arm=Send(self,@GetLeftArm,#who=poOwner),
           #new_right_arm=Send(self,@GetRightArm,#who=poOwner),
           #translation=Send(self,@GetPaletteTranslation),#alldone=FALSE);
           
      return;
   }

   SetIcon()
   {
      Send(poOwner,@SetPlayerIcon,#what=self,
           #new_icon=Send(self,@GetShirtIcon,#who=poOwner),
           #translation=Send(self,@GetPaletteTranslation),#alldone=FALSE);
           
      return;
   }

   SetLegs()
   {
      Send(poOwner,@SetPlayerLegs,#what=self,
           #new_legs=Send(self,@GetLegs,#who=poOwner),
           #translation=Send(self,@GetPaletteTranslation),#alldone=FALSE);
           
      return;
   }

   IsPlural()
   {
      return FALSE;
   }

   GetUnrevealedColor()
   "Returns the item's color before being revealed."
   {
      return viUnrevealedColor;
   }
   
   GetRevealedColor()
   "Returns the item's mystery revealed color."
   {
      return viRevealedColor;
   }
   
   RevealHiddenColor()
   "Shows the item's true color."
   {
      if viRevealedColor <> 0
         AND viUnrevealedColor <> 0
         AND Send(self,@GetPaletteTranslation) = (viUnrevealedColor & ITEM_PALETTE_MASK)
      {
         Send(self,@SetPaletteTranslation,#translation=viRevealedColor);
         return TRUE;
      }
      return FALSE;
   }
  
   GetCurrentResistances()
   {
      local lCurrentResistances, oObjectAttribute, lMagicMod, oMagicMod;
      
      lCurrentResistances = Send(self,@GetResistanceModifiers);
      
      foreach oObjectAttribute in plObject_attributes
      {
         lCurrentResistances = Send(oObjectAttribute,@ModifyResistance,
                                  #resistance_list=lCurrentResistances);
      }

      foreach lMagicMod in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(lMagicMod,1)) = GROUP_RESISTANCE
         {
            oMagicMod = Send(SYS,@GetMagicMod,#class=Nth(lMagicMod,1));
            lCurrentResistances = Send(oMagicMod,@ModifyResistance,
                                     #resistance_list=lCurrentResistances,
                                     #iState=Nth(lMagicMod,2));
         }
         else
         {
            if NOT Send(SETTINGS_OBJECT,@GetDirectArmorEnabled)
            {
               if Send(SYS,@GetGroupOfClassMod,#class=Nth(lMagicMod,1)) = GROUP_ARMOR
               {
                  oMagicMod = Send(SYS,@GetMagicMod,#class=Nth(lMagicMod,1));
                  lCurrentResistances = Send(oMagicMod,@ModifyResistance,
                                           #resistance_list=lCurrentResistances,
                                           #iState=Nth(lMagicMod,2));
               }
            }
         }
      }

      return lCurrentResistances;
   }

   GetCurrentEmpowerments()
   {
      local lCurrentEmpowerments, oObjectAttribute, lMagicMod, oMagicMod;
      
      lCurrentEmpowerments = Send(self,@GetEmpowermentModifiers);
      
      foreach oObjectAttribute in plObject_attributes
      {
         lCurrentEmpowerments = Send(oObjectAttribute,@ModifyEmpowerment,
                                                      #empowerment_list=lCurrentEmpowerments);
      }

      foreach lMagicMod in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(lMagicMod,1)) = GROUP_EMPOWERMENT
         {
            oMagicMod = Send(SYS,@GetMagicMod,#class=Nth(lMagicMod,1));
            lCurrentEmpowerments = Send(oMagicMod,@ModifyEmpowerment,#empowerment_list=lCurrentEmpowerments,#iState=Nth(lMagicMod,2));
         }
      }

      return lCurrentEmpowerments;
   }

   GetCurrentSlayers()
   {
      local lCurrentSlayers, oObjectAttribute, lMagicMod, oMagicMod;
      
      lCurrentSlayers = Send(self,@GetSlayerModifiers);
      
      foreach oObjectAttribute in plObject_attributes
      {
         lCurrentSlayers = Send(oObjectAttribute,@ModifySlayer,#slayer_list=lCurrentSlayers);
      }

      foreach lMagicMod in plEnchantmentMods
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(lMagicMod,1)) = GROUP_SLAYER
         {
            oMagicMod = Send(SYS,@GetMagicMod,#class=Nth(lMagicMod,1));
            lCurrentSlayers = Send(oMagicMod,@ModifySlayer,#slayer_list=lCurrentSlayers,#iState=Nth(lMagicMod,2));
         }
      }

      return lCurrentSlayers;
   }

   ModifyResistance(resistance_list=$)
   {
      local oResist, lCurrentResistances;
      
      lCurrentResistances = Send(self,@GetCurrentResistances);
      
      foreach oResist in lCurrentResistances
      {
         resistance_list = Send(SYS,@AddResistance,#what=Nth(oResist,1),#value=Nth(oResist,2),#resistance_list=resistance_list);
      }
      
      return resistance_list;
   }

   ModifyEmpowerment(empowerment_list=$)
   {
      local oEmpowerment, lCurrentEmpowerments;
      
      lCurrentEmpowerments = Send(self,@GetCurrentEmpowerments);
      
      foreach oEmpowerment in lCurrentEmpowerments
      {
         empowerment_list = Send(SYS,@AddEmpowerment,
                                     #what=Nth(oEmpowerment,1),
                                     #value=Nth(oEmpowerment,2),
                                     #empowerment_list=empowerment_list);
      }
      
      return empowerment_list;
   }

   ModifySlayer(slayer_list=$)
   {
      local oSlayer, lCurrentSlayers;
      
      lCurrentSlayers = Send(self,@GetCurrentSlayers);
      
      foreach oSlayer in lCurrentSlayers
      {
         slayer_list = Send(SYS,@AddSlayer,
                                     #what=Nth(oSlayer,1),
                                     #value=Nth(oSlayer,2),
                                     #slayer_list=slayer_list);
      }
      
      return slayer_list;
   }

   AddRadiusEnchantment(what=$,iPower=0,source=$)
   {
      local i;
      
      foreach i in plRadiusEnchantments
      {
         if Nth(i,1) = what
            AND Nth(i,2) = iPower
            AND Nth(i,3) = source
         {
            return;
         }
      }

      plRadiusEnchantments = Cons([what,iPower,source],plRadiusEnchantments);
      
      If IsClass(self,&User)
      {
         Send(self,@ShowAddEnchantment,#what=what,#type=2);
         
         If source = self
         {
            Send(self,@ShowAddEnchantment,#what=what,#type=1);
         }
      }
      
      return;
   }

   RemoveRadiusEnchantment(what=$,iPower=0,source=$)
   {
      local i, bFound;

      bFound = FALSE ;
      foreach i in plRadiusEnchantments
      {
         if Nth(i,1) = what
            AND Nth(i,2) = iPower
            AND Nth(i,3) = source
         {
            If IsClass(self,&User)
            {
               Send(self,@ShowRemoveEnchantment,#what=Nth(i,1),#type=2);

               If source = self
               {
                  Send(self,@ShowRemoveEnchantment,#what=Nth(i,1),#type=1);
               }
            }
         
            plRadiusEnchantments = DelListElem(plRadiusEnchantments,i);
            bFound = TRUE;
         }
      }

      if NOT bFound
      {
         Debug(self,"Tried to remove radius enchantment ",what," but not in list",
               plRadiusEnchantments);
      }

      return;
   }
   
   IsAffectedByRadiusEnchantment(what=$,caster=$,byClass=&RadiusEnchantment)
   "Returns whether or not currently enchanted by <what> radius enchantment."
   {
      local i;
      
      if plRadiusEnchantments = $
      {
         return FALSE;
      }

      if what = $
      {
         foreach i in plRadiusEnchantments
         {
            if IsClass(Nth(i,1),byClass)
            {
               if caster = $
               {
                  return TRUE;
               }
               else
               {
                  if Nth(i,3) = caster
                  {
                     return TRUE;
                  }
               }
            }
         }
      }
      else
      {
         foreach i in plRadiusEnchantments
         {
            if Nth(i,1) = what
            {
               if caster = $
               {
                  return TRUE;
               }
               else
               {
                  if Nth(i,3) = caster
                  {
                     return TRUE;
                  }
               }
            }
         }      
      }
      
      return FALSE;
   }
   
   GetMostPowerfulRadiusEnchantmentState(byClass=&RadiusEnchantment)
   {
      local i, oHighest;
   
      oHighest = $;
   
      foreach i in plRadiusEnchantments
      {
         if IsClass(Nth(i,1), byClass)
         {
            if oHighest = $
            {
               oHighest = i;
            }
            else
            {
               if Nth(i,2) > Nth(oHighest,2)
               {
                  oHighest = i;
               }
            }
         }
      }
      return oHighest;
   }
   
   GetRadiusEnchantments()
   {
      return plRadiusEnchantments;
   }
   
   IsInSameRoom(what = $)
   {
      if Send(self,@GetOwner) <> $
         AND IsClass(Send(self,@GetOwner),&Room)
         AND Send(what,@GetOwner) <> $
         AND IsClass(Send(what,@GetOwner),&Room)
         AND Send(self,@GetOwner) = Send(what,@GetOwner)
      {
         return 1;
      }
         
      return 0;
   }

   SquaredDistanceTo(what = $)
   "Computes squared distance to <what>. Returns $ for any object that is not within a room."
   {
      local iRow, iCol;
      
      If NOT Send(self,@IsInSameRoom,#what=what)
      {
         return $;
      }

      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);

      % Sanity checking
      if iRow = $ OR iCol = $ OR Send(self,@GetRow) = $ OR Send(self,@GetCol) = $
      {
         return $;
      }

      return send(self,@SquaredDistanceToLocation,#row=iRow,#col=iCol);
   }

   SquaredDistanceToLocation(row = $, col = $)
   "Computes squared distance to (row,col)"
   {
      local iRow_diff, iCol_diff;

      iRow_diff = Send(self,@GetRow) - row;
      iCol_diff = Send(self,@GetCol) - col;

      return  (iRow_diff * iRow_diff + iCol_diff * iCol_diff);
   }

   EvaluateMagicFlag()
   {
      local i, iNum, oItemAtt;
      
      foreach i in plItem_attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         
         if Send(oItemAtt,@IsMagicalEffect)
         {
            viObject_flags = viObject_flags | OF_ITEM_MAGIC;
            return;
         }
      }
      
      if plEnchantmentMods <> $
      {
         viObject_flags = viObject_flags | OF_ITEM_MAGIC;
      }

      return;
   }

   AddMagicFlag()
   {
      viObject_flags = viObject_flags | OF_ITEM_MAGIC;
    
      if poOwner <> $
         AND IsClass(poOwner,&Player)
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   RemoveMagicFlag()
   {
      local i, iNum, oItemAtt;
      
      foreach i in plItem_attributes
      {
         iNum = Send(self,@GetNumFromCompound,#compound=First(i));
         oItemAtt = Send(SYS,@FindItemAttByNum,#num=iNum);
         
         if Send(oItemAtt,@IsMagicalEffect)
         {
            viObject_flags = viObject_flags | OF_ITEM_MAGIC;
            
            if poOwner <> $
               AND IsClass(poOwner,&Player)
            {
               Send(poOwner,@SomethingChanged,#what=self);
            }

            return;
         }
      }

      viObject_flags = viObject_flags & ~OF_ITEM_MAGIC;

      if poOwner <> $
         AND IsClass(poOwner,&Player)
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }
   
   ResetNameColor()
   {
      viObject_flags = viObject_flags & ~OF_ITEM_NAME_ORANGE;
      viObject_flags = viObject_flags & ~OF_ITEM_NAME_DGREEN;
      viObject_flags = viObject_flags & ~OF_ITEM_NAME_BGREEN;
      viObject_flags = viObject_flags & ~OF_ITEM_NAME_CYAN;
      viObject_flags = viObject_flags & ~OF_ITEM_NAME_YELLOW;
      viObject_flags = viObject_flags & ~OF_ITEM_NAME_PURPLE;
      return;
   }

   EvaluateNameColor()
   {
      Send(self,@ResetNameColor);

      if IsClass(self,&NumberItem)
      {
         return;
      }
      else if vbUniqueItem
      {
         viObject_flags = viObject_flags | OF_ITEM_NAME_ORANGE;
      }
      else if pbForgedItem
      {
         viObject_flags = viObject_flags | OF_ITEM_NAME_DGREEN;
      }
      else
      {
         switch(Send(self,@GetMagicModsNumber))
         {
            case 0:
               break;
            case 1:
               viObject_flags = viObject_flags | OF_ITEM_NAME_BGREEN;
               break;
            case 2:
               viObject_flags = viObject_flags | OF_ITEM_NAME_CYAN;
               break;
            case 3:
               viObject_flags = viObject_flags | OF_ITEM_NAME_YELLOW;
               break;
            case 4:
               viObject_flags = viObject_flags | OF_ITEM_NAME_YELLOW;
               break;
            case 5:
               viObject_flags = viObject_flags | OF_ITEM_NAME_YELLOW;
               break;
            case 6:
               viObject_flags = viObject_flags | OF_ITEM_NAME_PURPLE;
               break;
         }
      }

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }
   
   SetForgedItem(value=FALSE)
   {
      pbForgedItem = value;
      return;
   }

   CanSweep()
   {
      return TRUE;
   }

   GetMagicModsNumber()
   {
      if plEnchantmentMods <> $
      {
         return Length(plEnchantmentMods);
      }

      return 0;
   }

   GetMagicModsNumberOfType(type=MOD_SUFFIX)
   {
      local i, sum, oMod;
      sum = 0;

      foreach i in plEnchantmentMods
      {
         oMod = Send(SYS,@GetMagicMod,#class=Nth(i,1));
         if oMod <> $
            AND Send(oMod,@GetModType) = type
         {
            ++sum;
         }
      }

      return sum;
   }

   GetStateMagicModOfClass(class=&ArmorMod)
   {
      local i;
      
      foreach i in plEnchantmentMods
      {
         if Nth(i,1) = class
         {
            return Nth(i,2);
         }
      }
   
      return 0;
   }

   HasMagicModOfClass(class=&ArmorMod)
   {
      local i;
      
      foreach i in plEnchantmentMods
      {
         if Nth(i,1) = class
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   RemoveMagicModOfClass(class=&ArmorMod)
   {
      local i;
      
      foreach i in plEnchantmentMods
      {
         if Nth(i,1) = class
         {
            plEnchantmentMods = DelListElem(plEnchantmentMods,i);
         }
      }
      
      if plEnchantmentMods = $
      {
         Send(self,@RemoveMagicFlag);
      }

      return;
   }

   GetItemLevel()
   {
      return piItemLevel;
   }

   GetPrefixes()
   {
      return $;
   }

   GetSuffixes()
   {
      return $;
   }

   ApplyMagicMod(cClass=&ArmorMod,iPower=0)
   {
      local oMagicMod;

      if poOwner <> $
         AND IsClass(poOwner,&Player)
         AND Send(poOwner,@IsLoggedOn)
      {
         oMagicMod = Send(SYS,@GetMagicMod,#class=cClass);
         if oMagicMod <> $
         {
            if NOT Send(SETTINGS_OBJECT,@GetDirectArmorEnabled)
               AND IsClass(oMagicMod,&ArmorMod)
            {
               Post(poOwner,@MsgSendUser,#message_rsc=shard_armor_mod_percentage,
                                         #parm1=Send(self,@GetName),
                                         #parm2=Send(oMagicMod,@GetNumber,#iPower=iPower));
            }
            else
            {
               Post(poOwner,@MsgSendUser,#message_rsc=shard_applying,
                                         #parm1=Send(self,@GetName),
                                         #parm2=Send(oMagicMod,@GetNumber,#iPower=iPower),
                                         #parm3=Send(oMagicMod,@GetName));
            }
         }
      }

      if iPower <> 0
      {
         plEnchantmentMods = Cons([cClass,iPower],plEnchantmentMods);
         Send(self,@AddMagicFlag);
         return TRUE;
      }
   
      return FALSE;
   }

   ClearMagicMods()
   {
      plEnchantmentMods = $;
      Send(self,@RemoveMagicFlag);
      Send(self,@SetForged,#value=FALSE);
      Post(self,@EvaluateNameColor);

      return;
   }

   GetMagicMods()
   {
      return plEnchantmentMods;
   }

   SetItemLevel(iLevel=20)
   {
      piItemLevel = iLevel;
      return;
   }

   GetItemFlags()
   {
      return piItem_flags;
   }

   SetItemFlags(value=0)
   {
      piItem_flags = value;
      return;
   }

   GetHexResistance()
   {
      return 0;
   }

   GetHexIncEffect()
   {
      return 0;
   }

   GetKnockbackResistance()
   {
      return 0;
   }

   GetStunResistance()
   {
      return 0;
   }
   
   GetBleedResistance()
   {
      return 0;
   }
   
   EnchantmentModsDesc(lEnchantmentMods=$)
   {
      local lMod;

      if Length(lEnchantmentMods) = 1
      {
         AddPacket(4,enchantment_mods_attribute_rsc, 4,Send(self,@GetName),
                   4,Length(lEnchantmentMods), 4,enchantment_mods_sing);
      }
      else
      {
         AddPacket(4,enchantment_mods_attribute_rsc, 4,Send(self,@GetName),
                   4,Length(lEnchantmentMods), 4,enchantment_mods_plur);
      }

      foreach lMod in lEnchantmentMods
      {
         if First(lMod) = &WeaponThrustRendMod
         {
            AddPacket(4,weapon_thrust_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponPierceRendMod
         {
            AddPacket(4,weapon_pierce_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponSlashRendMod
         {
            AddPacket(4,weapon_slash_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponBludgeonRendMod
         {
            AddPacket(4,weapon_bludgeon_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponFireRendMod
         {
            AddPacket(4,weapon_fire_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponColdRendMod
         {
            AddPacket(4,weapon_cold_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponShockRendMod
         {
            AddPacket(4,weapon_shock_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponAcidRendMod
         {
            AddPacket(4,weapon_acid_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponHolyRendMod
         {
            AddPacket(4,weapon_holy_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponUnholyRendMod
         {
            AddPacket(4,weapon_unholy_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponIllusionRendMod
         {
            AddPacket(4,weapon_illusion_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponWeaponRendMod
         {
            AddPacket(4,weapon_weapon_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponMagicRendMod
         {
            AddPacket(4,weapon_magic_rend_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         if First(lMod) = &WeaponAgilityMod
         {
            AddPacket(4,weapon_agility_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &WeaponMightMod
         {
            AddPacket(4,weapon_might_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &WeaponAimMod
         {
            AddPacket(4,weapon_aim_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &HealthMod
         {
            AddPacket(4,health_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ManaMod
         {
            AddPacket(4,mana_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &VigorMod
         {
            AddPacket(4,vigor_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &CasterIntMod
         {
            AddPacket(4,caster_int_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &CasterStamMod
         {
            AddPacket(4,caster_stam_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &CasterMystMod
         {
            AddPacket(4,caster_myst_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &OffenseMod
         {
            AddPacket(4,offense_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &RangedOffenseMod
         {
            AddPacket(4,ranged_offense_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &WeaponDamageMod
         {
            AddPacket(4,melee_weapon_damage_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &FireResistanceMod
         {
            AddPacket(4,fire_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ColdResistanceMod
         {
            AddPacket(4,cold_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &AcidResistanceMod
         {
            AddPacket(4,acid_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ShockResistanceMod
         {
            AddPacket(4,shock_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &HolyResistanceMod
         {
            AddPacket(4,holy_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &QuakeResistanceMod
         {
            AddPacket(4,quake_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &SlashResistanceMod
         {
            AddPacket(4,slash_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &BludgeonResistanceMod
         {
            AddPacket(4,bludgeon_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ThrustResistanceMod
         {
            AddPacket(4,thrust_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &PierceResistanceMod
         {
            AddPacket(4,pierce_resist_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ArmorMod
         {
            AddPacket(4,armor_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &DefenseMod
         {
            AddPacket(4,defense_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &FireEmpowermentMod
         {
            AddPacket(4,fire_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ColdEmpowermentMod
         {
            AddPacket(4,cold_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ShockEmpowermentMod
         {
            AddPacket(4,shock_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &AcidEmpowermentMod
         {
            AddPacket(4,acid_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &HolyEmpowermentMod
         {
            AddPacket(4,holy_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &UnholyEmpowermentMod
         {
            AddPacket(4,unholy_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &PierceEmpowermentMod
         {
            AddPacket(4,pierce_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ThrustEmpowermentMod
         {
            AddPacket(4,thrust_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &SlashEmpowermentMod
         {
            AddPacket(4,slash_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &BludgeonEmpowermentMod
         {
            AddPacket(4,bludgeon_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &PunchEmpowermentMod
         {
            AddPacket(4,punch_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &WeaponEmpowermentMod
         {
            AddPacket(4,weapon_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MagicEmpowermentMod
         {
            AddPacket(4,magic_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &IllusionEmpowermentMod
         {
            AddPacket(4,illusion_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &CharmEmpowermentMod
         {
            AddPacket(4,charm_empowerment_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MobFireDamage
         {
            AddPacket(4,mob_fire_damage_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MobColdDamage
         {
            AddPacket(4,mob_cold_damage_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MobShockDamage
         {
            AddPacket(4,mob_shock_damage_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MobHealth
         {
            AddPacket(4,mob_health_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MobResists
         {
            AddPacket(4,mob_resists_mod_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MobAttackSpeed
         {
            AddPacket(4,mob_attack_speed_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MobMoveSpeed
         {
            AddPacket(4,mob_move_speed_desc, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &LeadershipMod
         {
            AddPacket(4,leadership_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MinionAttackSpeedMod
         {
            AddPacket(4,minion_attack_speed_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &InsectSlayerMod
         {
            AddPacket(4,insect_slayer_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &SkeletonSlayerMod
         {
            AddPacket(4,skeleton_slayer_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &ZombieSlayerMod
         {
            AddPacket(4,zombie_slayer_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &UnholySlayerMod
         {
            AddPacket(4,unholy_slayer_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &KriipaSlayerMod
         {
            AddPacket(4,kriipa_slayer_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &AirSlayerMod
         {
            AddPacket(4,air_slayer_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &MagicalSlayerMod
         {
            AddPacket(4,magical_slayer_mod, 4, Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2)));
         }
         else if First(lMod) = &IndestructibleMod
         {
            AddPacket(4,indestructible_mod);
         }
         else
         {
            AddPacket(4, system_blank_resource);
         }
      }
      return;
   }
   
   GetLadderID()
   {
      return piLadderID;
   }
   
   SetLadderID(value=0)
   {
      piLadderID = value;
      return;
   }
   
   RollLootMods(oMonster=$)
   {
      local iRarity, iNumMods, iFullRareChance, iRareChance, iMagicChance, iResult,
            iEpicRarityBoost, iRareRarityBoost, iMagicRarityBoost;
      
      if Send(self,@GetMagicModsNumber) <> 0
      {
         return FALSE;
      }
      
      if poOwner = $
      {
         % Let's make sure we really exist
         return FALSE;
      }
      
      if oMonster = $
      {
         if IsClass(poOwner,&Monster)
         {
            % Let's take attributes from our owner if we're equipment
            oMonster = poOwner;
         }
      }

      if NOT IsClass(self,&Weapon)
            AND NOT IsClass(self,&DefenseModifier)
            AND NOT IsClass(self,&Ring)
            AND NOT IsClass(self,&Gauntlet)
            AND NOT IsClass(self,&NecromancerAmulet)
            AND NOT IsClass(self,&Necklace)
            AND NOT IsClass(self,&Instrument)
            AND NOT IsClass(self,&JewelofFroz)
            AND NOT IsClass(self,&AdventurerCrest)
            AND NOT IsClass(self,&ScryingCrystal)
      {
         return FALSE;
      }

      iRarity = Random(1,100000);
      
      iEpicRarityBoost = 0;
      iRareRarityBoost = 0;
      iMagicRarityBoost = 0;
      if oMonster <> $
      {
         iEpicRarityBoost = Send(oMonster,@GetEpicRarityBoost);
         iRareRarityBoost = Send(oMonster,@GetRareRarityBoost);
         iMagicRarityBoost = Send(oMonster,@GetMagicRarityBoost);
      }
      
      iFullRareChance = Send(SETTINGS_OBJECT,@GetEpicChance) + iEpicRarityBoost;
      iRareChance = Send(SETTINGS_OBJECT,@GetRareChance) + iRareRarityBoost;
      iMagicChance = Send(SETTINGS_OBJECT,@GetMagicChance) + iMagicRarityBoost;

      if iRarity <= iFullRareChance
      {
         % Full rare
         iNumMods = 6;
      }
      else if iRarity <= iRareChance + iFullRareChance
      {
         % Rare
         iNumMods = Random(3,5);
      }
      else if iRarity <= iMagicChance + iRareChance + iFullRareChance
      {
         % Magic
         iNumMods = Random(1,2);
      }
      else
      {
         iNumMods = 0;
      }
      
      while iNumMods > 0
      {
         iResult = Send(self,@GenerateMod,#oItem=self,#oMonster=oMonster);
         
         switch(iResult)
         {
            case NO_ITEM:
               return;
            case NO_MONSTER:
               return;
            case NO_MODS_FOUND:
               return;
            case NO_SPACE_FOR_MODS:
               return;
            case WEIGHT_TEST_FAILED:
               Debug("Weight test failed in magic loot rolling");
               Debug(self);
               return;
            case UNKNOWN_ERROR:
               Debug("Unknown error in magic loot rolling");
               Debug(self);
               return;
         }
         
         iNumMods--;
      }
      
      Post(self,@EvaluateNameColor);
      
      return TRUE;
   }

   GenerateMod(oItem=$,oMonster=$)
   {
      local i, n, lPrefixes, lSuffixes, cChosenMod, oChosenMod, lCombined, iTotalWeight, iChosenWeight,
            iRolledPower;

      if oItem = $
      {
         return NO_ITEM;
      }
      
      lPrefixes = Send(oItem,@GetPrefixes);
      lSuffixes = Send(oItem,@GetSuffixes);

      foreach i in lPrefixes
      {
         if Send(oItem,@HasMagicModOfClass,#class=Nth(i,1))
         {
            lPrefixes = DelListElem(lPrefixes,i);
         }
      }

      foreach i in lSuffixes
      {
         if Send(oItem,@HasMagicModOfClass,#class=Nth(i,1))
         {
            lSuffixes = DelListElem(lSuffixes,i);
         }
      }

      if lPrefixes = $
         AND lSuffixes = $
      {
         return NO_MODS_FOUND;
      }

      if Send(oItem,@GetMagicModsNumberOfType,#type=MOD_PREFIX) >= 3
      {
         lPrefixes = $;
      }
      if Send(oItem,@GetMagicModsNumberOfType,#type=MOD_SUFFIX) >= 3
      {
         lSuffixes = $;
      }

      if lPrefixes = $
         AND lSuffixes = $
      {
         return NO_SPACE_FOR_MODS;
      }

      % We've removed all mods the item already has.
      % We've removed all mods from bins the item is maxed out on.
      % Anything chosen now will be a mod the item doesn't have for a bin that is open.
      % Let's combine into a list for easy random selection.
      % We've also guaranteed at least one of these lists is not nil.
      % Let's let the shard alter values.
      
      if oMonster <> $
      {
         foreach i in lPrefixes
         {
            foreach n in Send(oMonster,@WeightPrefixes)
            {
               if Nth(i,1) = Nth(n,1)
               {
                  SetNth(i,2,Bound(Nth(i,2) + Nth(n,2),0,$));
               }
            }
         }
      

         foreach i in lSuffixes
         {
            foreach n in Send(oMonster,@WeightSuffixes)
            {
               if Nth(i,1) = Nth(n,1)
               {
                  SetNth(i,2,Bound(Nth(i,2) + Nth(n,2),0,$));
               }
            }
         }
      }

      foreach i in lPrefixes
      {
         lCombined = Cons(i,lCombined);
      }
      foreach i in lSuffixes
      {
         lCombined = Cons(i,lCombined);
      }

      % Now we have a list of [Mod, Weight] with shard weighting factored in
      % Let's get the sum of the weights
      
      iTotalWeight = 0;
      foreach i in lCombined
      {
         iTotalWeight = iTotalWeight + Nth(i,2);
      }

      % Let's pinpoint our weight target.
      iChosenWeight = Random(1,iTotalWeight);

      % What have we pinpointed?
      foreach i in lCombined
      {
         iChosenWeight = iChosenWeight - Nth(i,2);
         if iChosenWeight <= 0
         {
            % Found it!
            cChosenMod = Nth(i,1);
            break;
         }
      }

      if iChosenWeight > 0
      {
         return WEIGHT_TEST_FAILED;
      }

      oChosenMod = Send(SYS,@GetMagicMod,#class=cChosenMod);
      if oChosenMod = $
      {
         Debug(cChosenMod," not found by SYS!");
         return MOD_NOT_FOUND;
      }
      iRolledPower = Send(oChosenMod,@RollPower,#what=oItem);

      if oMonster <> $
      {
         foreach i in Send(oMonster,@EmpowerAffixes)
         {
            if Nth(i,1) = cChosenMod
            {
               iRolledPower = iRolledPower + Nth(i,2);
            }
         }
      }

      % Now we have a mod that has not already been applied, is in a bin with free space,
      % and empowered by the shard. Let's apply it.
      if Send(oItem,@ApplyMagicMod,#cClass=cChosenMod,#iPower=iRolledPower)
      {
         return APPLY_SUCCESS;
      }

      return UNKNOWN_ERROR;
   }
   
   GetForged()
   {
      return pbForgedItem;
   }
   
   SetForged(value=FALSE)
   {
      pbForgedItem=value;
      return;
   }
   
   GetLeadershipBonus()
   {
      local iLeadershipBonus, lMod;

      iLeadershipBonus = viLeadershipBonus;
      
      foreach lMod in plEnchantmentMods
      {
         if Nth(lMod,1) = &LeadershipMod
         {
            iLeadershipBonus = iLeadershipBonus + Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2));
         }
      }
      
      return iLeadershipBonus; 
   }
   
   GetMinionAttackSpeedMultiplier()
   {
      local iMinionAttackSpeedBonus, lMod;

      iMinionAttackSpeedBonus = viMinionAttackSpeedBonus;
      
      foreach lMod in plEnchantmentMods
      {
         if Nth(lMod,1) = &MinionAttackSpeedMod
         {
            iMinionAttackSpeedBonus = iMinionAttackSpeedBonus + Send(Send(SYS,@GetMagicMod,#class=First(lMod)),@GetNumber,#iPower=Nth(lMod,2));
         }
      }
      
      return iMinionAttackSpeedBonus; 
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
