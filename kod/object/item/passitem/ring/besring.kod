% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%code by Justin, 98jsh@williams.edu
 
BerserkerRing is Ring

constants:

   include blakston.khd

resources:

   include besring.lkod

   berserkerring_name_rsc = "berserker ring"
   berserkerring_icon_rsc = ring2.bgf            
   berserkerring_desc_rsc = \
      "This ring seems to glow a warm red.  It bears a simple "
      "inscription, \"Lustful blows are strong but not "
      "always true.\""
  
   berserkerring_use_rsc = \
      "Your blood boils with lust for battle.  You yearn to strike down your "
      "enemies... you want only to ~B~rKILL~n!"
   berserkerring_use_wav_rsc = bezerker_ring.wav

   berserkerring_unuse_rsc = \
      "The battle fury from the berserker ring leaves you."

   berserkerring_break_rsc = \
      "The berserker ring, having drunk its fill of battle, simply disappears!"
      
classvars:

   vrRealName = berserkerring_name_rsc
   vrIcon = berserkerring_icon_rsc
   vrRealDesc = berserkerring_desc_rsc

   viHits_init_min = 80
   viHits_init_max = 120

   viBulk = 5
   viWeight = 10
   
   viValue_average = 200

properties:


messages:

   NewUsed(what = $)
   {
      if vrName <> vrRealName
      {
         % Identify upon equip, 'testing out' the ring
         Send(self,@RevealHiddenAttributes);
      }
      
      Send(poOwner,@MsgSendUser,#message_rsc=berserkerring_use_rsc);

            
      propagate;
   }

   NewUnused(what = $)
   {
      Send(poOwner,@MsgSendUser,#message_rsc=berserkerring_unuse_rsc);

      
      propagate;
   }

   ModifyHitRoll(who = $, what = $, hit_roll = $)
   {
      local i, oWeapon, oOffenseMod;

      foreach i in plEnchantmentMods
      {
         if Nth(i,1) = &OffenseMod
         {
            oOffenseMod = Send(SYS,@GetMagicMod,#class=&OffenseMod);
            hit_roll = Send(oOffenseMod,@ModifyHitRoll,#who=who,#what=what,
                        #hit_roll=hit_roll,#iState=Nth(i,2));
         }
      }

      %piHits = piHits - 1;
      if piHits <= 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=berserkerring_break_rsc); 
         Send(poOwner,@TryUnuseItem,#what=self);
         Send(self,@Delete);

         return hit_roll;
      }
      
      return hit_roll;
   }

   ModifyDamage(who = $, what = $, damage = $)
   {
      local oWeapon, i, oWeaponDamageMod;

      foreach i in plEnchantmentMods
      {
         if Nth(i,1) = &WeaponDamageMod
         {
            oWeaponDamageMod = Send(SYS,@GetMagicMod,#class=&WeaponDamageMod);
            damage = Send(oWeaponDamageMod,@ModifyDamage,#who=who,#what=what,
                        #damage=damage,#iState=Nth(i,2));
         }
      }

      oWeapon = send(who,@GetWeapon);

      if oWeapon = $ OR NOT IsClass(oWeapon,&RangedWeapon)
      {
         return damage + random(1,4);
      }

      return damage;
   }

   GetHitBonus()
   {
      local i, sum;
      sum = 0;

      foreach i in plEnchantmentMods
      {
         if Nth(i,1) = &OffenseMod
         {
            sum = sum + Send(Send(SYS,@GetMagicMod,#class=Nth(i,1)),@GetNumber,#iPower=Nth(i,2));
         }
      }

      return sum;
   }

   GetMeleeDamageBonus()
   {
      local i, sum;
      sum = 0;

      foreach i in plEnchantmentMods
      {
         if Nth(i,1) = &WeaponDamageMod
         {
            sum = sum + Nth(i,2);
         }
      }

      return sum;
   }

   WeaponHitTarget()
   {
      return;
   }

   GetPrefixes()
   {
      return [[&OffenseMod,100],
              [&PunchEmpowermentMod,100],
              [&WeaponDamageMod,100]];
   }
   
   GetSuffixes()
   {
      return [[&WeaponMightMod,100],
              [&WeaponAimMod,100],
              [&WeaponAgilityMod,100]];
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

