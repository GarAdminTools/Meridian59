% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FaerieBow is Bow

constants:

   include blakston.khd
   USED = 1
   UNUSED = 2
   ATTACKING = 3

resources:

   FaerieBow_name_rsc = "faerie bow"
   FaerieBow_desc_rsc = \
      "Expertly carved for flexibility and range, this bow gives you the "
      "envious advantage of a long ranged attack." 
   Faerie_bow_icon_rsc = fbow.bgf

   faerie_bow_top = fbowaov.bgf
   faerie_bow_bottom = fbowbov.bgf
   faerie_bow_window_overlay_rsc = povbow.bgf
   
   faerie_bow_in_hand = fbowinhand.bgf

% Probably need to make these for faerie bow
%   bow_top_faction = bwfaov.bgf
%   bow_bottom_faction = bwfbov.bgf
%   bow_window_overlay_faction_rsc = povbowf.bgf

classvars:

   vrName = FaerieBow_name_rsc
   vrDesc = FaerieBow_desc_rsc
   vrIcon = Faerie_bow_icon_rsc

   viWeaponDamage = 0
   viRange = 100 * FINENESS
   viHit_roll_modifier = 20

   viValue_average = 2500
   viBulk = 80
   viWeight = 70

   viSpell_modifier = 0

   % What's the basic color of the wood?
   viBaseXLAT = XLAT_TO_SKIN2

   vrWeapon_window_attack_start = 1
   vrWeapon_window_attack_end = 4
   vrWeapon_window_hold = 5

   viGround_group = 1
   viInventory_group = 3
   viBroken_group = 2

properties:

   prBowTop = faerie_bow_top
   prBowBottom = faerie_bow_bottom
   prBowOverlay = faerie_bow_window_overlay_rsc

   vrWeapon_window_overlay = faerie_bow_window_overlay_rsc
   vrWeapon_overlay = faerie_bow_in_hand

messages:

   WeaponAttack(what = $)
   "Called by ReqWeaponAttack when the weapon is actually used in an attack."
   {
      piUsed = ATTACKING;

      if vrWeapon_window_overlay <> $
      {
         Send(poOwner,@ChangeWindowOverlay,#what=self);
      }

      if vrWeapon_overlay <> $
      {
         Send(poOwner,@DoBowFire);
      }

      piUsed = USED;

      return;
   }

   NewUsed()
   {
      local oSoldierShield, iFaction, iTranslation;

      if poOwner <> $
         AND IsClass(poOwner,&User)
      {
         iFaction = FACTION_NEUTRAL;

         % Check for shield
         oSoldierShield = send(poOwner,@FindUsing,#class=&SoldierShield);

         % Sling it on the back if it's there.
         %  Also, record faction so we can set our bands if needed.
         if oSoldierShield <> $
         {
            iFaction = send(oSoldierShield,@GetFaction);
            send(oSoldierShield,@SlingOnBack);
         }

         prBowTop = faerie_bow_top;
         prBowBottom = faerie_bow_bottom;
         prBowOverlay = faerie_bow_window_overlay_rsc;
         % No faction translation
         iTranslation = 0;

         send(self,@UpdateColor,#iFactionColor=iTranslation);
      }

      vrWeapon_window_overlay = prBowOverlay;
      vrWeapon_overlay = faerie_bow_in_hand;

      propagate;
   }

   SendSecondaryOverlayAnimation(iAnimation = $)
   {
      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      if iAnimation <> $
         AND (piUsed = ATTACKING
            OR iAnimation = PANM_BOW_FIRE)
      {
         AddPacket(1,ANIMATE_ONCE,4,1200,2,1,2,1,2,2);

         return;
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,2);

         return;
      }

      return;
   }

   SendOverlayAnimation(ianimation = $)
   {
      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      if iAnimation <> $
         AND (piUsed = ATTACKING
            OR iAnimation = PANM_BOW_FIRE)
      {
         AddPacket(1,ANIMATE_ONCE,4,1200,2,1,2,1,2,2);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,2);
      }

      return;
   }

   GetNumberOverlays(iAnimation = $)
   {
      %% most overlay items only offer one overlay.  weapons and bows may offer two.
      if iAnimation <> $
         AND (piUsed = ATTACKING
            OR iAnimation = PANM_BOW_FIRE)
      {
         return 2;
      }

      propagate;
   }

   GetWindowOverlayHotspot()
   {
      % turns off the window overlay
      if piUsed = UNUSED
      {
         return 0;
      }

      return HS_SW;
   }

   GetDisarmBonus()
   {
      % Keep this a big negative.  Disarming with a bow is possible, just not likely. ;)
      return -90;
   }

   UpdateColor(iFactionColor=0)
   {
      local iTranslation;
      
      iTranslation = send(SYS,@EncodeTwoColorXlat,#color1=iFactionColor,#color2=viBaseXLAT);
      send(self,@SetPaletteTranslation,#translation=iTranslation);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
