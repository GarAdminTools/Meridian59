% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ScryingCrystal is PassiveItem

%
% Scrying Crystals have:
% 
% A base room based on tier
% 
% Up to 6 mods that make the area more difficult but increase drop rates of more scrying crystals
% Mods can be added or altered with shards
%
% areas have red sky

constants:

   include blakston.khd

resources:

   ScryingCrystal_icon_rsc = teardrop.bgf
   ScryingCrystal_name_rsc = "scrying crystal"
   ScryingCrystal_desc_base_rsc = \
      "Through the chaos deep below the earth, you see a small span of solid ground... "
      "a single step away, yet a great journey into a realm of dreams and madness. "

   ScryingCrystal_desc_with_room_rsc = \
      "Through the chaos deep below the earth, you see a small span of solid ground... "
      "only %i steps away, yet a great journey into a realm of dreams and madness. "
      "The crystal shows a shifting and twisted reflection of %s."
      "\n\nThe extreme danger of the area provides a %i%% chance of finding more "
      "scrying crystals within, so that the journey toward the heart of the void may continue."

classvars:
   
   vrName = ScryingCrystal_name_rsc
   vrDesc = ScryingCrystal_desc_base_rsc
   vrIcon = ScryingCrystal_icon_rsc

   viValue_average = 1500
   viWeight = 50
   viBulk = 50

properties:

   pRidBaseRoom = RID_TOS_CRYPT
   poBaseRoom = $
   plScryMods = $
   piChaosLevel = 40
   piTier = 1

messages:

   Constructor(iTier=1, iChaosLevel=40)
   {
      local lMapChoices;

      piChaosLevel = iChaosLevel;
      piTier = iTier;
      
      switch(iTier)
      {
         case 1:
            % The five main gates
            lMapChoices = [RID_H6,RID_I3,RID_G4,RID_C5,RID_F8];
            break;
         case 2:
            % Tos GY, Valley of Ileria, Faronath, Outskirts of Tos, Flatlands
            lMapChoices = [RID_TOS_GRAVEYARD, RID_D4, RID_C7, RID_I6, RID_H4];
            break;
         case 3:
            % Druid hills, the great ocean, Twisted wood, Tos Crypt, Source of the river ille
            lMapChoices = [RID_B6, RID_E2, RID_I7, RID_TOS_CRYPT, RID_F3];
            break;
         case 4:
            % East Cragged Mountains, West cragged mountains, Icky, the Hills, sandy shores of the great ocean
            lMapChoices = [RID_I8, RID_G8, RID_CAVE2, RID_A6, RID_F2];
            break;
         case 5:
            % Winding caverns, Ukgoth, Ugol's Warren, Seafarer's Peak, Bar sewers 1
            lMapChoices = [RID_NECROAREA1, RID_I9, RID_ORC_CAVE1, RID_A5, RID_BAR_SEWER];
            break;
      }
      
      if lMapChoices <> $
      {
         pRidBaseRoom = Nth(lMapChoices,Random(1,Length(lMapChoices)));
      }
      
      propagate;
   }
   
   Constructed()
   {
      if Send(self,@GetItemLevel) < 180
      {
         Send(self,@SetItemLevel,#iLevel=180+piChaosLevel);
      }
      propagate;
   }
   
   GetRidBaseRoom()
   {
      return pRidBaseRoom;
   }
   
   GetScryMods()
   {
      return plScryMods;
   }

   DoBaseDesc()
   {
      local oRoom;
      
      oRoom = Send(SYS,@FindRoomByNum,#num=pRidBaseRoom);
      
      if oRoom <> $
      {
         AddPacket(4, ScryingCrystal_desc_with_room_rsc, 4, piChaosLevel, 4,Send(oRoom,@GetName), 4, Send(Send(SYS,@GetChaosStrataMaintenance),@GetBaseScryingCrystalDropChance) + Send(self,@CalculateQuality));
      }
      else
      {
         AddPacket(4, ScryingCrystal_desc_base_rsc);  
      }

      return;
   }
   
   GetChaosLevel()
   {
      return piChaosLevel;
   }
   
   GetTier()
   {
      return piTier;
   }

   GetMinimapDotFlags()
   {
      % Special item, add minimap dot.
      return MM_RARE_ITEM;
   }
   
   DestroyDisposable()
   {
      return FALSE;
   }

   GetPrefixes()
   {
      return [[&MobFireDamage,100],
              [&MobColdDamage,100],
              [&MobShockDamage,100],
              [&MobAttackSpeed,100],
              [&MobMoveSpeed,100]];
   }

   GetSuffixes()
   {
      return [[&MobHealth,100],
              [&MobResists,100]];
   }
   
   CalculateQuality()
   {
      local i, iQuality;
      
      iQuality = 0;
      foreach i in Send(self,@GetMagicMods)
      {
         if Send(SYS,@GetGroupOfClassMod,#class=Nth(i,1)) = GROUP_MOBS_SPEED
         {
            iQuality = iQuality + Nth(i,2)/10;
         }
         else
         {
            iQuality = iQuality + Nth(i,2)*2;
         }
      }
      return iQuality;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

