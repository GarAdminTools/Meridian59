% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DeadBody is PassiveObject

constants:

   include blakston.khd
   include protocol.khd

resources:

   include body.lkod

   deadbody_desc_rsc = "This is a dead, decomposing %s, slain by %q."

   deadbody_named_mob_rsc = "The dead body of %s, slain by %q."
   
   deadbody_player_desc_rsc = \
      "The dead body of %q, decomposing quickly in the living air of Meridian."

   deadbody_assassinated_rsc = \
      "Here lies %q, slain by an unknown assassin."

   corpse_looting_max_reached = \
      "The maximum looting of singular items has been reached for this corpse."   
   
classvars:

   vrDesc = deadbody_desc_rsc
   vrPlayer_desc = deadbody_player_desc_rsc
   vrNamed_Mob_Desc = deadbody_named_mob_rsc

   vrAssassinated_desc = deadbody_assassinated_rsc
   viIndefinite = ARTICLE_A

properties:

   vrName
   vrIcon

   ptDelete = $
   ptNoSteal = $

   prMonster_name = $

   prPlayer_name = $
   pbWas_good_player = FALSE
   pbMob = FALSE
   pbNamedMob = FALSE
   pbAssassinated = FALSE

   piDrawfx = 0

   prPlayerBodyOverlay = $
   piBodyTrans = 0
   piLegsTrans = 0
   piGroup = 1

   poDearlyDeparted = $
   piTimeOfDeath = $

   pbResurrected = FALSE

   plCorpseContents = $
   poPlayerKiller = $
   
   ptSummonDelayTimer = $
   piSummonable = FALSE
   
   piNumSingularItemsTaken = 0
   
   % Of the form [monster class, loyalty, 0 (hit points, it's dead), health max, champion status, summoned status]
   plMonsterData = $
   poMasterWas = $

messages:

   % you gotta pass in name, icon, and description to constructor
   Constructor(victim = $,killer = $,inKocatan = FALSE, assassinated = FALSE,
         drawfx = 0, BodyTranslation = 0, LegsTranslation = 0, 
         PlayerBodyOverlay = $, Decomposes = TRUE)
   {
      vrName = Send(victim,@GetDeadName);
      vrIcon = Send(victim,@GetDeadIcon);
      pbMob = IsClass(victim,&Monster);
      piDrawfx = drawfx;
      pbAssassinated = assassinated;
      prPlayerBodyOverlay = PlayerBodyOverlay;
      piBodyTrans = BodyTranslation;
      piLegsTrans = LegsTranslation;      
      piTimeOfDeath = GetTime();

      if killer <> $
         AND IsClass(killer,&Player)
      {
         poPlayerKiller = killer;
      }

      if Decomposes
      {
         if pbMob
         {
            prPlayer_name = Send(killer,@GetTrueName);
            prmonster_name = Send(victim,@GetName);
            pbNamedMob = Send(victim,@IsNamedMob);
         }
         else
         {
            prPlayer_name = Send(victim,@GetName);
            pbWas_good_player = (Send(victim,@GetKarma) > 0); 
            poDearlyDeparted = victim;
         }
      }
      
      if pbMob
      { 
         ptDelete = CreateTimer(self,@DeleteTimerMessage,120000);
      }
      else
      {
         % Make player corpses hang around longer.
         ptDelete = CreateTimer(self,@DeleteTimerMessage,9000000);	    
         Send(Send(SYS,@Findroombynum,#num=RID_UNDERWORLD),@Newdeath,#what=self,#inKocatan=inKocatan);
      }

      % only the killer can pick up things for the first 25 seconds.
      ptNoSteal = CreateTimer(self,@NoStealTimer,25000);
      
      if NOT pbMob
      {
         % corpse cannot be summoned for 3 minutes
         ptSummonDelayTimer = CreateTimer(self,@SummonDelayTimer,60000 * 3);
      }

      propagate;
   }

   SummonDelayTimer()
   {
      ptSummonDelayTimer = $;

      piSummonable = TRUE;

      return;
   }

   GetSummonTime()
   {
      if ptSummonDelayTimer <> $
      {
         return GetTimeRemaining(ptSummonDelayTimer);
      }

      return 0;
   }

   GetPbMob()
   {
      return pbMob;
   }

   GetSummonable()
   {
      return piSummonable;
   }

   NoStealTimer()
   {
      ptNoSteal = $;

      return;
   }

   CanGetMe(what=$)
   {
      if ptNoSteal = $
      {
         return TRUE;
      }
      
      if send(what,@GetTrueName) = prPlayer_name
      {
         return TRUE;
      }
         
      return FALSE;
   }

   GetCorpseName()
   {
      return prPlayer_Name;
   }

   Delete()
   {
      local i;
      
      if poDearlyDeparted <> $
      {
         Send(poDearlyDeparted,@RemoveCorpse,#corpse=self);
         poDearlyDeparted = $;
      }

      if ptDelete <> $
      {
         Send(Send(SYS,@FindRoomByNum,#num=RID_UNDERWORLD),@CorpseDecomposed,#what=self);
         DeleteTimer(ptDelete);
         ptDelete = $;
      }
      
      if ptNoSteal <> $
      {
         DeleteTimer(ptNoSteal);
         ptNoSteal=$;
      }

      if ptSummonDelayTimer <> $
      {
         DeleteTimer(ptSummonDelayTimer);
         ptSummonDelayTimer=$;
      }

      if poOwner <> $
      {
         send(poOwner,@CorpseFading,#corpse=self);
      }

      foreach i in plCorpseContents
      {
         Send(i,@Delete);
      }
      plCorpseContents = $;

      propagate;
   }

   DeleteTimerMessage()
   {
      ptDelete = $;
      Send(self,@Delete);
      
      return;
   }

   DestroyDisposable()
   {
      return;
   }

   ShowDesc()
   {
      % need to do STRING_RESOURCE for names because player might not be logged in
      if pbMob
      {
         if NOT pbNamedMob
         {
            AddPacket(4,vrDesc, 4,prMonster_name, STRING_RESOURCE,prPlayer_name);
         
            return;
         }
         else
         {
            AddPacket(4,vrNamed_Mob_Desc, 4,prMonster_name, STRING_RESOURCE,prPlayer_name);
         
            return;
         }
      }
      
      if pbAssassinated
      {
	      AddPacket(4,vrAssassinated_desc, STRING_RESOURCE,prPlayer_name);
      }
      
      AddPacket(4,vrPlayer_desc, STRING_RESOURCE,prPlayer_name);

      return;
   }

   WasGoodPlayer()
   {
      if pbMob
      {
         return TRUE;
      }

      return pbWas_good_player;
   }

   WasPlayer()
   {
      return (NOT pbMob);
   }

   SendAnimation()
   {
      if piBodyTrans <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piBodyTrans);
      }
      
      AddPacket(1,ANIMATE_NONE, 2,1);
      
      return;
   }

   SendOverlays()
   {
      if (prPlayerBodyOverlay <> $)
      {
         % one overlay
         AddPacket(1,1);
         % hotspot = 1
         AddPacket(4,prPlayerBodyOverlay, 1,1);
         
         if piLegsTrans <> 0
         {
            AddPacket(1,ANIMATE_TRANSLATION, 1,piLegsTrans);
         }
         
         AddPacket(1,ANIMATE_NONE, 2,1);
         
         return;
      }
      
      propagate;
   }

   GetPlayerKiller()
   {
      return poPlayerKiller;
   }

   GetDearlyDeparted()
   {
      return poDearlyDeparted;
   }

   GetTimeOfDeath()
   {
      return piTimeOfDeath;
   }

   % Next two messages are for portal of life.  Checks if the body was resurrected
   %   already or not, to prevent multiple castings.
   SetResurrected()
   {
      pbResurrected = TRUE;
      
      return;
   }

   GetResurrected()
   {
      return pbResurrected;
   }

   GetCorpseContents()
   {
      return plCorpseContents;
   }

   HolderExtractObject(data = $)
   {
      return data;
   }

   IsHolding(what = $)
   {
      local i,each_obj;

      foreach i in plCorpseContents
      {
         if what = i
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   GetBulk()
   {
      local i, iSum;

      iSum = 0;
      
      foreach i in plCorpseContents
      {
         iSum = iSum + Send(i,@GetBulk);
      }

      return iSum;
   }

   GetWeight()
   {
      local i, iSum;

      iSum = 0;

      foreach i in plCorpseContents
      {
         iSum = iSum + Send(i,@GetWeight);
      }

      return iSum;
   }

   ReqTaker(what=$,taker=$)
   {
      if poOwner <> Send(taker,@GetOwner)
      {
         return FALSE;
      }

      if Send(taker,@SquaredDistanceTo,#what=self) = $
         OR Send(taker,@SquaredDistanceTo,#what=self) > 6
      {
         return FALSE;
      }

      if taker = poDearlyDeparted
         OR (Send(poDearlyDeparted,@GetGuild) <> $
            AND Send(poDearlyDeparted,@GetGuild) = Send(taker,@GetGuild))
      {
         return TRUE;
      }

      if taker <> $
         AND IsClass(taker,&Player)
         AND NOT IsClass(what,&NumberItem)
      {
         if piNumSingularItemsTaken >= Send(SETTINGS_OBJECT,@GetSingularItemsLootMax)
         {
            Send(taker,@MsgSendUser,#message_rsc=corpse_looting_max_reached);
            return FALSE;
         }
      }

      if poPlayerKiller <> $
         AND taker <> poPlayerKiller
      {
         return FALSE;
      }

      return TRUE;
   }
   
   TookASingularItem()
   {
      piNumSingularItemsTaken++;
      return;
   }

   ReqNewHold(what = $, who = $)
   {
      return FALSE;
   }

   NewHold(what = $)
   {
      local i;

      if IsClass(what,&NumberItem)
      {
         foreach i in plCorpseContents
         {
            if i <> what
            {
               if GetClass(what) = GetClass(i)
               {
                  % should only be one of these, so can quit loop if found
                  Send(i,@AddNumber,#number=Send(what,@GetNumber));
                  Send(what,@Delete);
                  return;
               }
            }
         }
      }

      Send(what,@NewOwner,#what=self);
      plCorpseContents = Cons(what,plCorpseContents);
      
      return;
   }
   
   ReqNewOwner(what=$)
   {
      propagate;
   }

   ReqLeaveHold(what = $)
   {
      return TRUE;
   }

   LeaveHold(what = $)
   {
      local i;
      
      foreach i in plCorpseContents
      {
         if i = what
         {
            plCorpseContents = DelListElem(plCorpseContents,i);
         }
      }

      return;
   }
   
   ChangeBulkAndWeight()
   {
      return;
   }

   SetPlayerLegs()
   {
      return;
   }
   
   SetMonsterData(lMonsterData=$)
   {
      plMonsterData = lMonsterData;
      return;
   }
   
   GetMonsterData()
   {
      return plMonsterData;
   }
   
   SetMasterWas(oMaster=$)
   {
      poMasterWas = oMaster;
      return;
   }
   
   GetMasterWas()
   {
      return poMasterWas;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
