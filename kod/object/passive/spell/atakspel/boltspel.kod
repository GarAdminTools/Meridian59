% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BoltSpell is AttackSpell

% Generic ranged "bolt" spell, such as lightning or slitherbolt

constants:

   include blakston.khd

resources:

classvars:

   vrProjectile_Icon = $

   vbIsRangedAttack = TRUE

   viProjectileFlag = PROJ_FLAG_LIGHT_SOURCE

   % Projectile lighting information.
   viProjectileLightFlags = LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC
   % Medium light range, out of 255.
   viProjectileLightIntensity = 100
   % Default color is lightning.
   viProjectileLightColor = LIGHT_LIGHTNING

   viChance_To_Increase = 20
   viMeditate_ratio = 40

   viProjectileSpeed = 5

properties:

   piRange = 40 * FINENESS

   % Maximum amount of bonus damage mana focus gives us for casting this spell.
   piManaFocusBonus = 10

messages:

   CastSpell(who=$,lTargets=$,bChainCast=FALSE,bSecondaryCast=FALSE,oDeflectImpact=$,bDeflectCast=FALSE)
   {
      local oOwner, i, iDeflectSpeed;

      oOwner = Send(who,@GetOwner);

      % Show bolt flying through the air.
      foreach i in lTargets
      {
         if NOT bSecondaryCast
         {
            if oDeflectImpact <> $
            {
               % Don't send to oDeflectImpact, it's not a NoMoveOn!
               iDeflectSpeed = Send(who,@SquaredFineDistanceTo,#what=oDeflectImpact);
               
               if iDeflectSpeed = 0
               {
                  iDeflectSpeed = $;
               }

               if iDeflectSpeed <> $
               {
                  iDeflectSpeed = (Sqrt(iDeflectSpeed) / 64) * 2;
               }

               Send(oOwner,@SomethingShot,#who=who,#target=oDeflectImpact,#projectile=self,
                     #flags=viProjectileFlag,#iDeflectSpeed=iDeflectSpeed);
            }
            else
            {
               Send(oOwner,@SomethingShot,#who=who,#target=i,#projectile=self,
                     #flags=viProjectileFlag);
            }
         }
      }

      propagate;
   }

   % Return the icon used to display a spell shooting through the air.
   GetProjectileIcon()
   {
      return vrProjectile_Icon;
   }

   % Return the speed at which a particular spell should appear to shoot through the air.
   GetProjectileSpeed(who=$, target=$)
   {
      local iDist;

      if who <> $
         AND target <> $
      {
         % only NoMoveOns can calculate distances
         if IsClass(who,&NoMoveOn)
         {
            iDist = Send(who,@SquaredFineDistanceTo,#what=target);
         }
         else if IsClass(target,&NoMoveOn)
         {
            iDist = Send(target,@SquaredFineDistanceTo,#what=who);
         }
         else
         {
            % Neither is a NoMoveOn? Give up!
            return viProjectileSpeed;
         }

         if iDist <> $
            AND iDist <> 0
         {
            iDist = Sqrt(iDist);

            % Check sqrt value for 0
            if iDist = 0
            {
               return viProjectileSpeed;
            }
            else
            {
               return Bound((iDist / 64) * 2,viProjectileSpeed,$);
            }
         }
      }
      return viProjectileSpeed;
   }

   SendProjectileAnimation()
   {
      % Send animation info to user.  Default is no animation, display with group 1
      AddPacket(1,ANIMATE_NONE, 2,1);

      return;
   }

   GetProjectileLightFlags()
   {
      return viProjectileLightFlags;
   }

   GetProjectileLightIntensity()
   {
      return viProjectileLightIntensity;
   }

   GetProjectileLightColor()
   {
      return viProjectileLightColor;
   }

   % For secondary effects such as splash or chain
   
   GetAlternateProjectileLightColor()
   {
      return viProjectileLightColor;
   }
   
   GetAlternateProjectileIcon()
   {
      return vrProjectile_Icon;
   }
   
   SendAlternateProjectileAnimation()
   {
      Send(self,@SendProjectileAnimation);
      return;
   }
   
   GetAlternateProjectileSpeed()
   {
      return Send(self,@GetProjectileSpeed);
   }
   
   GetAlternateProjectileLightFlags()
   {
      return viProjectileLightFlags;
   }
   
   GetAlternateProjectileLightIntensity()
   {
      return viProjectileLightIntensity;
   }

   GetProjectileFlag()
   {
      return viProjectileFlag;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
