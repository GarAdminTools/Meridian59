% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Lightning is BoltSpell

constants:
   include blakston.khd

resources:

   include lightnin.lkod

   lightning_name_rsc = "lightning bolt"
   lightning_icon_rsc = lightnin.bgf
   lightning_look_icon = ilitning.bgf
   lightning_hit_rsc = "Lightning strikes %s%s!"
   lightning_desc_rsc = \
      "Hurls a bolt of lightning at the target.  "
      "Requires blue mushrooms and orc teeth to cast."
   lightning_mastered_desc_rsc = \
      "Hurls a bolt of lightning at the target. Requires blue mushrooms and orc teeth to cast.\n\n"
      "You possess exceptional mastery of this spell, allowing your lightning bolt to chain to the nearest "
      "enemy in line of sight from your target. You do not need line of sight to the chained victim, "
      "allowing your lightning to strike around corners. This ability also prioritizes enemy adventurers, "
      "so monsters will only be struck if there are no valid enemy players in range."

   your_bolt_chains = \
      "Your mastered lightning bolt chains to another enemy!"

   lightning_sound = fbolt.wav

classvars:
   vrName = lightning_name_rsc
   vrIcon = lightning_look_icon
   vrDesc = lightning_desc_rsc
   vrProjectile_icon = lightning_icon_rsc

   viSpell_num = SID_LIGHTNING_BOLT

   viAttack_spell = ATCK_SPELL_ALL+ATCK_SPELL_SHOCK

   viMana = 10
   viSchool = SS_FAREN
   viSpell_level = 5

   viChance_To_Increase = 15
   viMeditate_ratio = 50

   vrSucceed_wav = lightning_sound

   viPostCast_time = 2        % in seconds, since it works off gettime()

   % Projectile lighting information.
   viProjectileLightFlags = LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC
   % Medium light range, out of 255.
   viProjectileLightIntensity = 100
   % Color is lightning.
   viProjectileLightColor = LIGHT_LIGHTNING

properties:

   piDamageMin = 13
   piDamageMax = 18
   prSpellHit = lightning_hit_rsc

messages:


   ResetReagents()
   {
      % separate message so can change, then set from admin mode

      plReagents = $;
      plReagents = Cons([&BlueMushroom,2],plReagents);
      plReagents = Cons([&OrcTooth,1],plReagents);

      return;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0,bSecondaryCast=FALSE)
   {
      local oOwner, i, each_obj, oChainTarget, lBattlers, iClosestDist, iCurDist;

      if Send(who,@HasMasteredThisSpell,#num=viSpell_num)
         AND NOT bSecondaryCast
      {
         oOwner = Send(who,@GetOwner);
         lBattlers = $;

         % For our chain target, we attempt to find a closest enemy player first.
         %    This enemy player must be in line of sight from the enemy target,
         %    not the caster. In other words, this can chain around corners.
         % If there are no enemy players, then we look at monsters the same way.
         
         foreach i in Send(oOwner,@GetHolderActive)
         {
            each_obj = Send(oOwner,@HolderExtractObject,#data=i);
            if IsClass(each_obj,&Player)
               AND each_obj <> who
               AND each_obj <> First(lTargets)
               AND Send(oOwner,@LineOfSight,#obj1=First(lTargets),#obj2=each_obj)
               AND Send(who,@AllowPlayerAttack,#victim=each_obj,#report=FALSE,#actual=FALSE)
            {
               lBattlers = Cons(each_obj,lBattlers);
            }
         }
         
         if lBattlers = $
         {
            foreach i in Send(oOwner,@GetHolderActive)
            {
               each_obj = Send(oOwner,@HolderExtractObject,#data=i);
               if IsClass(each_obj,&Monster)
                  AND each_obj <> First(lTargets)
                  AND Send(oOwner,@LineOfSight,#obj1=First(lTargets),#obj2=each_obj)
                  AND Send(who,@AllowPlayerAttack,#victim=each_obj,#report=FALSE,#actual=FALSE)
               {
                  lBattlers = Cons(each_obj,lBattlers);
               }
            }
         }
         
         if lBattlers = $
         {
            % No suitable enemy players or monsters in line of sight from target
            propagate;
         }

         oChainTarget = $;
         iClosestDist = 999999;
         iCurDist = 1000000;
         foreach i in lBattlers
         {
            iCurDist = Send(First(lTargets),@SquaredFineDistanceTo3D,#what=i);
            if iCurDist < iClosestDist
            {
               oChainTarget = i;
               iClosestDist = iCurDist;
            }
         }
         
         % Show bolt from target to new target
         if oChainTarget <> $
         {
            Send(oOwner,@SomethingShot,#who=First(lTargets),#target=oChainTarget,#projectile=self,#flags=viProjectileFlag);
            Post(who,@MsgSendUser,#message_rsc=your_bolt_chains);
            Post(self,@CastSpell,#who=who,#lTargets=[oChainTarget],#iSpellPower=iSpellPower,#bSecondaryCast=TRUE);
         }
      }

      propagate;
   }

   GetProjectileSpeed()
   {
      return 12;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 2, 2, 3);   % 40ms between animations
      return;
   }

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
