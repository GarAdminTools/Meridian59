% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Dazzle is Debuff

constants:

   include blakston.khd

resources:

   include dazzle.lkod

   Dazzle_name_rsc = "dazzle"
   Dazzle_icon_rsc = idazzle.bgf
   Dazzle_desc_rsc = \
      "Dazzles the target with the blinding light of Shal'ille's goodness.  "
      "Requires an emerald and a purple mushroom to cast."
   
   Dazzle_caster = "%s%s is now dazzled."
   Dazzle_already_enchanted = "%s%s is already dazzled."

   Dazzle_on = "The world is washed away in a flood of pure light."
   Dazzle_off = "Your vision begins to clear."

   Dazzle_sound = sDazzle.wav

   % Not implemented yet
   dazzle_player_rsc = holdrings.bgf

   dazzle_star_projectile_rsc = dazzlestar.bgf

classvars:

   vrName = Dazzle_name_rsc
   vrIcon = Dazzle_icon_rsc
   vrDesc = Dazzle_desc_rsc

   vrAlreadyEnchanted = Dazzle_already_enchanted
   vrEnchantment_On = Dazzle_on
   vrEnchantment_Off = Dazzle_off
   vrSuccess = Dazzle_caster

   viSpell_num = SID_DAZZLE
   viSchool = SS_SHALILLE
   viSpell_level = 4
   viMana = 12
   viChance_To_Increase = 15
   viMeditate_ratio = 40

   viSpellExertion = 3

   vrSucceed_wav = Dazzle_sound
   
   viPrimaryStat = STAT_ID_MYSTICISM
   viSecondaryStat = STAT_ID_KARMA
   
   vrProjectile_Icon = dazzle_star_projectile_rsc
   viProjectileFlag = PROJ_FLAG_LIGHT_SOURCE

   % Projectile lighting information.
   viProjectileLightFlags = LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC
   % Medium light range, out of 255.
   viProjectileLightIntensity = 255
   % Default color is lightning.
   viProjectileLightColor = LIGHT_WHITE

   viProjectileSpeed = 5

   vrBlindRings = dazzle_player_rsc

   viLayer = 9

properties:

   piSpellPowerMultiplier = 40
   piKarmaPowerMultiplier = 10
   piBaseDuration = 3000
   piDeviation = 10

   % Min and max values for Dazzle duration.
   piMinDazzle = 3000
   piMaxDazzle = 10000
   piMonsterMinDazzle = 500

   % Duration of the red pain effect after spell wears off.
   piPainDuration = 1000

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Emerald,1],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   CastSpell(who=$,wielder=$,lTargets=$,iSpellPower=0,oDeflectImpact=$,bDeflectCast=FALSE)
   {
      local oTarget, oRoom, i, iDeflectSpeed, iDuration;

      oTarget = First(lTargets);
      % Is this a proc from a weapon?
      if wielder = $
      {
         oRoom = Send(who,@GetOwner);
         if oDeflectImpact <> $
         {
            % Don't send to oDeflectImpact, it's not a NoMoveOn!
            iDeflectSpeed = Send(who,@SquaredFineDistanceTo,#what=oDeflectImpact);
               
            if iDeflectSpeed = 0
            {
               iDeflectSpeed = $;
            }

            if iDeflectSpeed <> $
            {
               iDeflectSpeed = (Sqrt(iDeflectSpeed) / 64) * 2;
            }
            Send(oRoom,@SomethingShot,#who=who,#target=oDeflectImpact,#projectile=self,#flags=viProjectileFlag,#iDeflectSpeed=iDeflectSpeed);
         }
         else
         {
            Send(oRoom,@SomethingShot,#who=who,#target=oTarget,#projectile=self,#flags=viProjectileFlag);
         }
      }
      else
      {
         oRoom = Send(wielder,@GetOwner);
         if oDeflectImpact <> $
         {
            % Don't send to oDeflectImpact, it's not a NoMoveOn!
            iDeflectSpeed = Send(wielder,@SquaredFineDistanceTo,#what=oDeflectImpact);
               
            if iDeflectSpeed = 0
            {
               iDeflectSpeed = $;
            }

            if iDeflectSpeed <> $
            {
               iDeflectSpeed = (Sqrt(iDeflectSpeed) / 64) * 2;
            }
            Send(oRoom,@SomethingShot,#who=wielder,#target=oDeflectImpact,#projectile=self,#flags=viProjectileFlag,#iDeflectSpeed=iDeflectSpeed);
         }
         else
         {
            Send(oRoom,@SomethingShot,#who=wielder,#target=oTarget,#projectile=self,#flags=viProjectileFlag);
         }
      }

      iDuration = Send(self,@GetDuration,#iSpellPower=iSpellPower,
                        #caster=who,#target=oTarget);

      Send(self,@DoSpell,#what=who,#oTarget=oTarget,#iDuration=iDuration);

      propagate;
   }

   DoSpell(what=$,oTarget=$,iDuration=0)
   {
      local oSpell;

      oSpell = Send(SYS,@FindSpellByNum,#NUM=SID_EAGLE_EYES);
      if Send(oTarget,@IsEnchanted,#what=oSpell)
      {
         iDuration = Send(oSpell,@DoEagleEyes,#oCaster=what,#oTarget=oTarget,
                           #iDuration=iDuration,#iFactor=2);
         if iDuration = $
         {
            % Resisted completely.
            return;
         }
      }

      iDuration = (iDuration * (100-Send(oTarget,@GetBlindResistance)))/100;

      if IsClass(oTarget,&Player)
      {
         % Re-check the bound on duration.
         iDuration = Bound(iDuration,piMinDazzle,piMaxDazzle);
         Send(oTarget,@MsgSendUser,#message_rsc=vrEnchantment_On);
         Send(oTarget,@EffectSendUserDuration,#effect=EFFECT_WHITEOUT,
               #duration=iDuration);
      }
      else
      {
         % Class is Monster
         % Re-check the bound on duration.
         iDuration = Bound(iDuration,piMonsterMinDazzle,piMaxDazzle);
         Post(oTarget,@ResetBehaviorFlags);
      }

      Send(what,@MsgSendUser,#message_rsc=vrSuccess,
            #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));
      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);

      propagate;
   }

   GetDuration(iSpellPower=0,caster=$,target=$)
   {
      local iDuration, iKarmaDif, iKarma, iTargetKarma;

      % 1-8 seconds based on spellpower. Recommended 3-7.
      iDuration = piBaseDuration + iSpellPower * piSpellPowerMultiplier;

      if IsClass(caster,&Battler)
      {
         iKarma = Send(caster,@GetKarma);
      }
      else
      {
         % Non battlers, like the sun
         iKarma = Random(30,90);
      }

      iTargetKarma = Send(target,@GetKarma,#detect=TRUE);

      iKarmaDif = iKarma - iTargetKarma;

      % Add 1-10 seconds based on karma difference.
      iDuration = Bound(iDuration + (iKarmaDif * piKarmaPowerMultiplier),
                        piMinDazzle,piMaxDazzle);

      % Add any random duration.
      iDuration = Random(iDuration * (100 - piDeviation) / 100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,report=TRUE)
   {
      if IsClass(who,&Player)
      {
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=vrEnchantment_Off);
         }

         Send(who,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=piPainDuration);
         Send(who,@EffectSendUserXLat,#xlat=0);
      }
      else
      {
         % Class is monster
         % Post this so it's done AFTER the enchantment is gone from the
         % monster's ench list
         Post(who,@ResetBehaviorFlags);
      }

      return;
   }

   SetSpellPlayerFlag(who=$)
   {
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);

      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      local i, iDuration, oList;

      Send(who,@MsgSendUser,#message_rsc=vrEnchantment_On);

      oList = Send(who,@GetEnchantmentList);

      foreach i in oList
      {
         if Nth(i,2) = self
         {
            iDuration = GetTimeRemaining(Nth(i,1));
         }
      }

      Send(who,@EffectSendUserDuration,#effect=EFFECT_WHITEOUT,
            #duration=iDuration);

      return;
   }

   ModifyMonsterBehavior(mob=$)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_RANDOM,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_NOFIGHT,#value=TRUE);

      return;
   }

   % Return the icon used to display a spell shooting through the air.
   GetProjectileIcon()
   {
      return vrProjectile_Icon;
   }

   % Return the speed at which a particular spell should appear to shoot through the air.
   GetProjectileSpeed(who=$, target=$)
   {
      local iDist;

      if who <> $
         AND target <> $
      {
         % only NoMoveOns can calculate distances
         if IsClass(who,&NoMoveOn)
         {
            iDist = Send(who,@SquaredFineDistanceTo,#what=target);
         }
         else if IsClass(target,&NoMoveOn)
         {
            iDist = Send(target,@SquaredFineDistanceTo,#what=who);
         }
         else
         {
            % Neither is a NoMoveOn? Give up!
            return viProjectileSpeed;
         }

         if iDist <> $
            AND iDist <> 0
         {
            iDist = Sqrt(iDist);

            % Check sqrt value for 0
            if iDist = 0
            {
               return viProjectileSpeed;
            }
            else
            {
               return Bound((iDist / 64) * 2,viProjectileSpeed,$);
            }
         }
      }
      return viProjectileSpeed;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 60, 2, 1, 2, 9);   % 60ms between animations
      return;
   }

   GetProjectileLightFlags()
   {
      return viProjectileLightFlags;
   }

   GetProjectileLightIntensity()
   {
      return viProjectileLightIntensity;
   }

   GetProjectileLightColor()
   {
      return viProjectileLightColor;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
