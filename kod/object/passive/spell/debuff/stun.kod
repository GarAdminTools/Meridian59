% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Stun is Debuff

constants:

   include blakston.khd

resources:

   Stun_name_rsc = "stun"
   Stun_icon_rsc = ivertigo.bgf
   Stun_desc_rsc = \
      "You are stunned!"

   Stun_caster = "%s%s reels from a stunning impact."
   Stun_already_enchanted = "%s%s is already stunned."

   Stun_on = \
      "~BYour awareness trembles!"
   Stun_off = "~BThe stun fades."

   Stun_sound = rvertigo.wav

classvars:

   vrName = Stun_name_rsc
   vrIcon = Stun_icon_rsc
   vrDesc = Stun_desc_rsc

   vrAlreadyEnchanted = Stun_already_enchanted
   vrEnchantment_On = Stun_on
   vrEnchantment_Off = Stun_off
   vrSuccess = Stun_caster

   viSpell_num = SID_STUN
   viSchool = SKS_FENCING
   viSpell_level = 1
   viMana = 0
   viSpellExertion = 0

   viChance_to_increase = 0
   viMeditate_ratio = 0

   vrSucceed_wav = Stun_sound

properties:

   piBaseDuration = 3000
   piSpellPowerModifier = 101
   piDeviation = 10

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget;

      oTarget = First(lTargets);

      Send(self,@DoSpell,#oTarget=oTarget,#iSpellPower=iSpellPower,
           #iDuration=Send(self,@GetDuration,#iSpellPower=iSpellPower));

      propagate;
   }

   DoSpell(oTarget=$,iDuration=0,iSpellPower=$)
   {
      % Spell effects
      if IsClass(oTarget,&Player)
      {
         Send(oTarget,@MsgSendUser,#message_rsc=vrEnchantment_On);
         Send(oTarget,@EffectSendUserDuration,#effect=EFFECT_BLUR,#duration=iDuration);
         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);
      }
      else
      {
         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);
         Send(oTarget,@ResetBehaviorFlags);
      }

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      % Duration calculation now uses class properties, modifiable in game
      % By default, base duration 4000ms, total time 4000-14000ms using 101x
      % spellpower multiplier, with the final duration 90-100% max

      iDuration = (piBaseDuration + (iSpellPower+1)*piSpellPowerModifier);
      iDuration = random(iDuration*(100-piDeviation)/100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,state=$,report=TRUE)
   {
      if IsClass(who,&Player)
      {
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=vrEnchantment_Off);
         }
      }
      else
      {
         Post(who,@ResetBehaviorFlags);
      }

      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      local i, iDuration, oList;

      oList = Send(who,@GetEnchantmentList);

      foreach i in oList
      {
         if Nth(i,2) = self
         {
            iDuration = GetTimeRemaining(Nth(i,1));
         }
      }

      Send(who,@MsgSendUser,#message_rsc=vrEnchantment_On);
      Send(who,@EffectSendUserDuration,#effect=EFFECT_BLUR,#duration=iDuration);

      return;
   }

   SetSpellPlayerFlag(who=$)
   {
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
      Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
