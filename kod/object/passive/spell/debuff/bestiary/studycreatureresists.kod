% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
StudyCreatureResists is BestiarySpell

constants:

   include blakston.khd

resources:

   study_creature_resists_sound = rperappr.wav

   study_creature_resists_name_rsc = "study physicals"
   study_creature_resists_icon_rsc = iexfrost.bgf
   study_creature_resists_desc_rsc = \
      "Studying a creature will allow you to determine what "
      "elements it can or cannot resist. "
      "Requires a purple mushroom to cast."

   study_creature_resists_already_enchanted = "%s%s has already been studied."
   study_creature_resists_caster = "%s%s becomes clearer to you."
   study_creature_resists_refuses = "%s%s does not become clearer to you."
   study_creature_resists_on = "Someone is trying to study you."
   study_creature_resists_off = "You are no longer being studied."

   study_creature_resists = \
      "%s%s has %i%% %s."

   not_capable_of_resisting = \
      "%s%s has no special resistances."

classvars:

   vrName = study_creature_resists_name_rsc
   vrIcon = study_creature_resists_icon_rsc
   vrDesc = study_creature_resists_desc_rsc

   vrAlreadyEnchanted = study_creature_resists_already_enchanted
   vrEnchantment_On = study_creature_resists_on
   vrEnchantment_Off = study_creature_resists_off
   vrSuccess = study_creature_resists_caster
   vrFail = study_creature_resists_refuses

   viSchool = SS_BESTIARY
   viSpell_num = SID_STUDY_CREATURE_RESISTS
   viSpell_level = 2

   viFlash = FLASH_BAD

   viSpellExertion = 2
   viMana = 2

   viChance_To_Increase = 10
   viMeditate_ratio = 50

   vrSucceed_wav = study_creature_resists_sound
   
   viPrimaryStat = STAT_ID_INTELLECT
   viSecondaryStat = 0

   vbIsRangedAttack = FALSE

   viOutlaw = FALSE
   viHarmful = FALSE


properties:

   piBaseDuration = 180000 % Recommended value 2000.
   piSpellPowerModifier = 1000 % Recommended value 30.
   piDeviation = 50 % Recommended value 10%.
   viCast_time = 0 % Recommended value 600 (milliseconds).

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {
      local oMaster, oTarget;

      oTarget = First(lTargets);

      if NOT IsClass(oTarget,&Monster)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target,#parm1=vrName,
                  #parm2=Send(oTarget,@GetDef),#parm3=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,wielder=$,lTargets=$,iSpellpower=0,report=TRUE,oDeflectImpact=$,bDeflectCast=FALSE)
   {
      local oTarget, oRoom, i;

      oTarget = First(lTargets);

      % Spell effects.
      Send(self,@DoSpell,#what=who,#oTarget=oTarget,#report=report,
            #iDuration=Send(self,@GetDuration,#iSpellPower=iSpellPower));

      propagate;
   }

   DoSpell(what=$,oTarget=$,iDuration=$,report=TRUE)
   "Holds target for duration seconds."
   {
      local i, lResistances, bFound;

      if oTarget = $
      {
         return FALSE;
      }

      % Check for enchantment already applied
      if Send(oTarget,@IsEnchanted,#what=self)
      {
         return FALSE;
      }

      % Check for spell called with $ iDuration, apply default time if so.
      if iDuration = $
      {
         iDuration = 500000;
      }

      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#report=report,
            #state=report);

      if IsClass(oTarget,&Monster)
      {
         bFound = FALSE;

         lResistances = Send(oTarget,@GetCurrentResistances);
         
         foreach i in lResistances
         {
            bFound = TRUE;
            Send(what,@MsgSendUser,#message_rsc=study_creature_resists,
                                   #parm1=Send(oTarget,@GetCapDef),
                                   #parm2=Send(oTarget,@GetName),
                                   #parm3=Nth(i,2),
                                   #parm4=Send(SYS,@GetResistanceName,#type=First(i)));
         }
         
         if NOT bFound
         {
            Send(what,@MsgSendUser,#message_rsc=not_capable_of_resisting,
                                   #parm1=Send(oTarget,@GetCapDef),
                                   #parm2=Send(oTarget,@GetName));
         }
      }

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = piBaseDuration + iSpellPower * piSpellPowerModifier;
      iDuration = Random(iDuration * (100 - piDeviation) / 100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,report=TRUE,state=$)
   {
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
