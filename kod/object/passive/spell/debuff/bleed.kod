% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bleed is Debuff

constants:

   include blakston.khd

resources:

   Bleed_name_rsc = "bleed"
   Bleed_icon_rsc = ibloodrunes.bgf
   Bleed_desc_rsc = \
      "You are bleeding!"

   Bleed_caster = "%s%s begins to bleed."
   Bleed_already_enchanted = "%s%s is already bleeding."

   Bleed_on = \
      "~BYou begin to bleed!"
   Bleed_off = "~BYour bleeding abates somewhat."

classvars:

   vrName = Bleed_name_rsc
   vrIcon = Bleed_icon_rsc
   vrDesc = Bleed_desc_rsc

   vrAlreadyEnchanted = Bleed_already_enchanted
   vrEnchantment_On = Bleed_on
   vrEnchantment_Off = Bleed_off
   vrSuccess = Bleed_caster

   viSpell_num = SID_BLEED
   viSchool = SKS_FENCING
   viSpell_level = 1
   viMana = 0
   viSpellExertion = 0

   viChance_to_increase = 0
   viMeditate_ratio = 0

   vrSucceed_wav = $
   viOutlaw = FALSE

properties:

   piBaseDuration = 3000
   piSpellPowerModifier = 101
   piDeviation = 10

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget;

      oTarget = First(lTargets);

      Send(self,@DoSpell,#oTarget=oTarget,#iSpellPower=iSpellPower,
           #iDuration=Send(self,@GetDuration,#iSpellPower=iSpellPower));

      propagate;
   }

   DoSpell(oTarget=$,iDuration=0,iSpellPower=$,bleed_applier=$)
   {
      local iBleedPower;
      
      iBleedPower = 0;
      if bleed_applier <> $
         AND IsClass(bleed_applier,&Player)
      {
         iBleedPower = Send(bleed_applier,@GetSkillAbility,#Skill_num=SKID_BLEED_MASTERY);
      }

      % Spell effects
      if IsClass(oTarget,&Player)
      {
         Send(oTarget,@MsgSendUser,#message_rsc=vrEnchantment_On);
         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#iSpellPower=iBleedPower);
         Send(oTarget,@StartBleedTimer);
      }
      else
      {
         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#iSpellPower=iBleedPower);
         Send(oTarget,@StartBleedTimer);
      }

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      % Duration calculation now uses class properties, modifiable in game
      % By default, base duration 4000ms, total time 4000-14000ms using 101x
      % spellpower multiplier, with the final duration 90-100% max

      iDuration = (piBaseDuration + (iSpellPower+1)*piSpellPowerModifier);
      iDuration = random(iDuration*(100-piDeviation)/100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,state=$,report=TRUE)
   {
      if report
      {
         Send(who,@MsgSendUser,#message_rsc=vrEnchantment_Off);
      }

      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      Send(who,@MsgSendUser,#message_rsc=vrEnchantment_On);
      Send(who,@StartBleedTimer);

      return;
   }

   CanBeRemovedByPlayer()
   {
      return FALSE;
   }

   ModifyDamageTaken(who=$, bonus=0, power=0)
   {
      % Under normal circumstances, 1 damage taken extra.
      % Bleed masters boosts it up to 2 damage taken extra.
      return bonus + 101 + power;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
