% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SummonElemental is Spell

constants:
   include blakston.khd

resources:


   summonelem_name_rsc = "summon elemental"
   summonelem_icon_rsc = iseance.bgf
   summonelem_desc_rsc = \
      "Summons an elemental under your command to aid in you battle. Requires "
      "firesand and ice dragon scales to cast."

   summonelem_failed_rsc = \
      "There is too much summoning magic focused here to summon an elemental."
   
   summonelem_limit_rsc = \
      "You are already maintaining the maximum number of minions."
   elem_failed_full_rsc = \
      "This place is too full of monsters. "

   summon_elem_too_many_rsc = \
      "You don't have enough willpower to control a new minion right now."

   elem_cannot_cast_here = \
      "You are not allowed to summon an elemental here."

   summonelem_cast_rsc = "An elemental forms from the residual energies amongst the room."

   summonelem_sound = rmirrimg.wav

classvars:

   vrName = summonelem_name_rsc
   vrIcon = summonelem_icon_rsc
   vrDesc = summonelem_desc_rsc

   viSpell_num = SID_SUMMON_ELEMENTAL
   viSchool = SS_BESTIARY
   viSpell_level = 6
   viMana = 15
   viMeditate_ratio = 40

   viSpellExertion = 4
   viCast_time = 0

   vrSucceed_wav = summonelem_sound
   
   viPrimaryStat = STAT_ID_INTELLECT
   viSecondaryStat = 0

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&IceDragonScale,2], plReagents);
      plReagents = Cons([&FireSand,2],plReagents);

      return;
   }

   CanPayCosts(who=$)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);
      
      if oRoom = $
         OR NOT IsClass(oRoom,&Room)
      {
         return FALSE;
      }

      if (Send(oRoom,@CountHoldingHowMany,#class=&monster) > 55)
         AND NOT IsClass(oRoom,&SurvivalRoom)
      {
         Send(who,@MsgSendUser,#message_rsc=elem_failed_full_rsc);

         return FALSE;
      }

      propagate;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=1)
   {
      local oRisen, oRoom, iRow, iCol, iFine_Row, iFine_Col, iNum;

      oRoom = Send(who,@GetOwner);

      iRow = Send(who,@GetRow);
      iCol = Send(who,@GetCol);
      iFine_Row = Send(who,@GetFineRow);
      iFine_Col = Send(who,@GetFineCol);

      iNum = Random(1,99);

      if iNum < 20
      {
         oRisen = Create(&NeruElemental);
      }
      else
      {
         if iNum < 40
         {
            oRisen = Create(&IceElemental);
         }
         else
         {
            if iNum < 60
            {
               oRisen = Create(&FireElemental);
            }
            else
            {
               if iNum < 75
               {
                  oRisen = Create(&EarthElemental);
               }
               else
               {
                  if iNum < 90
                  {
                     oRisen = Create(&NeruElementalChampion);
                  }
                  else
                  {
                     oRisen = Create(&AirElemental);
                     
                  }
               }
            }
         }
      }
      
      Send(oRisen,@SetSummoned,#value=TRUE);

      if Send(who,@CanControlNewMinion,#oMonster=oRisen,#bCharming=FALSE)
      {
         % Add this creature to your minion list
         Send(who,@NewControlledMinion,#minion=oRisen);

         % Set initial minion behavior
         Send(oRisen,@ResetBehaviorFlags);
         Send(self,@ModifyMonsterBehavior,#mob=oRisen);

         % Post this due to it needing to be done after the minion is placed.
         Post(oRisen,@SetMaster,#oMaster=who);
         %Post(who,@DrawLeadership);
      }
      else
      {
         Send(who,@MsgSendUser,#message_rsc=summon_elem_too_many_rsc);
         Post(oRisen,@Delete);
      }

      % Place the minion
      Send(oRoom,@NewHold,#what=oRisen,#new_row=iRow,#new_col=iCol,
            #fine_row=iFine_Row,#fine_col=iFine_Col);

      propagate;
   }

   ModifyMonsterBehavior(mob=$)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_FOLLOW_MASTER,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_AGGRESSIVE,#value=FALSE);
      Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_NEWBIESAFE);
      Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_MONSTERS);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
