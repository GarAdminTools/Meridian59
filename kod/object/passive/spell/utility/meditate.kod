% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Meditate is UtilitySpell

constants:

   include blakston.khd

   TRANCE_TIME = 20000

resources:

   include meditate.lkod

   Meditate_name_rsc = "meditate"
   Meditate_icon_rsc = imeditate.bgf
   Meditate_desc_rsc = \
      "Allows you to channel your experience in meditation in order to "
      "open your mind and improve your abilities.  To do so, speak the "
      "name of the ability you wish to improve while in trance.  This "
      "will use up accumulated training points."
      "\n\nMeditating takes a great deal of focus, and will cancel "
      "some other activities such as singing songs."

   Meditate_begin_trance = \
      "You begin your meditation and let your mind wander.  Which ability "
      "will you focus your meditation on?"
   Meditate_cast_success = \
      "You begin to meditate on the art of %s and come to a deeper "
      "understanding of its intricacies.  You have improved your ability "
      "by ~B%i~B points."
   Meditate_cast_altered_positive = \
      "You begin to meditate on the art of %s and come to a deeper "
      "understanding of its intricacies.  You have improved your ability "
      "by ~B%i~B points. The area you are in made the points spent ~B~g%i% more efficient~B~n."
   Meditate_cast_altered_negative = \
      "You begin to meditate on the art of %s and come to a deeper "
      "understanding of its intricacies.  You have improved your ability "
      "by ~B%i~B points. The area you are in made the points spent ~B~r%i% less efficient~B~n."
   Meditate_cast_failure = \
      "You can't seem to properly focus your mind.  Confused and "
      "disappointed, you wake from your trance."
   Meditate_not_enough_points = \
      "You begin to meditate on the art of %s, but seem to lack the "
      "inspiration to advance in your studies."
   Meditate_maxed_skill = \
      "You begin to meditate on the art of %s, but cannot possibly "
      "progress any further in its mastery."
   Meditate_cast_finished = \
      "You wake from your trance and feel your mental energies refreshed!"

classvars:

   vrName = Meditate_name_rsc
   vrIcon = Meditate_icon_rsc
   vrDesc = Meditate_desc_rsc

   viSpell_num = SID_MEDITATE
   viSchool = SS_FAREN
   viSpell_level = 1
   viMana = 0
   viSpellExertion = 0

   viFlash = FLASH_GOOD
   viMeditate_ratio = 200

properties:

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   SuccessChance(who=$)
   "Starter spell will always work."
   {
      return TRUE;
   }

   ImproveAbility()
   "We only improve if we have exchanged training points."
   {
      return FALSE;
   }

   GetTranceTime(iSpellpower=0,who=$)
   {
      % Since this spell uses the trance, don't scale it down
      % depending on iSpellpower
      return viCast_time;
   }

   BeginCastingTrance(who=$,lTargets=$,iSpellpower=$)
   {
      local oTrance;

      % Get rid of the regular casting trance, we need a special
      % one put on below.
      Send(who,@BreakTrance,#event=EVENT_STEER);

      oTrance = Send(SYS,@FindSpellByNum,#num=SID_TRANCE);

      Send(who,@MsgSendUser,#message_rsc=Meditate_begin_trance);

      Send(oTrance,@BeginCastingTrance,#what=self,#who=who,
            #lTargets=$,#time=TRANCE_TIME);

      propagate;
   }

   SomethingSaidDuringTrance(who=$,string=$,lTargets=$)
   {
      local i, bFound, oSpell, sSpell, oSkill, sSkill, iPercent,
            iRatio, iGain, iNum, iPoints, iRoomMeditateEfficiency, iRawPoints;

      Send(who,@BreakTrance,#event=EVENT_STEER);  %% Don't print fizzle message

      bFound = FALSE;

      iPoints = Send(who,@GetTrainingPoints);
      
      iRoomMeditateEfficiency = 100;

      foreach i in Send(who,@GetSpellList)
      {
         iNum = Send(who,@DecodeSpellNum,#compound=i);
         oSpell = Send(SYS,@FindSpellByNum,#num=iNum);
         sSpell = Send(oSpell,@GetName);

         if StringEqual(string,sSpell)
         {
            bFound = TRUE;
            iPercent = Send(oSpell,@GetAbility,#who=who);
            iRatio = Send(oSpell,@GetMeditateRatio);

            % Rooms may have different Meditate efficiencies for each spell (hall ownership, school, etc)
            if Send(who,@GetOwner) <> $
            {
               iRoomMeditateEfficiency = Send(Send(who,@GetOwner),@GetRoomMeditateEfficiency,#who=who,#oSpell=oSpell);
            }

            if iPercent = 99
            {
               Send(who,@MsgSendUser,#message_rsc=Meditate_maxed_skill,
                     #parm1=sSpell);

               return;
            }

            if iRatio = 0
               or iRoomMeditateEfficiency = 0
            { 
               Send(who,@MsgSendUser,#message_rsc=Meditate_cast_failure);

               return;
            }

            if ((iPoints*iRoomMeditateEfficiency)/100) < iRatio
            {
               Send(who,@MsgSendUser,#message_rsc=Meditate_not_enough_points,
                     #parm1=sSpell);

               return;
            }
            else
            {
               iGain = ((iPoints*iRoomMeditateEfficiency)/100)/iRatio;
               if iGain > 99 - iPercent
               {
                  iGain = 99 - iPercent;
               }

               % Figure raw points, the actual points spent without room efficiency modifier
               iRawPoints = (iGain*iRatio*100)/iRoomMeditateEfficiency;

               if iRoomMeditateEfficiency = 100
               {
                  Send(who,@MsgSendUser,#message_rsc=Meditate_cast_success,
                        #parm1=sSpell,#parm2=iGain);
               }
               else
               {
                  if iRoomMeditateEfficiency > 100
                  {
                     Send(who,@MsgSendUser,#message_rsc=Meditate_cast_altered_positive,
                           #parm1=sSpell,#parm2=iGain,#parm3=iRoomMeditateEfficiency-100);
                  }
                  else
                  {
                     Send(who,@MsgSendUser,#message_rsc=Meditate_cast_altered_negative,
                           #parm1=sSpell,#parm2=iGain,#parm3=Abs(iRoomMeditateEfficiency-100));
                  }
               }
               Send(who,@ChangeSpellAbility,#spell_num=iNum,
                     #amount=iGain,#report=FALSE);
               Send(who,@AddTrainingPoints,#points=-iRawPoints);
               Send(who,@CastASpell,#oSpell=self);
               if iGain*iRatio > Random(0,99)
                  AND NOT StringEqual(string,Meditate_name_rsc)
               {
                  Send(who,@ChangeSpellAbility,#spell_num=vispell_Num,
                        #amount=1,#report=TRUE);
               }
            }

            break;
         }
      }

      foreach i in Send(who,@GetSkillList)
      {
         iNum = Send(who,@DecodeSkillNum,#compound=i);
         oSkill = Send(SYS,@FindSkillByNum,#num=iNum);
         sSkill = Send(oSkill,@GetName);

         if StringEqual(string,sSkill)
         {
            bFound = TRUE;
            iPercent = Send(oSkill,@GetAbility,#who=who);
            iRatio = Send(oSkill,@GetMeditateRatio);

            % Rooms may have different Meditate efficiencies for each spell (hall ownership, school, etc)
            if Send(who,@GetOwner) <> $
            {
               iRoomMeditateEfficiency = Send(Send(who,@GetOwner),@GetRoomMeditateEfficiency,#who=who,#oSkill=oSkill);
            }

            if iPercent = 99
            {
               Send(who,@MsgSendUser,#message_rsc=Meditate_maxed_skill,
                     #parm1=sSkill);

                     return;
            }

            if iRatio = 0
               or iRoomMeditateEfficiency = 0
            { 
               Send(who,@MsgSendUser,#message_rsc=Meditate_cast_failure);

               return;
            }

            if ((iPoints*iRoomMeditateEfficiency)/100) < iRatio
            {
               Send(who,@MsgSendUser,#message_rsc=Meditate_not_enough_points,
                     #parm1=sSkill);

               return;
            }
            else
            {
               iGain = ((iPoints*iRoomMeditateEfficiency)/100)/iRatio;
               if iGain > 99 - iPercent
               {
                  iGain = 99 - iPercent;
               }

               % Figure raw points, the actual points spent without room efficiency modifier
               iRawPoints = (iGain*iRatio*100)/iRoomMeditateEfficiency;

               if iRoomMeditateEfficiency = 100
               {
                  Send(who,@MsgSendUser,#message_rsc=Meditate_cast_success,
                        #parm1=sSkill,#parm2=iGain);
               }
               else
               {
                  if iRoomMeditateEfficiency > 100
                  {
                     Send(who,@MsgSendUser,#message_rsc=Meditate_cast_altered_positive,
                           #parm1=sSkill,#parm2=iGain,#parm3=iRoomMeditateEfficiency-100);
                  }
                  else
                  {
                     Send(who,@MsgSendUser,#message_rsc=Meditate_cast_altered_negative,
                           #parm1=sSkill,#parm2=iGain,#parm3=Abs(iRoomMeditateEfficiency-100));
                  }
               }
               Send(who,@ChangeSkillAbility,#Skill_num=iNum,
                     #amount=iGain,#report=FALSE);
               Send(who,@AddTrainingPoints,#points=-iRawPoints);
               Send(who,@CastASpell,#oSpell=self);
               if iGain*iRatio > Random(0,99)
               {
                  Send(who,@ChangeSpellAbility,#spell_num=vispell_Num,
                        #amount=1,#report=TRUE);
               }
            }

            break;
         }
      }

      if NOT bFound
      {
         Send(who,@MsgSendUser,#message_rsc=Meditate_cast_failure);
      }

      return;
   }

   DoubleCheckAfterTrance(who=$,lTargets=$)
   {
      local iMana, iPercent;

      iMana = Send(who,@GetMaxMana);
      iPercent = Send(self,@GetAbility,#who=who);

      if NOT Send(who,@IsCrystalizeManaSurging)
      {
         Send(who,@GainMana,#amount=iMana*iPercent/100,
               #bCapped=TRUE);
      }
      Send(who,@MsgSendUser,#message_rsc=Meditate_cast_finished);

      return;
   }

   TranceBlocksSay()
   {
      return TRUE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
