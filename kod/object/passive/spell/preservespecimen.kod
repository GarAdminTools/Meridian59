% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
PreserveSpecimen is Spell

constants:

   include blakston.khd

resources:

   Preserve_Specimen_name_rsc = "preserve specimen"
   Preserve_Specimen_icon_rsc = ianimate.bgf
   Preserve_Specimen_desc_rsc = \
      "Preserves the corpse of a minion so that it may be brought back to a "
      "monster morgue and either be dissected for research or resurrected to "
      "serve once more. You may only preserve your own minions, "
      "as the souls of wild beasts and enemies usually fully depart upon death. "
      "Better preservation techniques retain more of the loyalty the minion had in life. "
      "This spell is automatically triggered upon minion death, and has no need to be cast "
      "directly."

   Preserve_Specimen_bad_target = "You can't preserve %s%s!"
   Preserve_Specimen_human_cast_rsc ="%s's corpse has been preserved."
   Preserve_Specimen_human_failed_rsc ="%s's corpse remains inanimate on the ground."
   Preserve_Specimen_mob_failed_rsc = \
      "The %s's remains continue to rot."
   Preserve_Specimen_mob_cast_rsc = \
      "The %s's remains have been preserved."
   Preserve_Specimen_failed_rsc = "The remains are unable to be preserved."
   Preserve_Specimen_too_many_rsc = "You already have %i specimens preserved. You cannot maintain more."
   Preserve_Specimen_your_minions_only = "You may only preserve your own former minions."

   Preserve_Specimen_sound = qanimate.wav

classvars:

   vrName = Preserve_Specimen_name_rsc
   vrIcon = Preserve_Specimen_icon_rsc
   vrDesc = Preserve_Specimen_desc_rsc

   viSpell_num = SID_PRESERVE_SPECIMEN
   viSchool = SS_BESTIARY
   viSpell_level = 1
   viMana = 40

   viSpellExertion = 3
   viCast_time = 10000
   viChance_To_Increase = 20
   viMeditate_ratio = 20

   vrSucceed_wav = Preserve_Specimen_sound
   
   viPrimaryStat = STAT_ID_INTELLECT
   viSecondaryStat = 0

properties:

   piSpecimensLimit = 10

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&FairyWing,1], plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who=$,lTargets=$)
   {
      local oOwner, oRoom, oTarget;

      oRoom = Send(who,@GetOwner);
      oTarget = First(lTargets);

      if oTarget = $
         OR NOT IsClass(oTarget,&DeadBody)
         OR Send(oTarget,@GetMonsterData) = $
      {
         Send(who,@MsgSendUser,#message_rsc=Preserve_Specimen_bad_target,
               #parm1=Send(oTarget,@GetDef),
               #parm2=Send(oTarget,@GetName));

         return FALSE;
      }
      
      if Send(who,@GetDeadMinionsList) <> $
         AND Length(Send(who,@GetDeadMinionsList)) >= piSpecimensLimit
      {
         Send(who,@MsgSendUser,#message_rsc=Preserve_Specimen_too_many_rsc,#parm1=piSpecimensLimit);
         return FALSE;
      }

      oOwner = Send(oTarget,@GetOwner);

      if oOwner = $
      {
         Send(who,@MsgSendUser,#message_rsc=Preserve_Specimen_failed_rsc);

         return FALSE;
      }
      
      if Send(oTarget,@GetMasterWas) <> who
      {
         Send(who,@MsgSendUser,#message_rsc=Preserve_Specimen_your_minions_only);
         return FALSE;
      }

      propagate;
   }

   DoubleCheckAfterTrance(who=$,lTargets=$)
   {
      local oRoom, oTarget;

      oRoom = Send(who,@GetOwner);
      oTarget = First(lTargets);
      if oRoom <> Send(oTarget,@GetOwner)
      {
         if IsClass(who,&User)
         {
            Send(who,@MsgSendUser,#message_rsc=spell_trance_break,
                  #parm1=vrName);
            Send(who,@WaveSendUser,#wave_rsc=spell_trance_break_sound);
         }

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=1)
   {
      local oRisen, oRoom, oTarget, lMonsterData, iNum;

      oRoom = Send(who,@GetOwner);
      oTarget = First(lTargets);

      if oRoom <> Send(oTarget,@GetOwner)
      {
         if IsClass(who,&User)
         {
            Send(who,@MsgSendUser,#message_rsc=spell_trance_break,
                  #parm1=vrName);
            Send(who,@WaveSendUser,#wave_rsc=spell_trance_break_sound);
         }

         return;
      }

      Send(who,@MsgSendUser,#message_rsc=Preserve_Specimen_mob_cast_rsc,#parm1=Send(oTarget,@GetName));
      
      lMonsterData = Send(oTarget,@GetMonsterData);
      if lMonsterData <> $
      {
         % Take a loyalty loss based on spellpower
         SetNth(lMonsterData,2,Bound((Nth(lMonsterData,2)*iSpellPower)/100,1,$));
         Send(who,@SaveToDeadMinionsList,#lMonsterData=lMonsterData);

         % Delete the corpse
         Post(oTarget,@Delete);
      }

      propagate;
   }

   GetPreserveAbility(oMinion=$, oMaster=$)
   {
      local iAbil, iStat, iPreserveAbil;
      
      iAbil = Send(oMaster,@GetSpellAbility,#spell_num=viSpell_num);
      iStat = Send(self,@GetIntellect);
      
      iPreserveAbil = (iAbil + iStat) / 2;

      if iAbil > 0
      {
         Send(self,@ImproveAbility,#who=oMaster,#target=oMinion);
      }
      return iPreserveAbil;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
