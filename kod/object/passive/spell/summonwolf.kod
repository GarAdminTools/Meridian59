% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SummonWolf is Spell

constants:
   include blakston.khd

resources:


   summonwolf_name_rsc = "summon spirit wolf"
   summonwolf_icon_rsc = iseance.bgf
   summonwolf_desc_rsc = \
      "Summons a loyal companion to aid you in battle. "
      "Requires two firesand and two uncut seraphym to cast."

   summonwolf_failed_rsc = \
      "There is too much summoning magic focused here to summon a wolf."
   
   summonwolf_limit_rsc = \
      "You are already maintaining the maximum number of wolves."
   wolf_failed_full_rsc = \
      "This place is too full of monsters. The wolves refuse the call."

   summon_wolf_too_many_rsc = \
      "You don't have enough willpower to control a new wolf right now."

   wolf_cannot_cast_here = \
      "You are not allowed to create a wolf here."

   summonwolf_cast_rsc = "A loyal wolf appears beside you."

   summonwolf_sound = rmirrimg.wav

classvars:

   vrName = summonwolf_name_rsc
   vrIcon = summonwolf_icon_rsc
   vrDesc = summonwolf_desc_rsc

   viSpell_num = SID_SUMMON_WOLF
   viSchool = SS_BESTIARY
   viSpell_level = 4
   viMana = 15
   viMeditate_ratio = 30

   viSpellExertion = 4
   viCast_time = 0

   vrSucceed_wav = summonreflection_sound
   
   viPrimaryStat = STAT_ID_INTELLECT
   viSecondaryStat = 0

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Firesand,2], plReagents);
      plReagents = Cons([&UncutSeraphym,2],plReagents);

      return;
   }

   CanPayCosts(who=$)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);
      
      if oRoom = $
         OR NOT IsClass(oRoom,&Room)
      {
         return FALSE;
      }

      if (Send(oRoom,@CountHoldingHowMany,#class=&monster) > 55)
         AND NOT IsClass(oRoom,&SurvivalRoom)
      {
         Send(who,@MsgSendUser,#message_rsc=wolf_failed_full_rsc);

         return FALSE;
      }

      propagate;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=1)
   {
      local oRisen, oRoom, iRow, iCol, iFine_Row, iFine_Col;

      oRoom = Send(who,@GetOwner);

      iRow = Send(who,@GetRow);
      iCol = Send(who,@GetCol);
      iFine_Row = Send(who,@GetFineRow);
      iFine_Col = Send(who,@GetFineCol);

      oRisen = Create(&SpiritWolf,#level=25+iSpellPower);
      Send(oRisen,@SetSummoned,#value=TRUE);

      if Send(who,@CanControlNewMinion,#oMonster=oRisen,#bCharming=FALSE)
      {
         % Add this creature to your minion list
         Send(who,@NewControlledMinion,#minion=oRisen);

         % Set initial minion behavior
         Send(oRisen,@ResetBehaviorFlags);
         Send(self,@ModifyMonsterBehavior,#mob=oRisen);

         % Post this due to it needing to be done after the minion is placed.
         Post(oRisen,@SetMaster,#oMaster=who);
      }
      else
      {
         Send(who,@MsgSendUser,#message_rsc=summon_wolf_too_many_rsc);
         Post(oRisen,@Delete);
      }

      % Place the minion
      Send(oRoom,@NewHold,#what=oRisen,#new_row=iRow,#new_col=iCol,
            #fine_row=iFine_Row,#fine_col=iFine_Col);

      propagate;
   }

   ModifyMonsterBehavior(mob=$)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_FOLLOW_MASTER,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_AGGRESSIVE,#value=FALSE);
      Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_NEWBIESAFE);
      Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_MONSTERS);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
