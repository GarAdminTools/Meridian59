% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SummonWolf is Spell

constants:
   include blakston.khd

resources:


   summonwolf_cast_rsc = "A loyal wolf appears beside you."
   summonwolf_name_rsc = "reflection"
   summonwolf_icon_rsc = wolfX.bgf
   summonwolf_desc_rsc = \
      "Summons a loyal companion to aid you in battle.  "
      " "
      " "
      " "

   summonwolf_failed_rsc = \
      "There is too much summoning magic focused here to summon a wolf."
   
   summonwolf_limit_rsc = \
      "You are already maintaining the maximum number of wolves."

   wolf_cannot_cast_here = \
      "You are not allowed to create a wolf here."

   summonwolf_sound = rmirrimg.wav

classvars:

   vrName = summonwolf_name_rsc
   vrIcon = summonwolf_icon_rsc
   vrDesc = summonwolf_desc_rsc

   viSpell_num = SID_WOLF
   viSchool = SS_RIIJA
   viSpell_level = 5
   viMana = 15
   viMeditate_ratio = 30

   viSpellExertion = 4
   viCast_time = 1000

   vrSucceed_wav = summonreflection_sound
   
   viPrimaryStat = STAT_ID_INTELLECT
   viSecondaryStat = 0

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Firesand,2], plReagents);
      plReagents = Cons([&UncutSeraphym,2],plReagents);

      return;
   }

   CanPayCosts(who=$)
   {
      % Limit reflections.
      if (Send(self,@CountPlayerReflections,#who=who)
         >= Send(SETTINGS_OBJECT,@GetPlayerReflectionLimit))
         AND NOT (IsClass(who,&DM)
            AND Send(who,@PlayerIsImmortal))
      {
         if IsClass(who,&Player)
         {
            Send(who,@MsgSendUser,#message_rsc=summonreflection_limit_rsc);
         }

         return FALSE;
      }

      propagate;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=1)
   {
      local oReflection, oRoom, iRow, iCol, iFine_Row, iFine_Col;

      oReflection = Create(&Wolf,#iSpellpower=iSpellpower,#oMaster=who);
      oRoom = Send(who,@GetOwner);

      iRow = Send(who,@GetRow);
      iCol = Send(who,@GetCol);
      iFine_Row = Send(who,@GetFineRow);
      iFine_Col = Send(who,@GetFineCol);

      Send(oReflection,@SetOriginal,#who=who);

      Send(oRoom,@NewHold,#what=oReflection,#new_row=iRow,#new_col=iCol,
            #fine_row=iFine_Row,#fine_col=iFine_Col);

      if IsClass(who,&Player)
      {
         Send(who,@MsgSendUser,#message_rsc=summonreflection_cast_rsc);
      }
      
      Send(who,@NewControlledMinion,#minion=oReflection);
      Send(SYS,@AddReflection,#who=who,#oReflection=oReflection);
      Send(oReflection,@SetBehaviorFlag,#flag=AI_MOVE_FOLLOW_MASTER,
            #value=TRUE);

      propagate;
   }

   CountPlayerReflections(who=$)
   "Count number of reflections being maintained by the caster."
   {
      local i;

      foreach i in Send(SYS,@GetReflectionsList)
      {
         if first(i) = who
         {
            return length(Nth(i,2));
         }
      }

      return 0;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
