% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DeathsDoor is MultiCastSpell

constants:

   include blakston.khd

resources:

   include shadrift.lkod


   DeathsDoor_name_rsc = "shadow rift"
   DeathsDoor_icon_rsc = irift.bgf
   DeathsDoor_desc_rsc = \
      "Summons the darkest of magics to warp the fabric of space. "
      "Only the specially designed foyer of the Inner Sanctum of Queen Venya'cyr "
      "and its centuries of dark rituals can host such a strong incantation. This spell will cause a mystical "
      "portal to form which will transport all who enter it to the exact spot "
      "to which the spherical prism is bound. "
      "Requires the feathers of a dark angel and membership in the Guild of Necromancers. "
      "The Master of the Order of Necromancers may say \"Bind our will here.\" to change the bound "
      "destination to his or her current location."
   
   DeathsDoor_sound = qdthdoor.wav

   DeathsDoor_already = \
      "A cloud of magical force begins to coalesce, but then dissipates, "
      "repelled by the presence of another nearby portal."
   DeathsDoor_no_lich = \
      "A cloud of magical force begins to coalesce, but then mysteriously "
      "dissipates.  Perhaps something crucial is missing."
   DeathsDoor_room_loop = \
      "The prism hisses feebly. It must be taken out of the area "
      "to which it is bound."
   DeathsDoor_target_has_portal = \
      "The prism briefly goes clear. Through it you see that "
      "its target area already contains a portal."

   DeathsDoor_succeeded = "A shimmering portal springs into being!"
   DeathsDoor_succeeded2 = "The prism hums and shudders."
   deathsDoor_necros_only = \
      "Without an Amulet to summon the power of the Three, you cannot "
      "hope to summon a shadow rift."

   must_be_foyer_sanctum = \
      "This spell is crafted to work only within a very special structure "
      "full of ancient rituals and dark magics. Even a standard prism "
      "would not be enough."

classvars:

   vrName = DeathsDoor_name_rsc
   vrIcon = DeathsDoor_icon_rsc
   vrDesc = DeathsDoor_desc_rsc

   vrSucceed_wav = DeathsDoor_sound

   viMana = 30

   viSpell_num = SID_DEATHS_DOOR
   viSchool = SS_QOR
   viSpell_level = 4

   viSpellExertion = 40
   viCast_time = 20000
   viChance_To_Increase = 25

   viManaDrain = 1       % Drain is amount used every viDrainTime milliseconds
   viDrainTime = 1000    % Drain some mana every viDrainTime milliseconds

   viCast_time = 0    % in milliseconds
   
   viPrimaryStat = STAT_ID_MYSTICISM
   viSecondaryStat = STAT_ID_KARMA


properties:

   pbAccessible = TRUE
   pbEnabled = TRUE
   viMultiCast_Spellpower = 1500 % 5 minutes for 3 @ 20%, 70 secs for 7 @ 99%

messages:      


   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DarkAngelFeather, 4],plReagents);

      return;
   }

   FindPrism(who=$)
   {
      local oRoom, i, cPrism, cDist, Dist, each_obj;

      % This spell only works with the spherical prism in the Necromancer Guildhall.
      % The caster must also be in the foyer, aka vulnerable.

      oRoom = Send(who,@GetOwner);
      cPrism = $;
      cDist = 100000;

      if NOT Send(Send(SYS,@FindRoomByNum,#num=RID_GUILDH15),@InFoyer,#who=who)
      {
         Send(who,@MsgSendUser,#message_rsc=must_be_foyer_sanctum);
         return $;
      }

      foreach i in Send(oRoom,@GetHolderPassive)
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&SpherePrism)
            AND (Send(each_obj,@GetSpell) = $ OR Send(each_obj,@GetSpell) = self)
         {
            Dist = Send(who,@SquareddistanceTo,#what=each_obj);
            if Dist < cDist
            {
               cDist = Dist;
               cPrism = each_obj;
            }
         }
      }

      return cPrism;
   }

   CanPayCosts(who=$,lTargets=$,iSpellPower=0)
   {
      local i, each_obj;
      if IsClass(who,&Player)
         AND NOT Send(who,@IsUndead)
         AND NOT IsClass(who,&DM)
      {
         Send(who,@MsgSendUser,#message_rsc=deathsDoor_necros_only);
         return FALSE;
      }
      
      foreach i in Send(Send(who,@GetOwner),@GetHolderActive)
      {
         each_obj = Send(Send(who,@GetOwner),@HolderExtractObject,#data=i);
         
         if IsClass(each_obj,&NecropolisPortal)
         {
            Send(who,@MsgSendUser,#message_rsc=DeathsDoor_already);
            return FALSE;
         }
      }
      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      propagate;
   }

   PrismCast(spellpower=0,lCasters=$,lTargets=$,oPrism=$,lLocation=$)
   {
      local oCaster, oNecroPortal,lPortalLocation,lTargetLocation,
            oTargetRoom;

      if oPrism = $
      {
         Debug("PrismCast called with no prism.");
         return;
      }

%      % Ask room if we're allowed to cast here.  For example, portals into
%      % guild halls are a bad idea.
%      if (NOT Send(Send(oPrism,@GetOwner),@CanHavePlayerPortal))
%      {
%         foreach oCaster in lCasters
%         {
%            Send(oCaster,@MsgSendUser,#message_rsc=spell_bad_location,
%                  #parm1=vrName);
%         }
%
%         return;
%      }

      if Send(oPrism,@GetTeleportLocation)
      {
         % Second cast: create a portal to the place where the first cast
         % occurred.

         % Where the portal leads
         lTargetLocation = Send(oPrism,@GetTeleportLocation);

         % Where the portal gets put
         lPortalLocation = Send(self,@GetPortalLocation,#what=oPrism);

         % Fail if target is the current room to prevent portal to itself
         oTargetRoom = Send(SYS, @FindRoomByNum, #num = first(lTargetLocation));
         if oTargetRoom = Send(oPrism, @GetOwner)
         {
            foreach oCaster in lCasters
            {
               Send(oCaster,@MsgSendUser,#message_rsc=DeathsDoor_room_loop);
            }

            return;
         }

         % Fail if target room already has a portal, to prevent infinite loops
         if Send(oTargetRoom,@FindHoldingActive,#class=&Portal)
         {
            foreach oCaster in lCasters
            {
               Send(oCaster,@MsgSendUser,#message_rsc=DeathsDoor_target_has_portal);
            }

            return;
         }

         oNecroPortal = Create(&NecropolisPortal,#lLocation=lTargetLocation);
         Send(oNecroPortal,@SetTarget,#lTarget=lTargetLocation);

         Send(Send(SYS,@FindRoomByNum,#num =First(lPortalLocation)),
         @NewHold,#what=oNecroPortal,
         #new_row=nth(lPortalLocation,2),#new_col=nth(lPortalLocation,3),
         #fine_row=nth(lPortalLocation,4),#fine_col=nth(lPortalLocation,5));

         foreach oCaster in lCasters
         {
            Send(oCaster,@MsgSendUser,#message_rsc=DeathsDoor_succeeded);
         }
      }
      else
      {
         % First cast: prism records location where portal will lead after
         % the second cast.
         Send(oPrism,@LearnLocation,#lLocation=Send(self,@GetPortalLocation,
               #what=oPrism));

         foreach oCaster in lCasters
         {
            Send(oCaster,@MsgSendUser,#message_rsc=DeathsDoor_succeeded2);
         }

      }

      return;
   }

   GetPortalLocation(what=$)
   {
      local oRoom,iRow,iCol,iFineRow,iFineCol,lLocation;

      oRoom = Send(what,@GetOwner);

      if oRoom = $ OR NOT isClass(oRoom,&room)
      {
         Debug("Got non room owner in GetPortalLocation");

         return;
      }

      iRow=Send(what,@GetRow);
      iCol=Send(what,@GetCol);
      iFineRow=Send(what,@GetFineRow);
      iFineCol=Send(what,@GetFineCol);

      lLocation = [ Send(oRoom, @GetRoomNum), iRow,iCol,iFineRow,iFineCol ];

      return lLocation;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
