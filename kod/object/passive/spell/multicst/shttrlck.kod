% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ShatterLock is MultiCastSpell

constants:

   include blakston.khd

resources:

   include shttrlck.lkod

   ShatterLock_name_rsc = "shatterlock"
   ShatterLock_icon_rsc = ishatlok.bgf
   ShatterLock_desc_rsc = \
      "The concentrated will of several Kraanan masters can be focused to "
      "force open dimensional barriers.  "
      "Requires Kriipa Claws to cast, and the casters' "
      "energies must be focused through a prism."

   ShatterLock_cast_complete = \
      "As you finish your incantation, the prism releases a blast of energy at the fabric of reality itself!"

   ShatterLock_cant_cast_here = \
      "There are no dimensional barriers of the proper type here."

   ShatterLock_sound = kraanan.wav  

classvars:

   vrName = ShatterLock_name_rsc
   vrIcon = ShatterLock_icon_rsc
   vrDesc = ShatterLock_desc_rsc

   vrSucceed_wav = ShatterLock_sound

   viMana = 50         % Mana is amount used upon initiation

   viSpell_num = SID_SHATTERLOCK
   viSchool = SS_KRAANAN
   viSpell_level = 6

   viSpellExertion = 50
   viCast_time = 2000
   viChance_To_Increase = 50

   viManaDrain = 1       % Drain is amount used every viDrainTime milliseconds
   viDrainTime = 1000    % Drain some mana every viDrainTime milliseconds
   
   viPrimaryStat = STAT_ID_STAMINA
   viSecondaryStat = 0

properties:

   viMultiCast_Spellpower = 3600    % 1 hour base casting time

messages:      

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&KriipaClaw,4],plReagents);

      return;
   }

   CanPayCosts(who=$)
   {
      local oPrism;

      oPrism = Send(self,@FindPrism,#who=who);
      
      if oPrism = $
      {
         propagate;
      }

      if NOT IsClass(Send(oPrism,@GetOwner),&Room)
         OR NOT Send(Send(oPrism,@GetOwner),@CanShatterlockHere)
      {
         Send(who,@MsgSendUser,#message_rsc=ShatterLock_cant_cast_here);
         return FALSE;
      }

      propagate;
   }

   PrismCast(spellpower = 0, lCasters=$, oPrism=$)
   {
      local oRoom, i;

      oRoom = Send(oPrism,@GetOwner);
      if IsClass(oRoom,&Room)
         AND Send(oRoom,@CanShatterlockHere)
      {
         Send(oRoom,@Shatterlocked,#oPrism=oPrism,#lCasters=lCasters,#iSpellPower=spellpower);
      }

      foreach i in lCasters
      {
         Send(i,@MsgSendUser,#message_rsc=ShatterLock_cast_complete);
      }

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
