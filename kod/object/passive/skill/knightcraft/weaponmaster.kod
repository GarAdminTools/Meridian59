% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Weaponmaster is KnightcraftSkill

constants:

   include blakston.khd
   include protocol.khd   

resources:

   Weaponmaster_name_rsc = "weapon mastery"
   Weaponmaster_icon_rsc = fenceico.bgf
   Weaponmaster_desc_rsc = \
      "Career knights endure campaigns against enemies "
      "of many cultures. Experience teaches grizzled veterans that true "
      "mastery of weapons comes from a choice of style that juxtaposes "
      "that of the enemy. "
      "\n\nIf a weapon master has chosen the correct style against his "
      "opponent, he can mitigate the effects of their "
      "natural agility and aim by up to half."
      "\n\nGenerally, scimitars have the advantage against fencing weapons."
      "\nFencing weapons have the advantage against axes."
      "\nAxes have the advantage against daggers."
      "\nDaggers have the advantage against hammers."
      "\nHammers have the advantage against scimitars."

classvars:

   vrName = Weaponmaster_name_rsc
   vrIcon = Weaponmaster_icon_rsc
   vrDesc = Weaponmaster_desc_rsc

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = SKID_WEAPONMASTER
   viSchool = SKS_KNIGHTCRAFT
   viSkill_Level = 6
   viChance_to_Increase = 4
   viMeditate_ratio = 110

   viSkillExertion = 0
   vbCheck_exertion = FALSE

   vbAutomatic = TRUE
   
   viPrimaryStat = STAT_ID_STAMINA
   viSecondaryStat = 0

properties:

messages:

   GetRequisiteStat(who=$)
   {
      return Send(who,@GetStamina);
   }

   ReduceEvadeChance(iChance=0, oDefender=$, oAttacker=$)
   {
      local iStat, iAbility, oAttackerWeapon, oDefenderWeapon, bAdvantage,
            iAttackerProf, iDefenderProf;
      
      iStat = Send(self,@GetRequisiteStat,#who=oAttacker);
      iAbility = Send(oAttacker,@GetSkillAbility,#skill_num=viSkill_num);
         
      if iAbility = 0
      {
         % Attacker does not have the skill!
         return 0;
      }

      oAttackerWeapon = Send(oAttacker,@GetWeapon);
      oDefenderWeapon = Send(oDefender,@GetWeapon);
      
      if oAttackerWeapon = $
         OR oDefenderWeapon = $
         OR IsClass(oAttackerWeapon,&Monster)
         OR IsClass(oDefenderWeapon,&Monster)
         OR IsClass(oAttackerWeapon,&TouchAttackSpell)
         OR IsClass(oDefenderWeapon,&TouchAttackSpell)
      {
         return iChance;
      }

      iAttackerProf = Send(oAttackerWeapon,@GetProfNumber);
      iDefenderProf = Send(oDefenderWeapon,@GetProfNumber);
      
      bAdvantage = FALSE;
      if iAttackerProf = SKID_PROFICIENCY_SCIMITAR
         AND iDefenderProf = SKID_PROFICIENCY_SWORD
      {
         bAdvantage = TRUE;
      }
      else if iAttackerProf = SKID_PROFICIENCY_SWORD
         AND iDefenderProf = SKID_PROFICIENCY_AXE
      {
         bAdvantage = TRUE;
      }
      else if iAttackerProf = SKID_PROFICIENCY_AXE
         AND iDefenderProf = SKID_PROFICIENCY_DAGGER
      {
         bAdvantage = TRUE;
      }
      else if iAttackerProf = SKID_PROFICIENCY_DAGGER
         AND iDefenderProf = SKID_PROFICIENCY_HAMMER
      {
         bAdvantage = TRUE;
      }
      else if iAttackerProf = SKID_PROFICIENCY_HAMMER
         AND iDefenderProf = SKID_PROFICIENCY_SCIMITAR
      {
         bAdvantage = TRUE;
      }
      
      if bAdvantage
      {
         iChance = (iChance * (100 - ((iAbility+1)/4) - (iStat/4)))/100;

         Send(self,@ImproveAbility,#who=oAttacker);  
      }
      
      return iChance;
   }

   ReduceHitChance(iChance=0, oDefender=$, oAttacker=$)
   {
      local iStat, iAbility, oAttackerWeapon, oDefenderWeapon, bAdvantage,
            iAttackerProf, iDefenderProf;
      
      iStat = Send(self,@GetRequisiteStat,#who=oDefender);
      iAbility = Send(oDefender,@GetSkillAbility,#skill_num=viSkill_num);
         
      if iAbility = 0
      {
         % Attacker does not have the skill!
         return 0;
      }

      oAttackerWeapon = Send(oAttacker,@GetWeapon);
      oDefenderWeapon = Send(oDefender,@GetWeapon);
      
      if oAttackerWeapon = $
         OR oDefenderWeapon = $
         OR IsClass(oAttackerWeapon,&Monster)
         OR IsClass(oDefenderWeapon,&Monster)
         OR IsClass(oAttackerWeapon,&TouchAttackSpell)
         OR IsClass(oDefenderWeapon,&TouchAttackSpell)
      {
         return iChance;
      }

      iAttackerProf = Send(oAttackerWeapon,@GetProfNumber);
      iDefenderProf = Send(oDefenderWeapon,@GetProfNumber);
      
      bAdvantage = FALSE;
      if iDefenderProf = SKID_PROFICIENCY_SCIMITAR
         AND iAttackerProf = SKID_PROFICIENCY_SWORD
      {
         bAdvantage = TRUE;
      }
      else if iDefenderProf = SKID_PROFICIENCY_SWORD
         AND iAttackerProf = SKID_PROFICIENCY_AXE
      {
         bAdvantage = TRUE;
      }
      else if iDefenderProf = SKID_PROFICIENCY_AXE
         AND iAttackerProf = SKID_PROFICIENCY_DAGGER
      {
         bAdvantage = TRUE;
      }
      else if iDefenderProf = SKID_PROFICIENCY_DAGGER
         AND iAttackerProf = SKID_PROFICIENCY_HAMMER
      {
         bAdvantage = TRUE;
      }
      else if iDefenderProf = SKID_PROFICIENCY_HAMMER
         AND iAttackerProf = SKID_PROFICIENCY_SCIMITAR
      {
         bAdvantage = TRUE;
      }
      
      if bAdvantage
      {
         iChance = (iChance * (100 - ((iAbility+1)/4) - (iStat/4)))/100;

         Send(self,@ImproveAbility,#who=oDefender);  
      }
      
      return iChance;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
