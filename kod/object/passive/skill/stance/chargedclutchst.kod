% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ChargedClutchStance is Stance

constants:

   include blakston.khd
   include protocol.khd   

resources:

   ChargedClutchStance_name_rsc = "unstable infusion"
   ChargedClutchStance_icon_rsc = ienchant.bgf
   ChargedClutchStance_desc_rsc = \
      "Advanced alchemists often happen upon a state of matter "
      "which can only be described as destabilized. "
      "Such a discovery has been made in every region or era of "
      "scientific inquiry, and the first and most natural application "
      "is that of weaponry. "
      "Leaving a weapon destabilized long-term leads to problems, "
      "but using this stance, an alchemist can continually channel "
      "brief bursts of transmuted energies into their weapon. "
      "Enemies struck in this manner will experience burns, chills, "
      "shocks, and corrosion at random."
      "\n\nNotably, destabilized weapons never deal the same type of "
      "damage twice in a row. Certain thinkers have proposed that this "
      "quirk hints at some greater alchemical mystery."
      "\n\nUnstable infusion will consume small amounts of gold material "
      "upon successful strikes."
      "\n\nIn addition to melee weapons, arrowheads can be destabilized, "
      "but throwing knives require too delicate a balance to be used in "
      "such a manner."
      "\n\nDestabilized weapons and arrowheads will interfere with the effect "
      "of any holy or unholy dedications otherwise imbued in them."
   
   ChargedClutchStance_begin = "You send destabilizing energies coursing through your hands."
   ChargedClutchStance_end = "You let the instability in your hands fade."
   ChargedClutchStance_mantra = "Isipimdos Vuommis"

   not_enough_shillings_unstable_infusion = \
      "You don't have the %i shillings required to destabilize your weapon!"

classvars:

   vrName = ChargedClutchStance_name_rsc
   vrIcon = ChargedClutchStance_icon_rsc
   vrDesc = ChargedClutchStance_desc_rsc
   
   stance_begin_msg = ChargedClutchStance_begin
   stance_end_msg = ChargedClutchStance_end
   
   vsStanceMantra = ChargedClutchStance_mantra

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = SKID_CHARGED_CLUTCH_STANCE
   viSchool = SKS_ALCHEMY
   viSkill_Level = 4
   viChance_to_Increase = 10
   viMeditate_ratio = 50

   viSkillExertion = 0
   vbCheck_exertion = FALSE

   vbAutomatic = TRUE
   
   viPrimaryStat = STAT_ID_INTELLECT
   viSecondaryStat = 0

properties:

   piBaseFee = 10

messages:

   GetRequisiteStat(who=$)
   {
      return Send(who,@GetIntellect);
   }

   GetSpellType(who=$, oWeapon=$, damaging_now=FALSE)
   {
      local lElementsList, iChargedClutchStanceAbility, iStat, chance, iLastChosen, iChosenElement, i,
            oMoney, iFee, iCash;

      iChargedClutchStanceAbility = Send(who,@GetSkillAbility,#skill_num=viSkill_num);
      iStat = Send(self,@GetRequisiteStat,#who=who);

      chance = iChargedClutchStanceAbility + (iStat/2);
      chance = Bound(chance,10,100);

      if chance > Random(0,100)
      {
         iLastChosen = Send(who,@GetLastUnstableInfusionChoice);

         oMoney = Send(who,@GetMoneyObject);
         if oMoney = $
         {
            % No cash.
            iCash = 0;
         }
         else
         {
            iCash = Send(oMoney,@GetValue);
         }
      
         % Fee ranges from 3x down to 1x.
         iFee = piBaseFee;
         iFee = iFee + iFee + iFee - (iFee*2*(iChargedClutchStanceAbility+1))/100;

         if iCash < iFee AND iFee <> 0
         {
            if damaging_now
            {
               Send(who,@MsgSendUser,#message_rsc=not_enough_shillings_unstable_infusion,#parm1=iFee);
            }
            return Send(oWeapon,@GetAttackSpell);
         }

         if damaging_now
            AND iFee <> 0
         {
            Send(oMoney,@SubtractNumber,#number=iFee);
         }

         if NOT damaging_now
         {
            return iLastChosen;
         }

         Switch(iLastChosen)
         {
            case ATCK_SPELL_FIRE:
               lElementsList = [ATCK_SPELL_COLD,
                                ATCK_SPELL_SHOCK,
                                ATCK_SPELL_ACID];
               break;
            case ATCK_SPELL_COLD:
               lElementsList = [ATCK_SPELL_FIRE,
                                ATCK_SPELL_SHOCK,
                                ATCK_SPELL_ACID];
               break;
            case ATCK_SPELL_SHOCK:
               lElementsList = [ATCK_SPELL_COLD,
                                ATCK_SPELL_FIRE,
                                ATCK_SPELL_ACID];
               break;
            case ATCK_SPELL_ACID:
               lElementsList = [ATCK_SPELL_COLD,
                                ATCK_SPELL_SHOCK,
                                ATCK_SPELL_FIRE];
               break;
         }

         Send(self,@ImproveAbility,#who=who);

         iChosenElement = Nth(lElementsList,Random(1,Length(lElementsList)));
         Send(who,@SetLastUnstableInfusionChoice,#iElement=iChosenElement);
         return iChosenElement;
      }

      return Send(oWeapon,@GetAttackSpell);
   }

   HasFee(who=$)
   {
      local iFee, oMoney, iCash, iChargedClutchStanceAbility;

      iChargedClutchStanceAbility = Send(who,@GetSkillAbility,#skill_num=viSkill_num);

      oMoney = Send(who,@GetMoneyObject);
      if oMoney = $
      {
         % No cash.
         iCash = 0;
      }
      else
      {
         iCash = Send(oMoney,@GetValue);
      }
      
      % Fee ranges from 3x down to 1x.
      iFee = piBaseFee;
      iFee = iFee + iFee + iFee - (iFee*2*(iChargedClutchStanceAbility+1))/100;

      if iCash >= iFee
      {
         return TRUE;
      }

      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
