% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
VolatileFocus is SorcerySkill

constants:

   include blakston.khd

resources:

   volatile_focus_name_rsc = "volatile focus"
   volatile_focus_icon_rsc = imanabom.bgf
   volatile_focus_desc_rsc = \
      "The key to maintaining focus is to embrace volatility. A skilled "
      "sorcerer can expend mana to continue casting a spell despite interruptions. "
      "The amount required to repair the spell mid-cast is dependent upon time "
      "remaining in the trance, the initial cost of the spell, and the type of disruption. "
      "For certain types of magical focus, resisting disruption costs no mana."

   volatile_focus_activated = \
      "You apply %i mana to patch the error in your spell."

classvars:

   vrName = volatile_focus_name_rsc
   vrIcon = volatile_focus_icon_rsc
   vrDesc = volatile_focus_desc_rsc

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = SKID_VOLATILE_FOCUS
   viSchool = SKS_SORCERY
   viSkill_Level = 5
   viChance_to_Increase = 20
   viMeditate_ratio = 60

   viSkillExertion = 0
   vbCheck_exertion = FALSE

properties:

messages:

   GetRequisiteStat(who=$)
   {
      return Send(who,@GetIntellect);
   }
   
   AttemptTimeSacrifice(who=$,oSpell=$,iSpellPower=0,time_remaining=0,event=EVENT_CAST)
   {
      local iAbility, iStat, iSpellAbility, iSacrifice, iAdjustedManaSacrifice, iCoefficient,
            iInitialManaCost, iInitialTimeCost, iTimeProgress, iEventCoefficient;

      if time_remaining = $
      {
         return FALSE;
      }

      iEventCoefficient = 1;
      switch(event)
      {
         case EVENT_LOGOFF:
            return FALSE;
            break;
         case EVENT_CAST:
            return FALSE;
         case EVENT_NEWOWNER:
            % Landing a focus spell in another room, are we? Huge mana cost.
            iEventCoefficient = 4;
            break;
         case EVENT_RUN:
            % Periodic cost doesn't need increased.
            iEventCoefficient = 1;
            break;
         case EVENT_DAMAGE:
            % Enemy action, but in this case exactly what this skill exists to counter.
            iEventCoefficient = 1;
            break;
         case EVENT_ATTACK:
            return FALSE;
         case EVENT_USE:
            iEventCoefficient = 1;
            break;
         case EVENT_REST:
            % Rest just cancels our cast.
            return FALSE;
         case EVENT_DISRUPT:
            % Enemy action tuned to disrupt us.
            iEventCoefficient = 2;
            break;
         case EVENT_REQNEWOWNER:
            % We'll worry about this at actual newowner
            return TRUE;
      }

      iAbility = Send(who,@GetSkillAbility,#Skill_num=viSkill_num);
      iSpellAbility = Send(who,@GetSpellAbility,
                               #spell_num=Send(oSpell,@GetSpellNum));
      iStat = Send(self,@GetRequisiteStat,#who=who);
      
      iInitialManaCost = Send(oSpell,@GetManaCost,#who=who,#iSpellPower=iSpellPower);
      iInitialTimeCost = Send(oSpell,@GetCastTime);
      
      if iInitialTimeCost = 0
      {
         return FALSE;
      }
      
      % This produces the percentage we are through the spell.
      iTimeProgress = ((iInitialTimeCost - time_remaining)*100)/iInitialTimeCost;
      iTimeProgress = Bound(iTimeProgress,0,100);
      
      % A reduced percentage of the initial mana cost of the spell
      iAdjustedManaSacrifice = ((100-iTimeProgress)*iInitialManaCost)/100;
      iCoefficient = Bound(298 - iAbility - iSpellAbility - iStat,100,300);
      
      iSacrifice = (iAdjustedManaSacrifice * iCoefficient * iEventCoefficient)/100;

      if iSacrifice = 0
      {
         % Mana focus reaches this, for instance.
         return TRUE;
      }

      if Send(who,@GetMana) > iSacrifice
         AND Random(1,100) < iAbility
      {
         Send(self,@DoSkill,#who=who,#iSacrifice=iSacrifice);
         return TRUE;
      }
      
      return FALSE;
   }

   DoSkill(who=$,iSacrifice=0)
   {
      Send(who,@LoseMana,#amount=iSacrifice);
      Send(who,@MsgSendUser,#message_rsc=volatile_focus_activated,
                            #parm1=iSacrifice);
      
      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
