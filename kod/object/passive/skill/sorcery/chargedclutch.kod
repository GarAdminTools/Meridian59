% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ChargedClutch is SorcerySkill

constants:

   include blakston.khd

resources:

   charged_clutch_name_rsc = "charged clutch"
   charged_clutch_icon_rsc = izap.bgf
   charged_clutch_desc_rsc = \
      "A skilled mage can channel elemental energies from his hands through "
      "the very course of his weapon."

   charged_clutch_intro = \
      "Sorcery Lv. 1: Channel elemental touch attacks through your weapon."

classvars:

   vrName = charged_clutch_name_rsc
   vrIcon = charged_clutch_icon_rsc
   vrDesc = charged_clutch_desc_rsc

   vrSkill_intro = charged_clutch_intro

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = SKID_CHARGED_CLUTCH
   viSchool = SKS_SORCERY
   viSkill_Level = 1
   viChance_to_Increase = 10
   viMeditate_ratio = 40

   viSkillExertion = 0
   vbCheck_exertion = FALSE

properties:
   
   pbUseMana = TRUE
   piBaseManaCost = 1
   pbUseVigor = FALSE
   piBaseVigorCost = 1

messages:

   GetRequisiteStat(who=$)
   {
      return Send(who,@GetIntellect);
   }
   
   ModifyWeaponSpellType(who=$,oWeapon=$,oTouchSpell=$,damaging_now=FALSE)
   {
      local iAbility, iStat, iSpellAbility, iManaSacrifice, iVigorSacrifice, iCoefficient,
            lElements, bDoChargedClutch;

      iAbility = Send(who,@GetSkillAbility,#Skill_num=viSkill_num);
      iSpellAbility = Send(who,@GetSpellAbility,
                               #spell_num=Send(oTouchSpell,@GetSpellNum));
      iStat = Send(self,@GetRequisiteStat,#who=who);

      bDoChargedClutch = TRUE;
      iCoefficient = Bound(298 - iAbility - iSpellAbility,100,300);

      if pbUseMana
      {
         iManaSacrifice = (piBaseManaCost * iCoefficient)/100;
         if Send(who,@GetMana) < iManaSacrifice
         {
            bDoChargedClutch = FALSE;
         }
      }
      
      if pbUseVigor
      {
         iVigorSacrifice = (piBaseVigorCost * iCoefficient)/100;
         if Send(who,@GetVigor) < iVigorSacrifice
         {
            bDoChargedClutch = FALSE;
         }
      }

      if bDoChargedClutch
         AND Random(1,100) <= iAbility
      {
         if damaging_now
         {
            Send(self,@DoSkill,#who=who,#iManaSacrifice=iManaSacrifice,#iVigorSacrifice=iVigorSacrifice);
         }
         
         if NOT IsClass(oWeapon,&RiijaSword)
         {
            return Send(oTouchSpell,@GetAttackSpell);
         }
         else
         {
            lElements = [ATCK_SPELL_FIRE + ATCK_SPELL_ALL,
                         ATCK_SPELL_COLD + ATCK_SPELL_ALL,
                         ATCK_SPELL_SHOCK + ATCK_SPELL_ALL,
                         ATCK_SPELL_ACID + ATCK_SPELL_ALL];
            return Nth(lElements,Random(1,4));
         }
      }
      
      return Send(oWeapon,@GetAttackSpell);
   }

   DoSkill(who=$,iManaSacrifice=0,iVigorSacrifice=0)
   {
      Send(who,@LoseMana,#amount=iManaSacrifice);
      Send(who,@AddExertion,#amount=iVigorSacrifice*10000);
      
      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
